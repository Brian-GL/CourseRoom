/*
 * Copyright (C) 2022 LENOVO
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package paneles.estudiantes.tareas;

import clases.Celda_Renderer;
import clases.Escogedor_Archivos;
import courseroom.CourseRoom;
import courseroom.CourseRoom_Frame;
import datos.colecciones.Lista;
import datos.interfaces.Carta_Visibilidad_Interface;
import datos.interfaces.Componentes_Interface;
import datos.interfaces.Envio_Interface;
import datos.interfaces.Limpieza_Interface;
import java.awt.CardLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.border.BevelBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import modelos.ArchivoModel;
import modelos.ArchivosTareaModel;
import modelos.DatosEntregaTareaModel;
import modelos.DatosGeneralesTareaModel;
import modelos.MensajesModel;
import modelos.ResponseModel;
import modelos.RetroalimentacionesTareaModel;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import paneles.estudiantes.Tablero_Estudiante_Panel;
import paneles.estudiantes.perfil.Perfil_Estudiante_Panel;

/**
 *
 * @author LENOVO
 */
public class Tarea_Estudiante_Panel extends javax.swing.JPanel implements  Componentes_Interface, Envio_Interface, Limpieza_Interface, Carta_Visibilidad_Interface{

    private byte carta_Visible;
    private int Id_Tarea;
    
    public Tarea_Estudiante_Panel(int id_Tarea){
        initComponents();
        Id_Tarea = id_Tarea;
        Iniciar_Componentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo_JPanel = new javax.swing.JPanel();
        titulo_JLabel = new javax.swing.JLabel();
        informacion_JButton = new javax.swing.JButton();
        chat_JButton = new javax.swing.JButton();
        archivos_Adjuntos_JButton = new javax.swing.JButton();
        entregar_Tarea_JButton = new javax.swing.JButton();
        regresar_JButton = new javax.swing.JButton();
        actualizar_JButton = new javax.swing.JButton();
        retroalimentacion_JButton = new javax.swing.JButton();
        tarea_JLayeredPane = new javax.swing.JLayeredPane();
        informacion_Tarea_JPanel = new javax.swing.JPanel();
        curso_JLabel = new javax.swing.JLabel();
        descripcion_JScrollPane = new javax.swing.JScrollPane();
        descripcion_JTextPane = new javax.swing.JTextPane();
        fecha_Entrega_JLabel = new javax.swing.JLabel();
        estatus_Tarea_JLabel = new javax.swing.JLabel();
        fecha_Creacion_JLabel = new javax.swing.JLabel();
        archivos_Adjuntos_JScrollPane = new javax.swing.JScrollPane();
        archivos_Adjuntos_JTable = new javax.swing.JTable();
        chat_JPanel = new javax.swing.JPanel();
        mensajes_Chat_JScrollPane = new javax.swing.JScrollPane();
        mensajes_Chat_JTable = new javax.swing.JTable();
        enviar_Mensaje_Chat_JPanel = new javax.swing.JPanel();
        enviar_Archivo_Chat_JButton = new javax.swing.JButton();
        redactar_Mensaje_Chat_JTextField = new javax.swing.JTextField();
        entregar_Tarea_JPanel = new javax.swing.JPanel();
        subir_Archivos_JButton = new javax.swing.JButton();
        archivos_Subidos_JScrollPane = new javax.swing.JScrollPane();
        archivos_Subidos_JTable = new javax.swing.JTable();
        subir_Cambios_JButton = new javax.swing.JButton();
        fecha_Actualizacion_JLabel = new javax.swing.JLabel();
        calificacion_JLabel = new javax.swing.JLabel();
        retroalimentacion_JScrollPane = new javax.swing.JScrollPane();
        retroalimentacion_JTable = new javax.swing.JTable();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1110, 630));

        titulo_JPanel.setMaximumSize(new java.awt.Dimension(32767, 72));
        titulo_JPanel.setOpaque(false);
        titulo_JPanel.setPreferredSize(new java.awt.Dimension(982, 72));

        titulo_JLabel.setFont(new java.awt.Font("Segoe UI", 1, 26)); // NOI18N
        titulo_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo_JLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        titulo_JLabel.setMaximumSize(new java.awt.Dimension(818, 68));
        titulo_JLabel.setMinimumSize(new java.awt.Dimension(818, 68));
        titulo_JLabel.setOpaque(true);
        titulo_JLabel.setPreferredSize(new java.awt.Dimension(818, 68));

        informacion_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/info_1.png"))); // NOI18N
        informacion_JButton.setToolTipText("<html> <h3>Descripción De<br>Tarea(s)</h3> </html>");
        informacion_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)informacion_JButton.getIcon()).getImage().flush();
        informacion_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                informacion_JButtonMouseClicked(evt);
            }
        });

        chat_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/online-chat_1.png"))); // NOI18N
        chat_JButton.setToolTipText("<html> <h3>Chat</h3> </html>");
        chat_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)chat_JButton.getIcon()).getImage().flush();
        chat_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chat_JButtonMouseClicked(evt);
            }
        });

        archivos_Adjuntos_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/context.png"))); // NOI18N
        archivos_Adjuntos_JButton.setToolTipText("<html> <h3>Archivos<br>Adjuntos</h3> </html>");
        archivos_Adjuntos_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)archivos_Adjuntos_JButton.getIcon()).getImage().flush();
        archivos_Adjuntos_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                archivos_Adjuntos_JButtonMouseClicked(evt);
            }
        });

        entregar_Tarea_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/woman.png"))); // NOI18N
        entregar_Tarea_JButton.setToolTipText("<html> <h3>Entrega De<br>Tarea(s)</h3> </html>");
        entregar_Tarea_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)entregar_Tarea_JButton.getIcon()).getImage().flush();
        entregar_Tarea_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                entregar_Tarea_JButtonMouseClicked(evt);
            }
        });

        regresar_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/reply.png"))); // NOI18N
        regresar_JButton.setToolTipText("<html> <h3>Regresar A Mis Tareas</h3> </html>");
        regresar_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        regresar_JButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ((ImageIcon)regresar_JButton.getIcon()).getImage().flush();
        regresar_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                regresar_JButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                regresar_JButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                regresar_JButtonMouseExited(evt);
            }
        });

        actualizar_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/updated.png"))); // NOI18N
        actualizar_JButton.setToolTipText("<html> <h4>Actulizar<br>Página</h4> </html>");
        actualizar_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)actualizar_JButton.getIcon()).getImage().flush();
        actualizar_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actualizar_JButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                actualizar_JButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                actualizar_JButtonMouseExited(evt);
            }
        });

        retroalimentacion_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/feedback.png"))); // NOI18N
        retroalimentacion_JButton.setToolTipText("<html> <h3>Retroalimentación<br>De Tarea(s)</h3> </html>");
        retroalimentacion_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)retroalimentacion_JButton.getIcon()).getImage().flush();
        retroalimentacion_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                retroalimentacion_JButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout titulo_JPanelLayout = new javax.swing.GroupLayout(titulo_JPanel);
        titulo_JPanel.setLayout(titulo_JPanelLayout);
        titulo_JPanelLayout.setHorizontalGroup(
            titulo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titulo_JPanelLayout.createSequentialGroup()
                .addComponent(regresar_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(titulo_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(informacion_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(archivos_Adjuntos_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chat_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entregar_Tarea_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(retroalimentacion_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actualizar_JButton))
        );
        titulo_JPanelLayout.setVerticalGroup(
            titulo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titulo_JPanelLayout.createSequentialGroup()
                .addGroup(titulo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(regresar_JButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(titulo_JPanelLayout.createSequentialGroup()
                        .addGroup(titulo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chat_JButton)
                            .addComponent(archivos_Adjuntos_JButton)
                            .addComponent(informacion_JButton)
                            .addComponent(entregar_Tarea_JButton)
                            .addComponent(titulo_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(actualizar_JButton)
                            .addComponent(retroalimentacion_JButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tarea_JLayeredPane.setPreferredSize(new java.awt.Dimension(982, 534));
        tarea_JLayeredPane.setLayout(new java.awt.CardLayout());

        informacion_Tarea_JPanel.setToolTipText("");
        informacion_Tarea_JPanel.setOpaque(false);
        informacion_Tarea_JPanel.setPreferredSize(new java.awt.Dimension(1110, 630));

        curso_JLabel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        curso_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        curso_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/training.png"))); // NOI18N
        curso_JLabel.setToolTipText("<html>\n<h3>Curso de provenencia</h3>\n</html>");
        curso_JLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        curso_JLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        curso_JLabel.setOpaque(true);
        ((ImageIcon)curso_JLabel.getIcon()).getImage().flush();
        curso_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                curso_JLabelMouseClicked(evt);
            }
        });

        descripcion_JScrollPane.setBorder(null);
        descripcion_JScrollPane.setFocusable(false);
        descripcion_JScrollPane.setOpaque(false);
        descripcion_JScrollPane.setRequestFocusEnabled(false);
        descripcion_JScrollPane.setVerifyInputWhenFocusTarget(false);
        descripcion_JScrollPane.setWheelScrollingEnabled(false);

        descripcion_JTextPane.setEditable(false);
        descripcion_JTextPane.setBorder(null);
        descripcion_JTextPane.setContentType("text/html"); // NOI18N
        descripcion_JTextPane.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        descripcion_JTextPane.setText("");
        descripcion_JTextPane.setToolTipText("<html>\n<h3>Descripción</h3>\n</html>");
        descripcion_JTextPane.setFocusCycleRoot(false);
        descripcion_JTextPane.setOpaque(false);
        descripcion_JTextPane.setRequestFocusEnabled(false);
        descripcion_JScrollPane.setViewportView(descripcion_JTextPane);

        fecha_Entrega_JLabel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        fecha_Entrega_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fecha_Entrega_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/clock.png"))); // NOI18N
        ((ImageIcon)fecha_Entrega_JLabel.getIcon()).getImage().flush();

        estatus_Tarea_JLabel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        estatus_Tarea_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        estatus_Tarea_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/homework_1.png"))); // NOI18N
        estatus_Tarea_JLabel.setText("Pendiente");
        estatus_Tarea_JLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        estatus_Tarea_JLabel.setOpaque(true);
        ((ImageIcon)estatus_Tarea_JLabel.getIcon()).getImage().flush();

        fecha_Creacion_JLabel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        fecha_Creacion_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fecha_Creacion_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/daily-tasks.png"))); // NOI18N
        ((ImageIcon)fecha_Creacion_JLabel.getIcon()).getImage().flush();

        javax.swing.GroupLayout informacion_Tarea_JPanelLayout = new javax.swing.GroupLayout(informacion_Tarea_JPanel);
        informacion_Tarea_JPanel.setLayout(informacion_Tarea_JPanelLayout);
        informacion_Tarea_JPanelLayout.setHorizontalGroup(
            informacion_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacion_Tarea_JPanelLayout.createSequentialGroup()
                .addGroup(informacion_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descripcion_JScrollPane)
                    .addGroup(informacion_Tarea_JPanelLayout.createSequentialGroup()
                        .addComponent(curso_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(estatus_Tarea_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(informacion_Tarea_JPanelLayout.createSequentialGroup()
                        .addComponent(fecha_Creacion_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fecha_Entrega_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)))
                .addGap(0, 0, 0))
        );
        informacion_Tarea_JPanelLayout.setVerticalGroup(
            informacion_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacion_Tarea_JPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(informacion_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(curso_JLabel)
                    .addComponent(estatus_Tarea_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descripcion_JScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informacion_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fecha_Entrega_JLabel)
                    .addComponent(fecha_Creacion_JLabel))
                .addGap(0, 0, 0))
        );

        tarea_JLayeredPane.add(informacion_Tarea_JPanel, "Informacion");

        archivos_Adjuntos_JScrollPane.setBorder(null);
        archivos_Adjuntos_JScrollPane.setOpaque(false);

        archivos_Adjuntos_JTable.setAutoCreateRowSorter(true);
        archivos_Adjuntos_JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        archivos_Adjuntos_JTable.setModel(

            new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "Archivo", "Adjuntado",
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }

                @Override
                public Class getColumnClass(int column)
                {
                    for(int i = 0; i < archivos_Adjuntos_JTable.getRowCount(); i++)
                    {
                        //The first valid value of a cell of given column is retrieved.
                        if(getValueAt(i,column) != null)
                        {
                            return getValueAt(i, column).getClass();
                        }
                    }
                    //if no valid value is found, default renderer is returned.
                    return super.getColumnClass(column);
                }
            });
            archivos_Adjuntos_JTable.setRowHeight(50);
            archivos_Adjuntos_JTable.setShowGrid(true);
            archivos_Adjuntos_JTable.setSurrendersFocusOnKeystroke(true);
            archivos_Adjuntos_JTable.setRowSorter(new TableRowSorter(archivos_Adjuntos_JTable.getModel()));
            archivos_Adjuntos_JTable.addMouseListener(new MouseAdapter() {

                @Override
                public void mousePressed(MouseEvent e) {
                    if (e.getClickCount() == 2) {

                        JTable tabla = (JTable) e.getComponent();
                        int columna = tabla.getSelectedColumn();

                        // Abrir
                        if (columna == 0) {
                            int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                            DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
                            Celda_Renderer celda = (Celda_Renderer) modelo.getValueAt(fila, 0);

                            int id_Archivo = Integer.parseInt(celda.ID());

                            if (id_Archivo > 0){
                                Descargar_Archivo_Adjunto(id_Archivo,celda.Texto());
                            }else{
                                CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", "No Se Pudo Descargar El Archivo");
                            }

                        }

                    }
                }
            });
            archivos_Adjuntos_JScrollPane.setViewportView(archivos_Adjuntos_JTable);

            tarea_JLayeredPane.add(archivos_Adjuntos_JScrollPane, "Archivos_Adjuntos");

            chat_JPanel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
            chat_JPanel.setOpaque(false);
            chat_JPanel.setPreferredSize(new java.awt.Dimension(1110, 630));
            chat_JPanel.setLayout(new java.awt.BorderLayout());

            mensajes_Chat_JScrollPane.setBorder(null);
            mensajes_Chat_JScrollPane.setOpaque(false);

            mensajes_Chat_JTable.setAutoCreateRowSorter(true);
            mensajes_Chat_JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
            mensajes_Chat_JTable.setModel(

                new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {
                        "Emisor", "Mensaje", "Fecha"
                    }
                ) {
                    boolean[] canEdit = new boolean [] {
                        false, false, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }

                    @Override
                    public Class getColumnClass(int column)
                    {
                        for(int i = 0; i < mensajes_Chat_JTable.getRowCount(); i++)
                        {
                            //The first valid value of a cell of given column is retrieved.
                            if(getValueAt(i,column) != null)
                            {
                                return getValueAt(i, column).getClass();
                            }
                        }
                        //if no valid value is found, default renderer is returned.
                        return super.getColumnClass(column);
                    }
                });
                mensajes_Chat_JTable.setRowHeight(80);
                mensajes_Chat_JTable.setShowGrid(true);
                mensajes_Chat_JTable.setSurrendersFocusOnKeystroke(true);
                mensajes_Chat_JTable.setRowSorter(new TableRowSorter(mensajes_Chat_JTable.getModel()));
                mensajes_Chat_JTable.addMouseListener(new MouseAdapter() {

                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (e.getClickCount() == 2) {

                            JTable tabla = (JTable) e.getComponent();
                            int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                            int columna = tabla.getSelectedColumn();

                            // Abrir
                            if (columna == 1) {
                                DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
                                Celda_Renderer celda = (Celda_Renderer)modelo.getValueAt(fila, columna);

                                if(celda.Tiene_Icono()){

                                    int id_Mensaje = Integer.parseInt(celda.ID());

                                    if (id_Mensaje > 0){
                                        Descargar_Archivo_Chat(id_Mensaje,celda.Texto());
                                    }else{
                                        CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", "No Se Pudo Descargar El Archivo");
                                    }
                                }
                            }

                        }
                    }
                });
                mensajes_Chat_JScrollPane.setViewportView(mensajes_Chat_JTable);

                chat_JPanel.add(mensajes_Chat_JScrollPane, java.awt.BorderLayout.CENTER);

                enviar_Mensaje_Chat_JPanel.setMaximumSize(new java.awt.Dimension(32767, 44));
                enviar_Mensaje_Chat_JPanel.setPreferredSize(new java.awt.Dimension(1085, 44));
                enviar_Mensaje_Chat_JPanel.setLayout(new java.awt.BorderLayout());

                enviar_Archivo_Chat_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/attachment.png"))); // NOI18N
                enviar_Archivo_Chat_JButton.setToolTipText("Enviar Archivo");
                enviar_Archivo_Chat_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                enviar_Archivo_Chat_JButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                ((ImageIcon)enviar_Archivo_Chat_JButton.getIcon()).getImage().flush();
                enviar_Archivo_Chat_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        enviar_Archivo_Chat_JButtonMouseClicked(evt);
                    }
                    public void mouseEntered(java.awt.event.MouseEvent evt) {
                        enviar_Archivo_Chat_JButtonMouseEntered(evt);
                    }
                    public void mouseExited(java.awt.event.MouseEvent evt) {
                        enviar_Archivo_Chat_JButtonMouseExited(evt);
                    }
                });
                enviar_Mensaje_Chat_JPanel.add(enviar_Archivo_Chat_JButton, java.awt.BorderLayout.WEST);

                redactar_Mensaje_Chat_JTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
                redactar_Mensaje_Chat_JTextField.setPreferredSize(new java.awt.Dimension(71, 34));
                redactar_Mensaje_Chat_JTextField.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyPressed(java.awt.event.KeyEvent evt) {
                        redactar_Mensaje_Chat_JTextFieldKeyPressed(evt);
                    }
                });
                enviar_Mensaje_Chat_JPanel.add(redactar_Mensaje_Chat_JTextField, java.awt.BorderLayout.CENTER);

                chat_JPanel.add(enviar_Mensaje_Chat_JPanel, java.awt.BorderLayout.SOUTH);

                tarea_JLayeredPane.add(chat_JPanel, "Chat");

                entregar_Tarea_JPanel.setToolTipText("");
                entregar_Tarea_JPanel.setOpaque(false);
                entregar_Tarea_JPanel.setPreferredSize(new java.awt.Dimension(1110, 630));

                subir_Archivos_JButton.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
                subir_Archivos_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/submit.png"))); // NOI18N
                subir_Archivos_JButton.setText("Subir Archivo(s)");
                subir_Archivos_JButton.setToolTipText("Compartir Y Subir Archivo(s)");
                subir_Archivos_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                ((ImageIcon)subir_Archivos_JButton.getIcon()).getImage().flush();
                subir_Archivos_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        subir_Archivos_JButtonMouseClicked(evt);
                    }
                    public void mouseEntered(java.awt.event.MouseEvent evt) {
                        subir_Archivos_JButtonMouseEntered(evt);
                    }
                    public void mouseExited(java.awt.event.MouseEvent evt) {
                        subir_Archivos_JButtonMouseExited(evt);
                    }
                });

                archivos_Subidos_JScrollPane.setBorder(null);
                archivos_Subidos_JScrollPane.setOpaque(false);

                archivos_Subidos_JTable.setAutoCreateRowSorter(true);
                archivos_Subidos_JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
                archivos_Subidos_JTable.setModel(

                    new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                            "Archivo", "Subido", "Remover"
                        }
                    ) {
                        boolean[] canEdit = new boolean [] {
                            false, false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }

                        @Override
                        public Class getColumnClass(int column)
                        {
                            for(int i = 0; i < archivos_Subidos_JTable.getRowCount(); i++)
                            {
                                //The first valid value of a cell of given column is retrieved.
                                if(getValueAt(i,column) != null)
                                {
                                    return getValueAt(i, column).getClass();
                                }
                            }
                            //if no valid value is found, default renderer is returned.
                            return super.getColumnClass(column);
                        }
                    });
                    archivos_Subidos_JTable.setRowHeight(75);
                    archivos_Subidos_JTable.setShowGrid(true);
                    archivos_Subidos_JTable.setShowVerticalLines(false);
                    archivos_Subidos_JTable.setSurrendersFocusOnKeystroke(true);
                    archivos_Subidos_JTable.setRowSorter(new TableRowSorter(archivos_Subidos_JTable.getModel()));
                    archivos_Subidos_JTable.addMouseListener(new MouseAdapter() {

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.getClickCount() == 2) {

                                JTable tabla = (JTable) e.getComponent();
                                int columna = tabla.getSelectedColumn();

                                // Abrir
                                switch (columna) {
                                    case 0: {
                                        int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                                        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
                                        Celda_Renderer celda = (Celda_Renderer) modelo.getValueAt(fila, 0);
                                        if(celda.Tiene_Icono()){

                                            int id_Archivo = Integer.parseInt(celda.ID());

                                            if (id_Archivo > 0){
                                                Descargar_Archivo_Entrega(id_Archivo,celda.Texto());
                                            }else{
                                                CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", "No Se Pudo Descargar El Archivo");
                                            }
                                        }
                                    }
                                    break;
                                    // Remover
                                    case 2: {
                                        int resultado = JOptionPane.showConfirmDialog(CourseRoom_Frame.getInstance(), 
                                            "¿Estás Segur@ De Remover Está Tarea?", "Remover Tarea", 
                                            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

                                        if(resultado == JOptionPane.YES_OPTION){
                                            int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());

                                            DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
                                            Celda_Renderer celda = (Celda_Renderer)  modelo.getValueAt(fila, columna);

                                            int id_Archivo_Subido = Integer.parseInt(celda.ID());

                                            SwingUtilities.invokeLater(() -> {
                                                ResponseModel response = CourseRoom.Solicitudes().Remover_Archivo_Subido_Tarea(id_Archivo_Subido, Tablero_Estudiante_Panel.Id_Usuario());

                                                if(response.Is_Success()){
                                                    CourseRoom.Utilerias().Mensaje_Informativo("Remover Tarea", response.Mensaje());
                                                    modelo.removeRow(fila);
                                                }else{
                                                    CourseRoom.Utilerias().Mensaje_Alerta("Remover Tarea", response.Mensaje());
                                                }
                                            });
                                        }

                                        break;
                                    }
                                    default:
                                    break;
                                }

                            }
                        }
                    });
                    archivos_Subidos_JScrollPane.setViewportView(archivos_Subidos_JTable);

                    subir_Cambios_JButton.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
                    subir_Cambios_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/document.png"))); // NOI18N
                    subir_Cambios_JButton.setText("Subir Cambio(s)");
                    subir_Cambios_JButton.setToolTipText("");
                    subir_Cambios_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                    ((ImageIcon)subir_Cambios_JButton.getIcon()).getImage().flush();
                    subir_Cambios_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            subir_Cambios_JButtonMouseClicked(evt);
                        }
                        public void mouseEntered(java.awt.event.MouseEvent evt) {
                            subir_Cambios_JButtonMouseEntered(evt);
                        }
                        public void mouseExited(java.awt.event.MouseEvent evt) {
                            subir_Cambios_JButtonMouseExited(evt);
                        }
                    });

                    fecha_Actualizacion_JLabel.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
                    fecha_Actualizacion_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                    fecha_Actualizacion_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/circular-clock.png"))); // NOI18N
                    fecha_Actualizacion_JLabel.setText("Actualizado nunca");
                    fecha_Actualizacion_JLabel.setToolTipText("");
                    ((ImageIcon)fecha_Actualizacion_JLabel.getIcon()).getImage().flush();

                    calificacion_JLabel.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
                    calificacion_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    calificacion_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/online-class.png"))); // NOI18N
                    calificacion_JLabel.setText("Calfiicacion");
                    calificacion_JLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                    calificacion_JLabel.setOpaque(true);
                    ((ImageIcon)calificacion_JLabel.getIcon()).getImage().flush();

                    javax.swing.GroupLayout entregar_Tarea_JPanelLayout = new javax.swing.GroupLayout(entregar_Tarea_JPanel);
                    entregar_Tarea_JPanel.setLayout(entregar_Tarea_JPanelLayout);
                    entregar_Tarea_JPanelLayout.setHorizontalGroup(
                        entregar_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(entregar_Tarea_JPanelLayout.createSequentialGroup()
                            .addGap(0, 0, 0)
                            .addGroup(entregar_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(archivos_Subidos_JScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1046, Short.MAX_VALUE)
                                .addGroup(entregar_Tarea_JPanelLayout.createSequentialGroup()
                                    .addComponent(calificacion_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fecha_Actualizacion_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, entregar_Tarea_JPanelLayout.createSequentialGroup()
                                    .addComponent(subir_Cambios_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(subir_Archivos_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 0, 0))
                    );
                    entregar_Tarea_JPanelLayout.setVerticalGroup(
                        entregar_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(entregar_Tarea_JPanelLayout.createSequentialGroup()
                            .addGroup(entregar_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fecha_Actualizacion_JLabel)
                                .addGroup(entregar_Tarea_JPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(calificacion_JLabel)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(archivos_Subidos_JScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(entregar_Tarea_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(subir_Cambios_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(subir_Archivos_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, 0))
                    );

                    tarea_JLayeredPane.add(entregar_Tarea_JPanel, "Entregar");

                    retroalimentacion_JScrollPane.setBorder(null);
                    retroalimentacion_JScrollPane.setOpaque(false);

                    retroalimentacion_JTable.setAutoCreateRowSorter(true);
                    retroalimentacion_JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
                    retroalimentacion_JTable.setModel(

                        new javax.swing.table.DefaultTableModel(
                            new Object [][] {

                            },
                            new String [] {
                                "Retroalimentación", "Fecha", "Adjunto"
                            }
                        ) {
                            boolean[] canEdit = new boolean [] {
                                false, false, false
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                            }

                            @Override
                            public Class getColumnClass(int column)
                            {
                                for(int i = 0; i < retroalimentacion_JTable.getRowCount(); i++)
                                {
                                    //The first valid value of a cell of given column is retrieved.
                                    if(getValueAt(i,column) != null)
                                    {
                                        return getValueAt(i, column).getClass();
                                    }
                                }
                                //if no valid value is found, default renderer is returned.
                                return super.getColumnClass(column);
                            }
                        });
                        retroalimentacion_JTable.setRowHeight(90);
                        retroalimentacion_JTable.setShowGrid(true);
                        retroalimentacion_JTable.setSurrendersFocusOnKeystroke(true);
                        retroalimentacion_JTable.setRowSorter(new TableRowSorter(retroalimentacion_JTable.getModel()));
                        retroalimentacion_JTable.addMouseListener(new MouseAdapter() {

                            @Override
                            public void mousePressed(MouseEvent e) {
                                if (e.getClickCount() == 2) {

                                    JTable tabla = (JTable) e.getComponent();
                                    int columna = tabla.getSelectedColumn();

                                    // Abrir
                                    if (columna == 2){
                                        int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                                        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
                                        Celda_Renderer celda = (Celda_Renderer) modelo.getValueAt(fila, 0);
                                        if(celda.Tiene_Icono()){
                                            int id_Retroalimentacion = Integer.parseInt(celda.ID());

                                            if (id_Retroalimentacion > 0){
                                                Descargar_Archivo_Retroalimentacion(id_Retroalimentacion,celda.Texto());
                                            }else{
                                                CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", "No Se Pudo Descargar El Archivo");
                                            }
                                        }
                                    }
                                }
                            }
                        });
                        retroalimentacion_JScrollPane.setViewportView(retroalimentacion_JTable);

                        tarea_JLayeredPane.add(retroalimentacion_JScrollPane, "Retroalimentacion");

                        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                        this.setLayout(layout);
                        layout.setHorizontalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tarea_JLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1046, Short.MAX_VALUE)
                                    .addComponent(titulo_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1046, Short.MAX_VALUE))
                                .addGap(32, 32, 32))
                        );
                        layout.setVerticalGroup(
                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(titulo_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tarea_JLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        );
                    }// </editor-fold>//GEN-END:initComponents

    private void chat_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chat_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout)tarea_JLayeredPane.getLayout()).show(tarea_JLayeredPane, "Chat");
            carta_Visible = 2;
            Carta_Visible();
            
        }
    }//GEN-LAST:event_chat_JButtonMouseClicked

    private void archivos_Adjuntos_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_archivos_Adjuntos_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout)tarea_JLayeredPane.getLayout()).show(tarea_JLayeredPane, "Archivos_Adjuntos");
            carta_Visible = 1;
            Carta_Visible();
        }
    }//GEN-LAST:event_archivos_Adjuntos_JButtonMouseClicked

    private void informacion_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_informacion_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout) tarea_JLayeredPane.getLayout()).show(tarea_JLayeredPane, "Informacion");
            carta_Visible = 0;
            Carta_Visible();
        }
    }//GEN-LAST:event_informacion_JButtonMouseClicked

    private void entregar_Tarea_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_entregar_Tarea_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout) tarea_JLayeredPane.getLayout()).show(tarea_JLayeredPane, "Entregar");
            carta_Visible = 3;
            Carta_Visible();
        }
    }//GEN-LAST:event_entregar_Tarea_JButtonMouseClicked

    private void regresar_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regresar_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Tablero_Estudiante_Panel.Mostrar_Vista("Tareas");
        }
    }//GEN-LAST:event_regresar_JButtonMouseClicked

    private void regresar_JButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regresar_JButtonMouseEntered
        // TODO add your handling code here:
        regresar_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
    }//GEN-LAST:event_regresar_JButtonMouseEntered

    private void regresar_JButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regresar_JButtonMouseExited
        // TODO add your handling code here:
        regresar_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
    }//GEN-LAST:event_regresar_JButtonMouseExited

    private void curso_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_curso_JLabelMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){

        }
    }//GEN-LAST:event_curso_JLabelMouseClicked

    private void subir_Archivos_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subir_Archivos_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Subir_Archivos();
        }
    }//GEN-LAST:event_subir_Archivos_JButtonMouseClicked

    private void subir_Archivos_JButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subir_Archivos_JButtonMouseEntered
        // TODO add your handling code here:
        subir_Archivos_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
        subir_Archivos_JButton.setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
    }//GEN-LAST:event_subir_Archivos_JButtonMouseEntered

    private void subir_Archivos_JButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subir_Archivos_JButtonMouseExited
        // TODO add your handling code here:
        subir_Archivos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
        subir_Archivos_JButton.setForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
    }//GEN-LAST:event_subir_Archivos_JButtonMouseExited

    private void subir_Cambios_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subir_Cambios_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            //fecha_Actualizacion_JLabel.setText(CourseRoom.Utilerias().Concatenar("Actualizado ",CourseRoom.Utilerias().Fecha_Hora_Local()));
            int resultado = JOptionPane.showConfirmDialog(CourseRoom_Frame.getInstance(),
                    "¿Estás Segur@ De Subir Los Cambios?", "Pregunta De Confirmación", 
                    JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
            
            if(resultado == JOptionPane.YES_OPTION){
                SwingUtilities.invokeLater(() -> {
                    ResponseModel response = CourseRoom.Solicitudes().Entregar_Tarea_Usuario(Id_Tarea,
                            Tablero_Estudiante_Panel.Id_Usuario());
                    
                    if(response.Is_Success()) {
                        CourseRoom.Utilerias().Mensaje_Informativo("Entregar Tarea", response.Mensaje());
                    } else {
                        CourseRoom.Utilerias().Mensaje_Alerta("Entregar Tarea", response.Mensaje());
                    }
                });
            }
        }
    }//GEN-LAST:event_subir_Cambios_JButtonMouseClicked

    private void subir_Cambios_JButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subir_Cambios_JButtonMouseEntered
        // TODO add your handling code here:
        subir_Cambios_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
        subir_Cambios_JButton.setForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
    }//GEN-LAST:event_subir_Cambios_JButtonMouseEntered

    private void subir_Cambios_JButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subir_Cambios_JButtonMouseExited
        // TODO add your handling code here:
        subir_Cambios_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
        subir_Cambios_JButton.setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
    }//GEN-LAST:event_subir_Cambios_JButtonMouseExited

    private void actualizar_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizar_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            switch (carta_Visible) {
                case 0 -> Obtener_Datos_Generales_Tarea();
                case 1 -> Obtener_Archivos_Adjuntos_Tarea();
                case 2 -> Obtener_Mensajes_Tarea();
                case 3 -> {
                    Obtener_Datos_Entrega_Tarea();
                    Obtener_Archivos_Entregados_Tarea();
                }
                case 4 -> Obtener_Retroalimentaciones();
            }
        }
    }//GEN-LAST:event_actualizar_JButtonMouseClicked

    private void actualizar_JButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizar_JButtonMouseEntered
        // TODO add your handling code here:
        actualizar_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
    }//GEN-LAST:event_actualizar_JButtonMouseEntered

    private void actualizar_JButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizar_JButtonMouseExited
        // TODO add your handling code here:
        actualizar_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
    }//GEN-LAST:event_actualizar_JButtonMouseExited

    private void retroalimentacion_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retroalimentacion_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout) tarea_JLayeredPane.getLayout()).show(tarea_JLayeredPane, "Retroalimentacion");
            carta_Visible = 4;
            Carta_Visible();
        }
    }//GEN-LAST:event_retroalimentacion_JButtonMouseClicked

    private void enviar_Archivo_Chat_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enviar_Archivo_Chat_JButtonMouseClicked
        if(SwingUtilities.isLeftMouseButton(evt)){
            Enviar_Archivo();
        }
    }//GEN-LAST:event_enviar_Archivo_Chat_JButtonMouseClicked

    private void enviar_Archivo_Chat_JButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enviar_Archivo_Chat_JButtonMouseEntered
        // TODO add your handling code here:
        enviar_Archivo_Chat_JButton.setBackground(CourseRoom.Utilerias().Primer_Color());
    }//GEN-LAST:event_enviar_Archivo_Chat_JButtonMouseEntered

    private void enviar_Archivo_Chat_JButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enviar_Archivo_Chat_JButtonMouseExited
        // TODO add your handling code here:
        enviar_Archivo_Chat_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
    }//GEN-LAST:event_enviar_Archivo_Chat_JButtonMouseExited

    private void redactar_Mensaje_Chat_JTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redactar_Mensaje_Chat_JTextFieldKeyPressed
        int longitud = redactar_Mensaje_Chat_JTextField.getText().length();
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (longitud > 499) {
                redactar_Mensaje_Chat_JTextField.setText(redactar_Mensaje_Chat_JTextField.getText().substring(0, longitud - 1));
                CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!","El Mensaje Que Deseas Enviar<br>Rebasa Los 500 Caracteres");
            }else{
                Enviar_Mensaje();
            }
        }
    }//GEN-LAST:event_redactar_Mensaje_Chat_JTextFieldKeyPressed

    public int Id_Tarea() {
        return Id_Tarea;
    }
    
    private void Agregar_Retroalimentacion(RetroalimentacionesTareaModel retroalimentacionesTareaModel){
        
        Celda_Renderer[] celdas = new Celda_Renderer[3];
        Celda_Renderer celda;
        String retroalimentacion =  retroalimentacionesTareaModel.Retroalimentacion();
        String fecha_Retroalimentacion = retroalimentacionesTareaModel.Fecha_Envio();
        String archivo_Adjunto = retroalimentacionesTareaModel.Nombre_Archivo(); 
        
        String id = String.valueOf(retroalimentacionesTareaModel.Id_Retroalimentacion());
        
        DefaultTableModel modelo = (DefaultTableModel) retroalimentacion_JTable.getModel();
        
        try {
            
            Image imagen = ImageIO.read(getClass().getResource("/recursos/iconos/box.png"));
            ImageIcon icono = new ImageIcon(imagen);
            
            celda = new Celda_Renderer(retroalimentacion,id);
            celdas[0] = celda;
            celda = new Celda_Renderer(fecha_Retroalimentacion,id);
            celdas[1] = celda;
            celda = new Celda_Renderer(icono,archivo_Adjunto, id);
            celdas[2] = celda;
            modelo.addRow(celdas);
            retroalimentacion_JTable.setRowHeight(modelo.getRowCount()-1, CourseRoom.Utilerias().Altura_Fila_Tabla(retroalimentacion.length()));
            
            imagen.flush();
        } catch (IOException ex) {
           System.err.println(ex.getMessage());
        }
    }
    
    private void Agregar_Archivo_Adjunto(ArchivosTareaModel archivosTareaModel){
        Celda_Renderer[] celdas = new Celda_Renderer[2];
        Celda_Renderer celda;
        
        String id = String.valueOf(archivosTareaModel.Id_Archivo_Tarea());
        String archivo_Adjunto = CourseRoom.Utilerias().Concatenar(archivosTareaModel.Nombre_Archivo(),".",archivosTareaModel.Extension());
        String fecha_Adjunto = archivosTareaModel.Fecha_Enviado();
        DefaultTableModel modelo = (DefaultTableModel) archivos_Adjuntos_JTable.getModel();
        
        try {
            
            Image imagen = ImageIO.read(getClass().getResource("/recursos/iconos/box.png"));
            ImageIcon icono = new ImageIcon(imagen);
            
            celda = new Celda_Renderer(icono,archivo_Adjunto, id);
            celdas[0] = celda;
            
            imagen.flush();
        } catch (IOException ex) {
            celda = new Celda_Renderer(archivo_Adjunto, id);
            celdas[0] = celda;
        }
        celda = new Celda_Renderer(fecha_Adjunto,id);
        celdas[1] = celda;

        modelo.addRow(celdas);
        archivos_Adjuntos_JTable.setRowHeight(modelo.getRowCount()-1, CourseRoom.Utilerias().Altura_Fila_Tabla(archivo_Adjunto.length()));

        
    }
    
    private void Obtener_Mensajes_Tarea(){
        
        DefaultTableModel modelo = (DefaultTableModel) mensajes_Chat_JTable.getModel();
        modelo.setRowCount(0);
        SwingUtilities.invokeLater(() -> {
            Lista<MensajesModel> response = CourseRoom.Solicitudes().Obtener_Mensajes_Chat(Id_Tarea);

            if (!response.is_empty()) {
                while (!response.is_empty()) {
                    Agregar_Mensaje_Tarea(response.delist());
                }
            } else {
                CourseRoom.Utilerias().Mensaje_Alerta("Mensajes Tarea", "No Se Encontraron Mensajes En Las Tareas");
            }
        });
    }
    
    private void Agregar_Mensaje_Tarea(MensajesModel mensajesModel){
        Celda_Renderer[] celdas = new Celda_Renderer[3];
        String id = String.valueOf(mensajesModel.Id_Mensaje());
        Celda_Renderer celda;
        celda = new Celda_Renderer(mensajesModel.Nombre_Completo(),id);
        celdas[0] = celda;
        if(mensajesModel.Extension().isBlank()){
            celda = new Celda_Renderer(mensajesModel.Mensaje(),id);
            celdas[1] = celda;
        }else{
            celda = new Celda_Renderer(mensajesModel.Mensaje(),id);
            celdas[1] = celda;
        }
        celda = new Celda_Renderer(mensajesModel.Fecha_Envio(),id);
        celdas[2] = celda;

        DefaultTableModel modelo = (DefaultTableModel) mensajes_Chat_JTable.getModel();
        modelo.addRow(celdas);
        
        mensajes_Chat_JTable.setRowHeight(mensajes_Chat_JTable.getRowCount()-1, 
                CourseRoom.Utilerias().Altura_Fila_Tabla(mensajesModel.Mensaje().length()));
    }
    
    private void Obtener_Datos_Generales_Tarea(){
        
        DatosGeneralesTareaModel datosGeneralesTarea = 
                CourseRoom.Solicitudes().Obtener_Datos_Generales_Tarea(Id_Tarea, Tablero_Estudiante_Panel.Id_Usuario());
        
        if(!datosGeneralesTarea.Nombre().isBlank()){
            titulo_JLabel.setText(datosGeneralesTarea.Nombre());
            curso_JLabel.setText(datosGeneralesTarea.Nombre_Curso());
            fecha_Creacion_JLabel.setText(CourseRoom.Utilerias().Concatenar("Creada el ", datosGeneralesTarea.Fecha_Creacion()));
            fecha_Entrega_JLabel.setText(CourseRoom.Utilerias().Concatenar("Entrega el ", datosGeneralesTarea.Fecha_Entrega()));
            estatus_Tarea_JLabel.setText(datosGeneralesTarea.Estatus());
            descripcion_JTextPane.setText(CourseRoom.Utilerias().Formato_HTML_Izquierda(datosGeneralesTarea.Descripcion()));
        }
    }
    
    private void Obtener_Archivos_Adjuntos_Tarea(){
        
        
        DefaultTableModel modelo = (DefaultTableModel) archivos_Adjuntos_JTable.getModel();
        modelo.setRowCount(0);
        SwingUtilities.invokeLater(() -> {
            Lista<ArchivosTareaModel> response = CourseRoom.Solicitudes().Obtener_Archivos_Adjuntos_Tarea(Id_Tarea);

            if(response.is_empty()){
                CourseRoom.Utilerias().Mensaje_Alerta("Archivos Adjuntos", "No Se Encontraron Archivos Adjuntos");
            }else{
                while(!response.is_empty()){
                    Agregar_Archivo_Adjunto(response.delist());
                }
            }
        });
    }

    private void Descargar_Archivo_Entrega(int id_Archivo_Subido, String nombre_Archivo){
        
        File archivo = new File(CourseRoom.Utilerias().Concatenar("/descargas/tareas/", nombre_Archivo));
        
        if(!archivo.exists()){

            SwingUtilities.invokeLater(() -> {

                ArchivoModel archivoModel = CourseRoom.Solicitudes().Obtener_Archivo_Subido_Tarea(id_Archivo_Subido, Tablero_Estudiante_Panel.Id_Usuario());

                if(archivoModel.Archivo().length > 0 && archivoModel.Extension().isBlank()){
                    File directorio = new File("/descargas/tareas/");
                    File crear_Archivo;
                    try {
                        crear_Archivo = File.createTempFile(archivoModel.Nombre_Archivo(),  archivoModel.Extension(),directorio);
                        FileUtils.writeByteArrayToFile(crear_Archivo, archivoModel.Archivo());
                        
                        CourseRoom.Utilerias().Abrir_Archivo(archivo);
                        
                    } catch (IOException ex) {
                        CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", ex.getMessage());
                    }

                }else{
                    CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", "No Se Pudo Descargar El Archivo");
                }

            });
        } else{
            String extension = FilenameUtils.getExtension(nombre_Archivo);
            CourseRoom.Utilerias().Abrir_Archivo(archivo);
        }
        
    }
    
    private void Descargar_Archivo_Chat(int id_Mensaje, String nombre_Archivo){
        
        File archivo = new File(CourseRoom.Utilerias().Concatenar("/descargas/tareas/", nombre_Archivo));
        
        if(!archivo.exists()){

            SwingUtilities.invokeLater(() -> {

                ArchivoModel archivoModel = CourseRoom.Solicitudes().Obtener_Archivo_Mensaje_Chat(id_Mensaje);

                if(archivoModel.Archivo().length > 0 && archivoModel.Extension().isBlank()){
                    File directorio = new File("/descargas/tareas/");
                    File crear_Archivo;
                    try {
                        crear_Archivo = File.createTempFile(archivoModel.Nombre_Archivo(),  archivoModel.Extension(),directorio);
                        FileUtils.writeByteArrayToFile(crear_Archivo, archivoModel.Archivo());
                        
                        CourseRoom.Utilerias().Abrir_Archivo(archivo);
                        
                    } catch (IOException ex) {
                        CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", ex.getMessage());
                    }

                }else{
                    CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", "No Se Pudo Descargar El Archivo");
                }

            });
        } else{
            String extension = FilenameUtils.getExtension(nombre_Archivo);
            CourseRoom.Utilerias().Abrir_Archivo(archivo);
        }
        
    }
    
    private void Descargar_Archivo_Adjunto(int id_Archivo, String nombre_Archivo){
        
        File archivo = new File(CourseRoom.Utilerias().Concatenar("/descargas/tareas/", nombre_Archivo));
        
        if(!archivo.exists()){

            SwingUtilities.invokeLater(() -> {

                ArchivoModel archivoModel = CourseRoom.Solicitudes().Obtener_Archivo_Adjunto_Tarea(id_Archivo);

                if(archivoModel.Archivo().length > 0 && archivoModel.Extension().isBlank()){
                    File directorio = new File("/descargas/tareas/");
                    File crear_Archivo;
                    try {
                        crear_Archivo = File.createTempFile(archivoModel.Nombre_Archivo(),  archivoModel.Extension(),directorio);
                        FileUtils.writeByteArrayToFile(crear_Archivo, archivoModel.Archivo());
                        
                        CourseRoom.Utilerias().Abrir_Archivo(archivo);
                        
                    } catch (IOException ex) {
                        CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", ex.getMessage());
                    }

                }else{
                    CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", "No Se Pudo Descargar El Archivo");
                }

            });
        } else{
            String extension = FilenameUtils.getExtension(nombre_Archivo);
            CourseRoom.Utilerias().Abrir_Archivo(archivo);
        }
        
    }
    
    private void Descargar_Archivo_Retroalimentacion(int id_Retroalimentacion, String nombre_Archivo){
        
        File archivo = new File(CourseRoom.Utilerias().Concatenar("/descargas/tareas/", nombre_Archivo));
        
        if(!archivo.exists()){

            SwingUtilities.invokeLater(() -> {

                ArchivoModel archivoModel = CourseRoom.Solicitudes().Obtener_Archivo_Retroalimentacion_Tarea(id_Retroalimentacion);

                if(archivoModel.Archivo().length > 0 && archivoModel.Extension().isBlank()){
                    File directorio = new File("/descargas/tareas/");
                    File crear_Archivo;
                    try {
                        crear_Archivo = File.createTempFile(archivoModel.Nombre_Archivo(),  archivoModel.Extension(),directorio);
                        FileUtils.writeByteArrayToFile(crear_Archivo, archivoModel.Archivo());
                        
                        CourseRoom.Utilerias().Abrir_Archivo(archivo);
                        
                    } catch (IOException ex) {
                        CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", ex.getMessage());
                    }

                }else{
                    CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", "No Se Pudo Descargar El Archivo");
                }

            });
        } else{
            String extension = FilenameUtils.getExtension(nombre_Archivo);
            CourseRoom.Utilerias().Abrir_Archivo(archivo);
        }
        
    }
    
    private void Obtener_Retroalimentaciones(){
        
        DefaultTableModel modelo = (DefaultTableModel) retroalimentacion_JTable.getModel();
        modelo.setRowCount(0);
        
        SwingUtilities.invokeLater(() -> {
            Lista<RetroalimentacionesTareaModel> response =
                    CourseRoom.Solicitudes().Obtener_Retroalimentaciones_Tarea(Id_Tarea,
                            Tablero_Estudiante_Panel.Id_Usuario());

            if (!response.is_empty()) {
                while (!response.is_empty()) {
                    Agregar_Retroalimentacion(response.delist());
                }
            } else {
                CourseRoom.Utilerias().Mensaje_Alerta("Retroalimentaciones Tarea", "No Se Encontraron Retroalimentaciones");
            }
        });
    }
    
    private void Obtener_Datos_Entrega_Tarea(){
        
        DatosEntregaTareaModel datosEntrega = CourseRoom.Solicitudes().Obtener_Datos_Entrega_Tarea(Id_Tarea, 
                Tablero_Estudiante_Panel.Id_Usuario());
        

        if(datosEntrega.Calificacion() > 0){
            
            String valor_Calificacion = String.valueOf(datosEntrega.Calificacion());
            
            calificacion_JLabel.setText(CourseRoom.Utilerias().Concatenar(valor_Calificacion,
                    ", El ",datosEntrega.Fecha_Calificacion()));
            
            fecha_Actualizacion_JLabel.setText(CourseRoom.Utilerias().Concatenar("Actualizada El: ", 
                    datosEntrega.Fecha_Subida()));
       
        }
        
    }
    
    
    private void Obtener_Archivos_Entregados_Tarea(){
        
        DefaultTableModel modelo = (DefaultTableModel) archivos_Subidos_JTable.getModel();
        modelo.setRowCount(0);
        
        
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizar_JButton;
    private javax.swing.JButton archivos_Adjuntos_JButton;
    private javax.swing.JScrollPane archivos_Adjuntos_JScrollPane;
    private javax.swing.JTable archivos_Adjuntos_JTable;
    private javax.swing.JScrollPane archivos_Subidos_JScrollPane;
    private javax.swing.JTable archivos_Subidos_JTable;
    private javax.swing.JLabel calificacion_JLabel;
    private javax.swing.JButton chat_JButton;
    private javax.swing.JPanel chat_JPanel;
    private javax.swing.JLabel curso_JLabel;
    private javax.swing.JScrollPane descripcion_JScrollPane;
    private javax.swing.JTextPane descripcion_JTextPane;
    private javax.swing.JButton entregar_Tarea_JButton;
    private javax.swing.JPanel entregar_Tarea_JPanel;
    private javax.swing.JButton enviar_Archivo_Chat_JButton;
    private javax.swing.JPanel enviar_Mensaje_Chat_JPanel;
    private javax.swing.JLabel estatus_Tarea_JLabel;
    private javax.swing.JLabel fecha_Actualizacion_JLabel;
    private javax.swing.JLabel fecha_Creacion_JLabel;
    private javax.swing.JLabel fecha_Entrega_JLabel;
    private javax.swing.JButton informacion_JButton;
    private javax.swing.JPanel informacion_Tarea_JPanel;
    private javax.swing.JScrollPane mensajes_Chat_JScrollPane;
    private javax.swing.JTable mensajes_Chat_JTable;
    private javax.swing.JTextField redactar_Mensaje_Chat_JTextField;
    private javax.swing.JButton regresar_JButton;
    private javax.swing.JButton retroalimentacion_JButton;
    private javax.swing.JScrollPane retroalimentacion_JScrollPane;
    private javax.swing.JTable retroalimentacion_JTable;
    private javax.swing.JButton subir_Archivos_JButton;
    private javax.swing.JButton subir_Cambios_JButton;
    private javax.swing.JLayeredPane tarea_JLayeredPane;
    private javax.swing.JLabel titulo_JLabel;
    private javax.swing.JPanel titulo_JPanel;
    // End of variables declaration//GEN-END:variables

    
    @Override
    public void Iniciar_Componentes() {
        
        carta_Visible = 0;
        Font gadugi = new Font("Segoe UI", Font.BOLD, 16);
        
        archivos_Subidos_JScrollPane.getViewport().setOpaque(false);
        archivos_Subidos_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        archivos_Subidos_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);

        archivos_Subidos_JTable.getTableHeader().setFont(gadugi);
        archivos_Subidos_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
        
        archivos_Adjuntos_JScrollPane.getViewport().setOpaque(false);
        archivos_Adjuntos_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        archivos_Adjuntos_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);
        
        archivos_Adjuntos_JTable.getTableHeader().setFont(gadugi);
        archivos_Adjuntos_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
        
        retroalimentacion_JScrollPane.getViewport().setOpaque(false);
        retroalimentacion_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        retroalimentacion_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);

        retroalimentacion_JTable.getTableHeader().setFont(gadugi);
        retroalimentacion_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
        
        descripcion_JScrollPane.getViewport().setOpaque(false);
        descripcion_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        descripcion_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);
        
        mensajes_Chat_JScrollPane.getViewport().setOpaque(false);
        mensajes_Chat_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        mensajes_Chat_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);
        
        mensajes_Chat_JTable.getTableHeader().setFont(gadugi);
        
        mensajes_Chat_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
        
        Colorear_Componentes();
        
        Obtener_Archivos_Entregados_Tarea();
        Obtener_Datos_Entrega_Tarea();
        Obtener_Retroalimentaciones();
        Obtener_Archivos_Adjuntos_Tarea();
        Obtener_Datos_Generales_Tarea();
        Obtener_Mensajes_Tarea();

    }

    @Override
    public void Colorear_Componentes() {
        titulo_JPanel.setBackground(CourseRoom.Utilerias().Segundo_Color());
        
        Carta_Visible();
        
        titulo_JLabel.setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        titulo_JLabel.setBackground(CourseRoom.Utilerias().Tercer_Color());
        
        regresar_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
        
        actualizar_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
        
        subir_Archivos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
        subir_Archivos_JButton.setForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        archivos_Adjuntos_JTable.setBackground(CourseRoom.Utilerias().Primer_Color());
        archivos_Adjuntos_JTable.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        
        archivos_Adjuntos_JTable.getTableHeader().setBackground(CourseRoom.Utilerias().Tercer_Color());
        archivos_Adjuntos_JTable.getTableHeader().setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        archivos_Adjuntos_JTable.setGridColor(CourseRoom.Utilerias().Segundo_Color());
        
        archivos_Adjuntos_JTable.setSelectionBackground(CourseRoom.Utilerias().Segundo_Color());
        archivos_Adjuntos_JTable.setSelectionForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        DefaultTableModel modelo = (DefaultTableModel) archivos_Adjuntos_JTable.getModel();
        Celda_Renderer celda;
        for (int i = 0; i < modelo.getRowCount(); i++) {
            for (int j = 0; j < modelo.getColumnCount(); j++) {
                celda = (Celda_Renderer) modelo.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias().Primer_Color_Fuente());
            }
        }
        
        archivos_Subidos_JTable.setBackground(CourseRoom.Utilerias().Primer_Color());
        archivos_Subidos_JTable.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        
        archivos_Subidos_JTable.getTableHeader().setBackground(CourseRoom.Utilerias().Tercer_Color());
        archivos_Subidos_JTable.getTableHeader().setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        archivos_Subidos_JTable.setGridColor(CourseRoom.Utilerias().Segundo_Color());
        
        archivos_Subidos_JTable.setSelectionBackground(CourseRoom.Utilerias().Segundo_Color());
        archivos_Subidos_JTable.setSelectionForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());

        modelo = (DefaultTableModel) archivos_Subidos_JTable.getModel();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            for (int j = 0; j < modelo.getColumnCount(); j++) {
                celda = (Celda_Renderer) modelo.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias().Primer_Color_Fuente());
            }
        }
        
        retroalimentacion_JTable.setBackground(CourseRoom.Utilerias().Primer_Color());
        retroalimentacion_JTable.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        
        retroalimentacion_JTable.getTableHeader().setBackground(CourseRoom.Utilerias().Tercer_Color());
        retroalimentacion_JTable.getTableHeader().setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        retroalimentacion_JTable.setGridColor(CourseRoom.Utilerias().Segundo_Color());
        
        retroalimentacion_JTable.setSelectionBackground(CourseRoom.Utilerias().Segundo_Color());
        retroalimentacion_JTable.setSelectionForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());

        modelo = (DefaultTableModel) retroalimentacion_JTable.getModel();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            for (int j = 0; j < modelo.getColumnCount(); j++) {
                celda = (Celda_Renderer) modelo.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias().Primer_Color_Fuente());
            }
        }
        
        redactar_Mensaje_Chat_JTextField.setBackground(CourseRoom.Utilerias().Primer_Color());
        redactar_Mensaje_Chat_JTextField.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        enviar_Mensaje_Chat_JPanel.setBackground(CourseRoom.Utilerias().Segundo_Color());

        curso_JLabel.setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        curso_JLabel.setBackground(CourseRoom.Utilerias().Tercer_Color());
        
        estatus_Tarea_JLabel.setForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        estatus_Tarea_JLabel.setBackground(CourseRoom.Utilerias().Segundo_Color());
        
        fecha_Creacion_JLabel.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        
        fecha_Entrega_JLabel.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());        
        
        fecha_Actualizacion_JLabel.setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        
        enviar_Archivo_Chat_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
        subir_Cambios_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
        subir_Cambios_JButton.setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        
        actualizar_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());

        mensajes_Chat_JTable.setBackground(CourseRoom.Utilerias().Primer_Color());
        mensajes_Chat_JTable.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        
        mensajes_Chat_JTable.getTableHeader().setBackground(CourseRoom.Utilerias().Tercer_Color());
        mensajes_Chat_JTable.getTableHeader().setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        mensajes_Chat_JTable.setGridColor(CourseRoom.Utilerias().Segundo_Color());
        
        mensajes_Chat_JTable.setSelectionBackground(CourseRoom.Utilerias().Segundo_Color());
        mensajes_Chat_JTable.setSelectionForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        modelo = (DefaultTableModel) mensajes_Chat_JTable.getModel();
        for(int i = 0; i < modelo.getRowCount();i++){
            for(int j = 0; j < modelo.getColumnCount(); j++){
                celda = (Celda_Renderer)modelo.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias().Primer_Color_Fuente());
            }
        }
        
        calificacion_JLabel.setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        calificacion_JLabel.setBackground(CourseRoom.Utilerias().Tercer_Color());
        
        Font fuente = new Font("Segoe UI", 1, 18);
        
        BevelBorder borde_Linea = new BevelBorder(BevelBorder.LOWERED);
        TitledBorder borde_Titulo = new TitledBorder(borde_Linea, "Descripción De La Tarea", TitledBorder.CENTER,
                TitledBorder.TOP,  fuente, CourseRoom.Utilerias().Primer_Color_Fuente());
        
        descripcion_JScrollPane.setBorder(borde_Titulo);
        descripcion_JTextPane.setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());

    }
   
    public void Subir_Archivos() {
        Escogedor_Archivos escogedor_Archivos = new Escogedor_Archivos();
        int resultado = escogedor_Archivos.showOpenDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivo_Abierto = escogedor_Archivos.getSelectedFile();
            
            if(archivo_Abierto != null){
                
                long tamanio = FileUtils.sizeOf(archivo_Abierto);
                tamanio = (0 != tamanio) ? tamanio / 1000 / 1000 : 0;
                if(tamanio < 35){
                    
                    SwingUtilities.invokeLater(() -> {
                        try {
                            
                            Celda_Renderer[] celdas = new Celda_Renderer[4];
                            DefaultTableModel modelo = (DefaultTableModel) archivos_Subidos_JTable.getModel();
                            Celda_Renderer celda;
                            
                            ResponseModel response = CourseRoom.Solicitudes().Enviar_Archivo_Subido_Tarea(Id_Tarea,
                                    Tablero_Estudiante_Panel.Id_Usuario(), archivo_Abierto.getName(),
                                    FileUtils.readFileToByteArray(archivo_Abierto),
                                    FilenameUtils.getExtension(archivo_Abierto.getName()));

                            if(response.Is_Success()){
                                String id_Archivo = String.valueOf(response.Codigo());
                                
                                Image imagen = ImageIO.read(getClass().getResource("/recursos/iconos/box.png"));
                                ImageIcon icono = new ImageIcon(imagen);
                                celda = new Celda_Renderer(icono, archivo_Abierto.getName(), id_Archivo);
                                celdas[0] = celda;
                                celda = new Celda_Renderer(Perfil_Estudiante_Panel.Nombre_Completo(), id_Archivo);
                                celdas[1] = celda;
                                celda = new Celda_Renderer(CourseRoom.Utilerias().Fecha_Hora_Local(), id_Archivo);
                                celdas[2] = celda;
                                imagen = ImageIO.read(getClass().getResource("/recursos/iconos/close.png"));
                                icono = new ImageIcon(imagen);
                                celda = new Celda_Renderer(icono, id_Archivo);
                                celdas[3] = celda;
                                modelo.insertRow(0,celdas);
                                CourseRoom.Utilerias().Mensaje_Informativo("Tarea",response.Mensaje());
                                imagen.flush();
                                
                            } else{
                                CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!",response.Mensaje());
                            }

                        } catch (IOException ex) {
                            CourseRoom.Utilerias().Mensaje_Error("Error!!!","Se Encontro Un Error Al Subir El Archivo");
                        }
                    
                    });
                    
                } else {
                    CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!","Hay Archivo(s) Que Superan El Tamaño Aceptado De Subida");
                }                 
                    
            }
        }
    }
    
    @Override
    public void Enviar_Mensaje() {
        
        String mensaje = redactar_Mensaje_Chat_JTextField.getText();
        if (!mensaje.isEmpty() && !mensaje.isBlank()) {
            
            SwingUtilities.invokeLater(() -> {
                ResponseModel response = CourseRoom.Solicitudes().Enviar_Mensaje_Tarea(mensaje, new byte[]{}, "",
                        Tablero_Estudiante_Panel.Id_Usuario(), Id_Tarea);
                if (!response.Is_Success()) {
                    CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!", response.Mensaje());
                }else{
                    String id = String.valueOf(response.Codigo());
                    String emisor = Perfil_Estudiante_Panel.Nombre_Completo();
                    String fecha = CourseRoom.Utilerias().Fecha_Hora_Local();
                    Celda_Renderer[] celdas = new Celda_Renderer[3];
                    Celda_Renderer celda;
                    celda = new Celda_Renderer(emisor,id);
                    celdas[0] = celda;
                    celda = new Celda_Renderer(mensaje,id);
                    celdas[1] = celda;
                    celda = new Celda_Renderer(fecha,id);
                    celdas[2] = celda;

                    DefaultTableModel modelo = (DefaultTableModel) mensajes_Chat_JTable.getModel();
                    modelo.insertRow(0, celdas);
                    mensajes_Chat_JTable.setRowHeight(0,
                            CourseRoom.Utilerias().Altura_Fila_Tabla(mensaje.length()));

                    redactar_Mensaje_Chat_JTextField.setText("");
                    redactar_Mensaje_Chat_JTextField.setCaretPosition(0);
                }
            }); 
        }
    }

    @Override
    public void Enviar_Archivo() {
        
        Escogedor_Archivos escogedor_Archivos = new Escogedor_Archivos();
        int resultado = escogedor_Archivos.showOpenDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivo_Abierto = escogedor_Archivos.getSelectedFile();

            if (archivo_Abierto != null) {
                
                long tamanio = FileUtils.sizeOf(archivo_Abierto);
                tamanio = (0 != tamanio) ? tamanio / 1000 / 1000 : 0;
                if(tamanio < 35){

                    String nombre_Archivo = archivo_Abierto.getName();
                    String emisor = Perfil_Estudiante_Panel.Nombre_Completo();
                    
                    SwingUtilities.invokeLater(() -> {
                        try {

                            ResponseModel response = CourseRoom.Solicitudes().Enviar_Mensaje_Tarea(nombre_Archivo, 
                                    FileUtils.readFileToByteArray(archivo_Abierto), 
                                    FilenameUtils.getExtension(nombre_Archivo), 
                                    Tablero_Estudiante_Panel.Id_Usuario(), Id_Tarea);

                            String fecha = CourseRoom.Utilerias().Fecha_Hora_Local();
                            if(response.Is_Success()){
                                String id = String.valueOf(response.Codigo());
                                Celda_Renderer[] celdas = new Celda_Renderer[3];
                                DefaultTableModel modelo = (DefaultTableModel) mensajes_Chat_JTable.getModel();
                                Celda_Renderer celda;
                                Image icono = ImageIO.read(getClass().getResource("/recursos/iconos/box.png"));
                                ImageIcon icono_Abrir = new ImageIcon(icono);
                                celda = new Celda_Renderer(emisor,id);
                                celdas[0] = celda;
                                celda = new Celda_Renderer(icono_Abrir,nombre_Archivo,id);
                                celdas[1] = celda;
                                celda = new Celda_Renderer(fecha,id);
                                celdas[2] = celda;
                                modelo.insertRow(0,celdas);
                                mensajes_Chat_JTable.setRowHeight(0, CourseRoom.Utilerias().Altura_Fila_Tabla(nombre_Archivo.length()));
                                icono.flush();
                                CourseRoom.Utilerias().Mensaje_Informativo("Tarea",response.Mensaje());
                            }else{
                                CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!",response.Mensaje());
                            }
                        } catch (IOException ex) {
                            CourseRoom.Utilerias().Mensaje_Error("Error!!!","Se Encontro Un Error Al Enviar El Mensaje");
                        }
                    });
                }
                else{
                    CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!","El Archivo Supera El Tamaño Aceptado De Subida");
                }
            }
        } else{
            CourseRoom.Utilerias().Mensaje_Alerta("Alerta!!!","El Archivo No Tiene Un Formato Adecuado");
        }
    }
   
    @Override
    public void Limpiar() {
        DefaultTableModel modelo = (DefaultTableModel) archivos_Adjuntos_JTable.getModel();
        modelo.setRowCount(0);
        modelo = (DefaultTableModel) archivos_Subidos_JTable.getModel();
        modelo.setRowCount(0);
        modelo = (DefaultTableModel) retroalimentacion_JTable.getModel();
        modelo.setRowCount(0);
        modelo = (DefaultTableModel) mensajes_Chat_JTable.getModel();
        modelo.setRowCount(0);
        
    }

    @Override
    public void Carta_Visible() {
        switch (carta_Visible) {
            case 0:
                informacion_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
                archivos_Adjuntos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                chat_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                entregar_Tarea_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                retroalimentacion_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                break;
            case 1:
                informacion_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                archivos_Adjuntos_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
                chat_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                entregar_Tarea_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                retroalimentacion_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                break;
            case 2:
                informacion_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                archivos_Adjuntos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                chat_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
                entregar_Tarea_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                retroalimentacion_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                break;
            case 3:
                informacion_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                archivos_Adjuntos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                chat_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                entregar_Tarea_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
                retroalimentacion_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                break;
            case 4:
                informacion_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                archivos_Adjuntos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                chat_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                entregar_Tarea_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                retroalimentacion_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
                break;
            
        }
    }
}
