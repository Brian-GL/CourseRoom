/*
 * Copyright (C) 2022 LENOVO
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package paneles.estudiantes.cursos;

import javax.swing.JLayeredPane;
import clases.Celda_Renderer;
import datos.colecciones.Lista;
import datos.estructuras.Nodo;
import datos.interfaces.Componentes_Interface;
import datos.interfaces.Limpieza_Interface;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import courseroom.CourseRoom;
import datos.interfaces.Carta_Visibilidad_Interface;
import java.awt.CardLayout;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.border.BevelBorder;
import javax.swing.border.TitledBorder;
import paneles.estudiantes.Tablero_Estudiante_Panel;

/**
 *
 * @author LENOVO
 */
public class Cursos_Estudiante_Panel extends JLayeredPane implements Limpieza_Interface, Componentes_Interface, Carta_Visibilidad_Interface{

    private Lista<Curso_Estudiante_Panel> buscar_Cursos_Lista;
    private Lista<Curso_Estudiante_Panel> mostrar_Cursos_Actuales_Lista;
    private Lista<Curso_Estudiante_Panel> mostrar_Cursos_Finalizados_Lista;
    private static Lista<Vista_Previa_Curso_Estudiante_Panel> mostrar_Cursos_Recomendados_Lista;
    private static Lista<Vista_Previa_Curso_Estudiante_Panel> mostrar_Cursos_Nuevos_Lista;
    
    private static DefaultTableModel modelo_Cursos_Actuales;
    private static DefaultTableModel modelo_Cursos_Recomendados;
    private static DefaultTableModel modelo_Cursos_Nuevos;
    
    private byte carta_Visible;
    private static int id_Curso_Actual;
    
    /**
     * Creates new form Cursos_Estudiante_Panel
     */
    public Cursos_Estudiante_Panel() {
        initComponents();
        
        Iniciar_Componentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mostrar_Cursos_JPanel = new javax.swing.JPanel();
        contenido_Titulo_JPanel = new javax.swing.JPanel();
        titulo_JLabel = new javax.swing.JLabel();
        acciones_JPanel = new javax.swing.JPanel();
        buscar_Cursos_JButton = new javax.swing.JButton();
        cursos_Actuales_JButton = new javax.swing.JButton();
        cursos_Nuevos_JButton = new javax.swing.JButton();
        actualizar_JButton = new javax.swing.JButton();
        cursos_Recomendados_JButton = new javax.swing.JButton();
        cursos_Finalizados_JButton = new javax.swing.JButton();
        mostrar_Cursos_JLayeredPane = new javax.swing.JLayeredPane();
        mostrar_Cursos_Actuales_JScrollPane = new javax.swing.JScrollPane();
        mostrar_Cursos_Actuales_JTable = new javax.swing.JTable();
        mostrar_Cursos_Finalizados_JScrollPane = new javax.swing.JScrollPane();
        mostrar_Cursos_Finalizados_JTable = new javax.swing.JTable();
        mostrar_Cursos_Recomendados_JScrollPane = new javax.swing.JScrollPane();
        mostrar_Cursos_Recomendados_JTable = new javax.swing.JTable();
        mostrar_Cursos_Nuevos_JScrollPane = new javax.swing.JScrollPane();
        mostrar_Cursos_Nuevos_JTable = new javax.swing.JTable();
        buscar_Cursos_JPanel = new javax.swing.JPanel();
        buscar_JTextField = new javax.swing.JTextField();
        mostrar_Cursos_JButton = new javax.swing.JButton();
        buscar_Cursos_JScrollPane = new javax.swing.JScrollPane();
        buscar_Cursos_JTable = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1110, 630));
        setLayout(new java.awt.CardLayout());

        mostrar_Cursos_JPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        mostrar_Cursos_JPanel.setOpaque(false);
        mostrar_Cursos_JPanel.setPreferredSize(new java.awt.Dimension(1110, 630));

        contenido_Titulo_JPanel.setMaximumSize(new java.awt.Dimension(32767, 68));
        contenido_Titulo_JPanel.setOpaque(false);
        contenido_Titulo_JPanel.setPreferredSize(new java.awt.Dimension(822, 68));
        contenido_Titulo_JPanel.setLayout(new java.awt.BorderLayout());

        titulo_JLabel.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        titulo_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo_JLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        titulo_JLabel.setMaximumSize(new java.awt.Dimension(550, 84));
        titulo_JLabel.setMinimumSize(new java.awt.Dimension(550, 84));
        titulo_JLabel.setOpaque(true);
        titulo_JLabel.setPreferredSize(new java.awt.Dimension(550, 84));
        contenido_Titulo_JPanel.add(titulo_JLabel, java.awt.BorderLayout.WEST);

        acciones_JPanel.setOpaque(false);

        buscar_Cursos_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/search.png"))); // NOI18N
        buscar_Cursos_JButton.setToolTipText("<html>\n<h3>\nBuscar<br>Cursos\n</h3>\n</html>");
        buscar_Cursos_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)buscar_Cursos_JButton.getIcon()).getImage().flush();
        buscar_Cursos_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buscar_Cursos_JButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buscar_Cursos_JButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buscar_Cursos_JButtonMouseExited(evt);
            }
        });

        cursos_Actuales_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/training.png"))); // NOI18N
        cursos_Actuales_JButton.setToolTipText("<html> <h3>Cursos Actuales</h3></html>");
        cursos_Actuales_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)cursos_Actuales_JButton.getIcon()).getImage().flush();
        cursos_Actuales_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cursos_Actuales_JButtonMouseClicked(evt);
            }
        });

        cursos_Nuevos_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/new.png"))); // NOI18N
        cursos_Nuevos_JButton.setToolTipText("<html>\n<h3>Cursos Nuevos</h3></html>");
        cursos_Nuevos_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)cursos_Nuevos_JButton.getIcon()).getImage().flush();
        cursos_Nuevos_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cursos_Nuevos_JButtonMouseClicked(evt);
            }
        });

        actualizar_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/updated.png"))); // NOI18N
        actualizar_JButton.setToolTipText("<html>\n<h4>\nActualizar<br>PÃ¡gina\n</h4>\n</html>\n\n");
        actualizar_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)actualizar_JButton.getIcon()).getImage().flush();
        actualizar_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actualizar_JButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                actualizar_JButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                actualizar_JButtonMouseExited(evt);
            }
        });

        cursos_Recomendados_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/quality.png"))); // NOI18N
        cursos_Recomendados_JButton.setToolTipText("<html>\n<h3>Cursos Recomendados</h3></html>");
        cursos_Recomendados_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)cursos_Recomendados_JButton.getIcon()).getImage().flush();
        cursos_Recomendados_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cursos_Recomendados_JButtonMouseClicked(evt);
            }
        });

        cursos_Finalizados_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/qualification_1.png"))); // NOI18N
        cursos_Finalizados_JButton.setToolTipText("<html>\n<h3>Cursos Finallizados</h3></html>");
        cursos_Finalizados_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ((ImageIcon)cursos_Finalizados_JButton.getIcon()).getImage().flush();
        cursos_Finalizados_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cursos_Finalizados_JButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout acciones_JPanelLayout = new javax.swing.GroupLayout(acciones_JPanel);
        acciones_JPanel.setLayout(acciones_JPanelLayout);
        acciones_JPanelLayout.setHorizontalGroup(
            acciones_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(acciones_JPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(cursos_Actuales_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cursos_Finalizados_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cursos_Recomendados_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cursos_Nuevos_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buscar_Cursos_JButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actualizar_JButton)
                .addGap(0, 0, 0))
        );
        acciones_JPanelLayout.setVerticalGroup(
            acciones_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(acciones_JPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(acciones_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buscar_Cursos_JButton)
                    .addComponent(cursos_Nuevos_JButton)
                    .addComponent(cursos_Recomendados_JButton)
                    .addComponent(cursos_Finalizados_JButton)
                    .addComponent(cursos_Actuales_JButton)
                    .addComponent(actualizar_JButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        contenido_Titulo_JPanel.add(acciones_JPanel, java.awt.BorderLayout.EAST);

        mostrar_Cursos_JLayeredPane.setLayout(new java.awt.CardLayout());

        mostrar_Cursos_Actuales_JScrollPane.setBorder(null);
        mostrar_Cursos_Actuales_JScrollPane.setOpaque(false);

        mostrar_Cursos_Actuales_JTable.setAutoCreateRowSorter(true);
        mostrar_Cursos_Actuales_JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mostrar_Cursos_Actuales_JTable.setModel(

            new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "Curso", "Profesor", "TemÃ¡ticas", "Creado" ,"PuntuaciÃ³n"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }

                @Override
                public Class getColumnClass(int column)
                {
                    for(int i = 0; i < mostrar_Cursos_Actuales_JTable.getRowCount(); i++)
                    {
                        //The first valid value of a cell of given column is retrieved.
                        if(getValueAt(i,column) != null)
                        {
                            return getValueAt(i, column).getClass();
                        }
                    }
                    //if no valid value is found, default renderer is returned.
                    return super.getColumnClass(column);
                }
            });
            mostrar_Cursos_Actuales_JTable.setRowHeight(96);
            mostrar_Cursos_Actuales_JTable.setShowGrid(true);
            mostrar_Cursos_Actuales_JTable.setSurrendersFocusOnKeystroke(true);
            mostrar_Cursos_Actuales_JTable.setRowSorter(new TableRowSorter(mostrar_Cursos_Actuales_JTable.getModel()));
            mostrar_Cursos_Actuales_JTable.addMouseListener(new MouseAdapter() {

                @Override
                public void mousePressed(MouseEvent e) {
                    if (e.getClickCount() == 2) {

                        JTable tabla = (JTable) e.getComponent();
                        int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                        int columna = tabla.getSelectedColumn();

                        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

                        Celda_Renderer celda = (Celda_Renderer) modelo.getValueAt(fila, columna);

                        Tablero_Estudiante_Panel.Mostrar_Vista(celda.ID());

                    }
                }
            });
            mostrar_Cursos_Actuales_JScrollPane.setViewportView(mostrar_Cursos_Actuales_JTable);

            mostrar_Cursos_JLayeredPane.add(mostrar_Cursos_Actuales_JScrollPane, "Actuales");

            mostrar_Cursos_Finalizados_JScrollPane.setBorder(null);
            mostrar_Cursos_Finalizados_JScrollPane.setOpaque(false);

            mostrar_Cursos_Finalizados_JTable.setAutoCreateRowSorter(true);
            mostrar_Cursos_Finalizados_JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
            mostrar_Cursos_Finalizados_JTable.setModel(

                new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {
                        "Curso", "Profesor", "TemÃ¡ticas", "Creado" ,"PuntuaciÃ³n"
                    }
                ) {
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }

                    @Override
                    public Class getColumnClass(int column)
                    {
                        for(int i = 0; i < mostrar_Cursos_Finalizados_JTable.getRowCount(); i++)
                        {
                            //The first valid value of a cell of given column is retrieved.
                            if(getValueAt(i,column) != null)
                            {
                                return getValueAt(i, column).getClass();
                            }
                        }
                        //if no valid value is found, default renderer is returned.
                        return super.getColumnClass(column);
                    }
                });
                mostrar_Cursos_Finalizados_JTable.setRowHeight(96);
                mostrar_Cursos_Finalizados_JTable.setShowGrid(true);
                mostrar_Cursos_Finalizados_JTable.setRowSorter(new TableRowSorter(mostrar_Cursos_Finalizados_JTable.getModel()));
                mostrar_Cursos_Finalizados_JTable.addMouseListener(new MouseAdapter() {

                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (e.getClickCount() == 2) {

                            JTable tabla = (JTable) e.getComponent();
                            int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                            int columna = tabla.getSelectedColumn();

                            DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

                            Celda_Renderer celda = (Celda_Renderer) modelo.getValueAt(fila, columna);

                            Tablero_Estudiante_Panel.Mostrar_Vista(celda.ID());

                        }
                    }
                });
                mostrar_Cursos_Finalizados_JScrollPane.setViewportView(mostrar_Cursos_Finalizados_JTable);

                mostrar_Cursos_JLayeredPane.add(mostrar_Cursos_Finalizados_JScrollPane, "Finalizados");

                mostrar_Cursos_Recomendados_JScrollPane.setBorder(null);
                mostrar_Cursos_Recomendados_JScrollPane.setOpaque(false);

                mostrar_Cursos_Recomendados_JTable.setAutoCreateRowSorter(true);
                mostrar_Cursos_Recomendados_JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
                mostrar_Cursos_Recomendados_JTable.setModel(

                    new javax.swing.table.DefaultTableModel(
                        new Object [][] {

                        },
                        new String [] {
                            "Curso", "Profesor", "TemÃ¡ticas", "Creado" ,"PuntuaciÃ³n"
                        }
                    ) {
                        boolean[] canEdit = new boolean [] {
                            false, false,false, false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }

                        @Override
                        public Class getColumnClass(int column)
                        {
                            for(int i = 0; i < mostrar_Cursos_Recomendados_JTable.getRowCount(); i++)
                            {
                                //The first valid value of a cell of given column is retrieved.
                                if(getValueAt(i,column) != null)
                                {
                                    return getValueAt(i, column).getClass();
                                }
                            }
                            //if no valid value is found, default renderer is returned.
                            return super.getColumnClass(column);
                        }
                    });
                    mostrar_Cursos_Recomendados_JTable.setRowHeight(96);
                    mostrar_Cursos_Recomendados_JTable.setShowGrid(true);
                    mostrar_Cursos_Recomendados_JTable.setRowSorter(new TableRowSorter(mostrar_Cursos_Recomendados_JTable.getModel()));
                    mostrar_Cursos_Recomendados_JTable.addMouseListener(new MouseAdapter() {

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.getClickCount() == 2) {

                                JTable tabla = (JTable) e.getComponent();
                                int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                                int columna = tabla.getSelectedColumn();

                                DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

                                Celda_Renderer celda = (Celda_Renderer) modelo.getValueAt(fila, columna);

                                Tablero_Estudiante_Panel.Mostrar_Vista(celda.ID());

                            }
                        }
                    });
                    mostrar_Cursos_Recomendados_JScrollPane.setViewportView(mostrar_Cursos_Recomendados_JTable);

                    mostrar_Cursos_JLayeredPane.add(mostrar_Cursos_Recomendados_JScrollPane, "Recomendados");

                    mostrar_Cursos_Nuevos_JScrollPane.setBorder(null);
                    mostrar_Cursos_Nuevos_JScrollPane.setOpaque(false);

                    mostrar_Cursos_Nuevos_JTable.setAutoCreateRowSorter(true);
                    mostrar_Cursos_Nuevos_JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
                    mostrar_Cursos_Nuevos_JTable.setModel(

                        new javax.swing.table.DefaultTableModel(
                            new Object [][] {

                            },
                            new String [] {
                                "Curso", "Profesor", "TemÃ¡ticas", "Creado" ,"PuntuaciÃ³n"
                            }
                        ) {
                            boolean[] canEdit = new boolean [] {
                                false, false, false, false, false
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                            }

                            @Override
                            public Class getColumnClass(int column)
                            {
                                for(int i = 0; i < mostrar_Cursos_Nuevos_JTable.getRowCount(); i++)
                                {
                                    //The first valid value of a cell of given column is retrieved.
                                    if(getValueAt(i,column) != null)
                                    {
                                        return getValueAt(i, column).getClass();
                                    }
                                }
                                //if no valid value is found, default renderer is returned.
                                return super.getColumnClass(column);
                            }
                        });
                        mostrar_Cursos_Nuevos_JTable.setRowHeight(96);
                        mostrar_Cursos_Nuevos_JTable.setShowGrid(true);
                        mostrar_Cursos_Nuevos_JTable.setRowSorter(new TableRowSorter(mostrar_Cursos_Nuevos_JTable.getModel()));
                        mostrar_Cursos_Nuevos_JTable.addMouseListener(new MouseAdapter() {

                            @Override
                            public void mousePressed(MouseEvent e) {
                                if (e.getClickCount() == 2) {

                                    JTable tabla = (JTable) e.getComponent();
                                    int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                                    int columna = tabla.getSelectedColumn();

                                    DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

                                    Celda_Renderer celda = (Celda_Renderer) modelo.getValueAt(fila, columna);

                                    Tablero_Estudiante_Panel.Mostrar_Vista(celda.ID());

                                }
                            }
                        });
                        mostrar_Cursos_Nuevos_JScrollPane.setViewportView(mostrar_Cursos_Nuevos_JTable);

                        mostrar_Cursos_JLayeredPane.add(mostrar_Cursos_Nuevos_JScrollPane, "Nuevos");

                        javax.swing.GroupLayout mostrar_Cursos_JPanelLayout = new javax.swing.GroupLayout(mostrar_Cursos_JPanel);
                        mostrar_Cursos_JPanel.setLayout(mostrar_Cursos_JPanelLayout);
                        mostrar_Cursos_JPanelLayout.setHorizontalGroup(
                            mostrar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mostrar_Cursos_JPanelLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(mostrar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(mostrar_Cursos_JLayeredPane)
                                    .addComponent(contenido_Titulo_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1046, Short.MAX_VALUE))
                                .addGap(32, 32, 32))
                        );
                        mostrar_Cursos_JPanelLayout.setVerticalGroup(
                            mostrar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mostrar_Cursos_JPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(contenido_Titulo_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mostrar_Cursos_JLayeredPane)
                                .addContainerGap())
                        );

                        add(mostrar_Cursos_JPanel, "Mostrar");

                        buscar_Cursos_JPanel.setOpaque(false);
                        buscar_Cursos_JPanel.setPreferredSize(new java.awt.Dimension(1110, 630));

                        buscar_JTextField.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
                        buscar_JTextField.setToolTipText("<html> <h3>Buscar curso(s). Presiona ENTER para realizar la bÃºsqueda</h3> </html>");
                        buscar_JTextField.setBorder(null);
                        buscar_JTextField.addKeyListener(new java.awt.event.KeyAdapter() {
                            public void keyPressed(java.awt.event.KeyEvent evt) {
                                buscar_JTextFieldKeyPressed(evt);
                            }
                        });

                        mostrar_Cursos_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/webinar.png"))); // NOI18N
                        mostrar_Cursos_JButton.setToolTipText("<html> <h3>Regresar a la pÃ¡gina de cursos</h3> </html>");
                        mostrar_Cursos_JButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                        mostrar_Cursos_JButton.setMaximumSize(new java.awt.Dimension(64, 64));
                        mostrar_Cursos_JButton.setMinimumSize(new java.awt.Dimension(64, 64));
                        mostrar_Cursos_JButton.setPreferredSize(new java.awt.Dimension(64, 64));
                        ((ImageIcon)mostrar_Cursos_JButton.getIcon()).getImage().flush();
                        mostrar_Cursos_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
                            public void mouseClicked(java.awt.event.MouseEvent evt) {
                                mostrar_Cursos_JButtonMouseClicked(evt);
                            }
                            public void mouseEntered(java.awt.event.MouseEvent evt) {
                                mostrar_Cursos_JButtonMouseEntered(evt);
                            }
                            public void mouseExited(java.awt.event.MouseEvent evt) {
                                mostrar_Cursos_JButtonMouseExited(evt);
                            }
                        });

                        buscar_Cursos_JScrollPane.setBorder(null);
                        buscar_Cursos_JScrollPane.setOpaque(false);

                        buscar_Cursos_JTable.setAutoCreateRowSorter(true);
                        buscar_Cursos_JTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
                        buscar_Cursos_JTable.setModel(

                            new javax.swing.table.DefaultTableModel(
                                new Object [][] {

                                },
                                new String [] {
                                    "Curso", "Profesor", "TemÃ¡ticas", "Creado" ,"PuntuaciÃ³n"
                                }
                            ) {
                                boolean[] canEdit = new boolean [] {
                                    false, false, false, false, false
                                };

                                public boolean isCellEditable(int rowIndex, int columnIndex) {
                                    return canEdit [columnIndex];
                                }

                                @Override
                                public Class getColumnClass(int column)
                                {
                                    for(int i = 0; i < buscar_Cursos_JTable.getRowCount(); i++)
                                    {
                                        //The first valid value of a cell of given column is retrieved.
                                        if(getValueAt(i,column) != null)
                                        {
                                            return getValueAt(i, column).getClass();
                                        }
                                    }
                                    //if no valid value is found, default renderer is returned.
                                    return super.getColumnClass(column);
                                }
                            });
                            buscar_Cursos_JTable.setRowHeight(96);
                            buscar_Cursos_JTable.setShowGrid(true);
                            buscar_Cursos_JTable.setSurrendersFocusOnKeystroke(true);
                            buscar_Cursos_JTable.setRowSorter(new TableRowSorter(buscar_Cursos_JTable.getModel()));
                            buscar_Cursos_JTable.addMouseListener(new MouseAdapter() {

                                @Override
                                public void mousePressed(MouseEvent e) {
                                    if (e.getClickCount() == 2) {

                                        JTable tabla = (JTable) e.getComponent();
                                        int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                                        int columna = tabla.getSelectedColumn();

                                        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();

                                        Celda_Renderer celda = (Celda_Renderer) modelo.getValueAt(fila, columna);

                                        Tablero_Estudiante_Panel.Mostrar_Vista(celda.ID());

                                    }
                                }
                            });
                            buscar_Cursos_JScrollPane.setViewportView(buscar_Cursos_JTable);

                            javax.swing.GroupLayout buscar_Cursos_JPanelLayout = new javax.swing.GroupLayout(buscar_Cursos_JPanel);
                            buscar_Cursos_JPanel.setLayout(buscar_Cursos_JPanelLayout);
                            buscar_Cursos_JPanelLayout.setHorizontalGroup(
                                buscar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(buscar_Cursos_JPanelLayout.createSequentialGroup()
                                    .addGap(32, 32, 32)
                                    .addGroup(buscar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(buscar_Cursos_JPanelLayout.createSequentialGroup()
                                            .addComponent(mostrar_Cursos_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(buscar_JTextField))
                                        .addComponent(buscar_Cursos_JScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1046, Short.MAX_VALUE))
                                    .addGap(32, 32, 32))
                            );
                            buscar_Cursos_JPanelLayout.setVerticalGroup(
                                buscar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buscar_Cursos_JPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(buscar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(buscar_JTextField)
                                        .addComponent(mostrar_Cursos_JButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(buscar_Cursos_JScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                                    .addContainerGap())
                            );

                            add(buscar_Cursos_JPanel, "Buscar");
                        }// </editor-fold>//GEN-END:initComponents

    private void buscar_JTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscar_JTextFieldKeyPressed
        int longitud = buscar_JTextField.getText().length();
        if(KeyEvent.VK_ENTER == evt.getKeyCode()){
            if (longitud > 99) {
            buscar_JTextField.setText(buscar_JTextField.getText().substring(0, longitud - 1));
            CourseRoom.Utilerias().Mensaje_Alerta("Warning!!!","La Busqueda De Cursos<br>Rebasa Los 500 Caracteres");
          }
        }
    }//GEN-LAST:event_buscar_JTextFieldKeyPressed

    private void mostrar_Cursos_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mostrar_Cursos_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout)this.getLayout()).show(this, "Mostrar");
        }
    }//GEN-LAST:event_mostrar_Cursos_JButtonMouseClicked

    private void mostrar_Cursos_JButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mostrar_Cursos_JButtonMouseEntered
        // TODO add your handling code here:
        mostrar_Cursos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
    }//GEN-LAST:event_mostrar_Cursos_JButtonMouseEntered

    private void mostrar_Cursos_JButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mostrar_Cursos_JButtonMouseExited
        // TODO add your handling code here:
        mostrar_Cursos_JButton.setBackground(CourseRoom.Utilerias().Primer_Color());
    }//GEN-LAST:event_mostrar_Cursos_JButtonMouseExited

    private void buscar_Cursos_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscar_Cursos_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout)this.getLayout()).show(this, "Buscar");
        }
    }//GEN-LAST:event_buscar_Cursos_JButtonMouseClicked

    private void buscar_Cursos_JButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscar_Cursos_JButtonMouseEntered
        // TODO add your handling code here:
        buscar_Cursos_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
    }//GEN-LAST:event_buscar_Cursos_JButtonMouseEntered

    private void buscar_Cursos_JButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscar_Cursos_JButtonMouseExited
        // TODO add your handling code here:
        buscar_Cursos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
    }//GEN-LAST:event_buscar_Cursos_JButtonMouseExited

    private void cursos_Nuevos_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cursos_Nuevos_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout)mostrar_Cursos_JLayeredPane.getLayout()).show(mostrar_Cursos_JLayeredPane, "Nuevos");
            carta_Visible = 3;
            titulo_JLabel.setText("Cursos Nuevos");
            Carta_Visible();
        }
    }//GEN-LAST:event_cursos_Nuevos_JButtonMouseClicked

    private void cursos_Recomendados_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cursos_Recomendados_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout)mostrar_Cursos_JLayeredPane.getLayout()).show(mostrar_Cursos_JLayeredPane, "Recomendados");
            carta_Visible = 2;
            titulo_JLabel.setText("Cursos Recomendados");
            Carta_Visible();
        }
    }//GEN-LAST:event_cursos_Recomendados_JButtonMouseClicked

    private void cursos_Finalizados_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cursos_Finalizados_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout)mostrar_Cursos_JLayeredPane.getLayout()).show(mostrar_Cursos_JLayeredPane, "Finalizados");
            carta_Visible = 1;
            titulo_JLabel.setText("Cursos Finalizados");
            Carta_Visible();
        }
    }//GEN-LAST:event_cursos_Finalizados_JButtonMouseClicked

    private void cursos_Actuales_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cursos_Actuales_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout)mostrar_Cursos_JLayeredPane.getLayout()).show(mostrar_Cursos_JLayeredPane, "Actuales");
            carta_Visible = 0;
            titulo_JLabel.setText("Cursos Actuales");
            Carta_Visible();
        }
    }//GEN-LAST:event_cursos_Actuales_JButtonMouseClicked

    private void actualizar_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizar_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){

        }
    }//GEN-LAST:event_actualizar_JButtonMouseClicked

    private void actualizar_JButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizar_JButtonMouseEntered
        // TODO add your handling code here:
        actualizar_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
    }//GEN-LAST:event_actualizar_JButtonMouseEntered

    private void actualizar_JButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizar_JButtonMouseExited
        // TODO add your handling code here:
        actualizar_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
    }//GEN-LAST:event_actualizar_JButtonMouseExited

    public static void Remover_Curso_Recomendado(String ID){
        
        int fila;
        Celda_Renderer[] celdas = new Celda_Renderer[5];
        Celda_Renderer celda;
        for (fila = 0; fila < mostrar_Cursos_Recomendados_JTable.getRowCount(); fila++) {
            
            celda = (Celda_Renderer) modelo_Cursos_Recomendados.getValueAt(fila, 0);
            if (celda.ID().equals(ID)){
                celdas[0] = celda;
                celdas[1] = (Celda_Renderer) modelo_Cursos_Recomendados.getValueAt(fila, 1);
                celdas[2] = (Celda_Renderer) modelo_Cursos_Recomendados.getValueAt(fila, 2);
                celdas[3] = (Celda_Renderer) modelo_Cursos_Recomendados.getValueAt(fila, 3);
                celdas[4] = (Celda_Renderer) modelo_Cursos_Recomendados.getValueAt(fila, 4);
                break;
            }
        }
        
        mostrar_Cursos_Recomendados_Lista.erase_at(fila);
        modelo_Cursos_Recomendados.removeRow(fila);
        
        modelo_Cursos_Actuales.addRow(celdas);
    }
    
    public static void Remover_Curso_Nuevo(String ID){
        
        int fila;
        Celda_Renderer[] celdas = new Celda_Renderer[5];
        Celda_Renderer celda;
        
        for (fila = 0; fila < mostrar_Cursos_Nuevos_JTable.getRowCount(); fila++) {
            
            celda = (Celda_Renderer) modelo_Cursos_Nuevos.getValueAt(fila, 0);
            if (celda.ID().equals(ID)){
                celdas[0] = celda;
                celdas[1] = (Celda_Renderer) modelo_Cursos_Nuevos.getValueAt(fila, 1);
                celdas[2] = (Celda_Renderer) modelo_Cursos_Nuevos.getValueAt(fila, 2);
                celdas[3] = (Celda_Renderer) modelo_Cursos_Nuevos.getValueAt(fila, 3);
                celdas[4] = (Celda_Renderer) modelo_Cursos_Nuevos.getValueAt(fila, 4);
                break;
            }
        }
        
        mostrar_Cursos_Nuevos_Lista.erase_at(fila);
        modelo_Cursos_Nuevos.removeRow(fila);
        
        modelo_Cursos_Actuales.addRow(celdas);
    }
    
    
    private void Agregar_Curso_Actual(String ruta_Imagen_Curso, String nombre_Curso, String ruta_Imagen_Profesor, String nombre_Profesor,
            String intereses_Tematicas, String fecha_Creacion, String puntuacion, String id){
        
        URL url_Imagen;
        Image obtener_Imagen_Curso, obtener_Imagen_Profesor;
        Celda_Renderer[] celdas = new Celda_Renderer[5];
        Celda_Renderer celda;
        ImageIcon icono;
        Image imagen;
        
        try {
            
            url_Imagen = new URL(ruta_Imagen_Curso);
            obtener_Imagen_Curso = ImageIO.read(url_Imagen);
            url_Imagen = new URL(ruta_Imagen_Profesor);
            obtener_Imagen_Profesor = ImageIO.read(url_Imagen);
            imagen = obtener_Imagen_Curso.getScaledInstance(95, 95, Image.SCALE_SMOOTH);
            icono = new ImageIcon(imagen);
            celda = new Celda_Renderer(icono, nombre_Curso, id);
            celdas[0] = celda;
            imagen = obtener_Imagen_Profesor.getScaledInstance(95, 95, Image.SCALE_SMOOTH);
            icono = new ImageIcon(imagen);
            celda = new Celda_Renderer(icono,nombre_Profesor, id);
            celdas[1] = celda;
            celda = new Celda_Renderer(intereses_Tematicas, id);
            celdas[2] = celda;
            celda = new Celda_Renderer(fecha_Creacion, id);
            celdas[3] = celda;
            celda = new Celda_Renderer(puntuacion, id);
            celdas[4] = celda;
            Curso_Estudiante_Panel curso_Estudiante_Panel
                    = new Curso_Estudiante_Panel(/*nombre_Curso, obtener_Imagen_Curso,
                            nombre_Profesor, obtener_Imagen_Profesor, fecha_Creacion,  id,*/-1);
            mostrar_Cursos_Actuales_Lista.push_back(curso_Estudiante_Panel);
            Tablero_Estudiante_Panel.Agregar_Vista(curso_Estudiante_Panel, id);
            modelo_Cursos_Actuales.addRow(celdas);
            id_Curso_Actual++;
        } catch (MalformedURLException ex) {
            
        } catch (IOException ex) {
            
        }
    }
    
    private void Agregar_Curso_Finalizado(String ruta_Imagen_Curso, String nombre_Curso, String ruta_Imagen_Profesor, String nombre_Profesor,
            String intereses_Tematicas, String fecha_Creacion, String puntuacion, String id){
        
        URL url_Imagen;
        Image obtener_Imagen_Curso, obtener_Imagen_Profesor;
        Celda_Renderer[] celdas = new Celda_Renderer[5];
        Celda_Renderer celda;
        ImageIcon icono;
        Image imagen;
        
        try {
            
            url_Imagen = new URL(ruta_Imagen_Curso);
            obtener_Imagen_Curso = ImageIO.read(url_Imagen);
            url_Imagen = new URL(ruta_Imagen_Profesor);
            obtener_Imagen_Profesor = ImageIO.read(url_Imagen);
            imagen = obtener_Imagen_Curso.getScaledInstance(95, 95, Image.SCALE_SMOOTH);
            icono = new ImageIcon(imagen);
            celda = new Celda_Renderer(icono, nombre_Curso, id);
            celdas[0] = celda;
            imagen = obtener_Imagen_Profesor.getScaledInstance(95, 95, Image.SCALE_SMOOTH);
            icono = new ImageIcon(imagen);
            celda = new Celda_Renderer(icono,nombre_Profesor, id);
            celdas[1] = celda;
            celda = new Celda_Renderer(intereses_Tematicas, id);
            celdas[2] = celda;
            celda = new Celda_Renderer(fecha_Creacion, id);
            celdas[3] = celda;
            celda = new Celda_Renderer(puntuacion, id);
            celdas[4] = celda;
            Curso_Estudiante_Panel curso_Estudiante_Panel
                    = new Curso_Estudiante_Panel(/*nombre_Curso, obtener_Imagen_Curso,
                            nombre_Profesor, obtener_Imagen_Profesor, fecha_Creacion,  id,*/-1);
            mostrar_Cursos_Finalizados_Lista.push_back(curso_Estudiante_Panel);
            Tablero_Estudiante_Panel.Agregar_Vista(curso_Estudiante_Panel, id);
            DefaultTableModel modelo = (DefaultTableModel) mostrar_Cursos_Finalizados_JTable.getModel();
            modelo.addRow(celdas);
            id_Curso_Actual++;
        } catch (MalformedURLException ex) {
            
        } catch (IOException ex) {
            
        }
    }
    
    private void Agregar_Curso_Recomendado(String ruta_Imagen_Curso, String nombre_Curso, String ruta_Imagen_Profesor, String nombre_Profesor,
            String intereses_Tematicas, String fecha_Creacion, String puntuacion, String id, String _id_Curso_Actual){
        
        URL url_Imagen;
        Image obtener_Imagen_Curso, obtener_Imagen_Profesor;
        Celda_Renderer[] celdas = new Celda_Renderer[5];
        Celda_Renderer celda;
        ImageIcon icono;
        Image imagen;
        
        try {
            
            url_Imagen = new URL(ruta_Imagen_Curso);
            obtener_Imagen_Curso = ImageIO.read(url_Imagen);
            url_Imagen = new URL(ruta_Imagen_Profesor);
            obtener_Imagen_Profesor = ImageIO.read(url_Imagen);
            imagen = obtener_Imagen_Curso.getScaledInstance(95, 95, Image.SCALE_SMOOTH);
            icono = new ImageIcon(imagen);
            celda = new Celda_Renderer(icono, nombre_Curso, id);
            celdas[0] = celda;
            imagen = obtener_Imagen_Profesor.getScaledInstance(95, 95, Image.SCALE_SMOOTH);
            icono = new ImageIcon(imagen);
            celda = new Celda_Renderer(icono,nombre_Profesor, id);
            celdas[1] = celda;
            celda = new Celda_Renderer(intereses_Tematicas, id);
            celdas[2] = celda;
            celda = new Celda_Renderer(fecha_Creacion, id);
            celdas[3] = celda;
            celda = new Celda_Renderer(puntuacion, id);
            celdas[4] = celda;
            Vista_Previa_Curso_Estudiante_Panel vista_Previa_Curso_Estudiante_Panel
                    = new Vista_Previa_Curso_Estudiante_Panel(nombre_Curso, obtener_Imagen_Curso,
                            nombre_Profesor, obtener_Imagen_Profesor, fecha_Creacion,  id, false, _id_Curso_Actual);
            mostrar_Cursos_Recomendados_Lista.push_back(vista_Previa_Curso_Estudiante_Panel);
            Tablero_Estudiante_Panel.Agregar_Vista(vista_Previa_Curso_Estudiante_Panel, id);
            modelo_Cursos_Recomendados.addRow(celdas);
            id_Curso_Actual++;
        } catch (MalformedURLException ex) {
            
        } catch (IOException ex) {
            
        }
    }
    
       private void Agregar_Curso_Nuevo(String ruta_Imagen_Curso, String nombre_Curso, String ruta_Imagen_Profesor, String nombre_Profesor,
            String intereses_Tematicas, String fecha_Creacion, String puntuacion, String id, String _id_Curso_Actual){
        
        URL url_Imagen;
        Image obtener_Imagen_Curso, obtener_Imagen_Profesor;
        Celda_Renderer[] celdas = new Celda_Renderer[5];
        Celda_Renderer celda;
        ImageIcon icono;
        Image imagen;
        
        try {
            
            url_Imagen = new URL(ruta_Imagen_Curso);
            obtener_Imagen_Curso = ImageIO.read(url_Imagen);
            url_Imagen = new URL(ruta_Imagen_Profesor);
            obtener_Imagen_Profesor = ImageIO.read(url_Imagen);
            imagen = obtener_Imagen_Curso.getScaledInstance(95, 95, Image.SCALE_SMOOTH);
            icono = new ImageIcon(imagen);
            celda = new Celda_Renderer(icono, nombre_Curso, id);
            celdas[0] = celda;
            imagen = obtener_Imagen_Profesor.getScaledInstance(95, 95, Image.SCALE_SMOOTH);
            icono = new ImageIcon(imagen);
            celda = new Celda_Renderer(icono,nombre_Profesor, id);
            celdas[1] = celda;
            celda = new Celda_Renderer(intereses_Tematicas, id);
            celdas[2] = celda;
            celda = new Celda_Renderer(fecha_Creacion, id);
            celdas[3] = celda;
            celda = new Celda_Renderer(puntuacion, id);
            celdas[4] = celda;
            Vista_Previa_Curso_Estudiante_Panel vista_Previa_Curso_Estudiante_Panel
                    = new Vista_Previa_Curso_Estudiante_Panel(nombre_Curso, obtener_Imagen_Curso,
                            nombre_Profesor, obtener_Imagen_Profesor, fecha_Creacion,  id, true, _id_Curso_Actual);
            mostrar_Cursos_Nuevos_Lista.push_back(vista_Previa_Curso_Estudiante_Panel);
            Tablero_Estudiante_Panel.Agregar_Vista(vista_Previa_Curso_Estudiante_Panel, id);
            modelo_Cursos_Nuevos.addRow(celdas);
            id_Curso_Actual++;
        } catch (MalformedURLException ex) {
            
        } catch (IOException ex) {
            
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel acciones_JPanel;
    private javax.swing.JButton actualizar_JButton;
    private javax.swing.JButton buscar_Cursos_JButton;
    private javax.swing.JPanel buscar_Cursos_JPanel;
    private javax.swing.JScrollPane buscar_Cursos_JScrollPane;
    private static javax.swing.JTable buscar_Cursos_JTable;
    private javax.swing.JTextField buscar_JTextField;
    private javax.swing.JPanel contenido_Titulo_JPanel;
    private javax.swing.JButton cursos_Actuales_JButton;
    private javax.swing.JButton cursos_Finalizados_JButton;
    private javax.swing.JButton cursos_Nuevos_JButton;
    private javax.swing.JButton cursos_Recomendados_JButton;
    private javax.swing.JScrollPane mostrar_Cursos_Actuales_JScrollPane;
    private static javax.swing.JTable mostrar_Cursos_Actuales_JTable;
    private javax.swing.JScrollPane mostrar_Cursos_Finalizados_JScrollPane;
    private static javax.swing.JTable mostrar_Cursos_Finalizados_JTable;
    private javax.swing.JButton mostrar_Cursos_JButton;
    private javax.swing.JLayeredPane mostrar_Cursos_JLayeredPane;
    private javax.swing.JPanel mostrar_Cursos_JPanel;
    private javax.swing.JScrollPane mostrar_Cursos_Nuevos_JScrollPane;
    private static javax.swing.JTable mostrar_Cursos_Nuevos_JTable;
    private javax.swing.JScrollPane mostrar_Cursos_Recomendados_JScrollPane;
    private static javax.swing.JTable mostrar_Cursos_Recomendados_JTable;
    private javax.swing.JLabel titulo_JLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void Iniciar_Componentes() {
        
        carta_Visible = 0;
        id_Curso_Actual = 0;
        
        //Buscar cursos:
        
        buscar_Cursos_JScrollPane.getViewport().setOpaque(false);
        buscar_Cursos_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        buscar_Cursos_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);

        buscar_Cursos_Lista = new Lista<>();

        Font gadugi = new Font("Segoe UI", Font.BOLD, 16);
        buscar_Cursos_JTable.getTableHeader().setFont(gadugi);

        buscar_Cursos_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
 
        // Cursos actuales:
        mostrar_Cursos_Actuales_JScrollPane.getViewport().setOpaque(false);
        mostrar_Cursos_Actuales_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        mostrar_Cursos_Actuales_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);

        mostrar_Cursos_Actuales_Lista = new Lista<>();

        mostrar_Cursos_Actuales_JTable.getTableHeader().setFont(gadugi);

        mostrar_Cursos_Actuales_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
        modelo_Cursos_Actuales = (DefaultTableModel) mostrar_Cursos_Actuales_JTable.getModel();

        //Cursos finalizados:
        mostrar_Cursos_Finalizados_JScrollPane.getViewport().setOpaque(false);
        mostrar_Cursos_Finalizados_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        mostrar_Cursos_Finalizados_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);

        mostrar_Cursos_Finalizados_Lista = new Lista<>();

        mostrar_Cursos_Finalizados_JTable.getTableHeader().setFont(gadugi);

        mostrar_Cursos_Finalizados_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
        
        
          
        //Cursos Recomendados:
        mostrar_Cursos_Recomendados_JScrollPane.getViewport().setOpaque(false);
        mostrar_Cursos_Recomendados_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        mostrar_Cursos_Recomendados_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);

        mostrar_Cursos_Recomendados_Lista = new Lista<>();

        mostrar_Cursos_Recomendados_JTable.getTableHeader().setFont(gadugi);

        mostrar_Cursos_Recomendados_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
        modelo_Cursos_Recomendados = (DefaultTableModel) mostrar_Cursos_Recomendados_JTable.getModel();

       
        //Cursos nuevos:
        mostrar_Cursos_Nuevos_JScrollPane.getViewport().setOpaque(false);
        mostrar_Cursos_Nuevos_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        mostrar_Cursos_Nuevos_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);

        mostrar_Cursos_Nuevos_Lista = new Lista<>();
        mostrar_Cursos_Nuevos_JTable.getTableHeader().setFont(gadugi);

        mostrar_Cursos_Nuevos_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
        modelo_Cursos_Nuevos = (DefaultTableModel) mostrar_Cursos_Nuevos_JTable.getModel();


        titulo_JLabel.setText("Cursos Actuales");
        
    }

    @Override
    public void Colorear_Componentes() {
        
        //Titulo cursos:
        contenido_Titulo_JPanel.setBackground(CourseRoom.Utilerias().Segundo_Color());

        titulo_JLabel.setBackground(CourseRoom.Utilerias().Segundo_Color());
        titulo_JLabel.setForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        Carta_Visible();

        buscar_Cursos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
        actualizar_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
        
        //Buscar cursos:
        
        Font fuente = new java.awt.Font("Segoe UI", 1, 15);
        BevelBorder borde_Linea = new BevelBorder(BevelBorder.LOWERED);
        TitledBorder borde_Titulo = new TitledBorder(borde_Linea, "Buscar Curso(s)", TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.BELOW_TOP,  fuente, CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        buscar_JTextField.setBorder(borde_Titulo);
        
        buscar_Cursos_JTable.setBackground(CourseRoom.Utilerias().Primer_Color());
        buscar_Cursos_JTable.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        
        buscar_Cursos_JTable.getTableHeader().setBackground(CourseRoom.Utilerias().Tercer_Color());
        buscar_Cursos_JTable.getTableHeader().setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        buscar_Cursos_JTable.setGridColor(CourseRoom.Utilerias().Segundo_Color());
        
        buscar_Cursos_JTable.setSelectionBackground(CourseRoom.Utilerias().Segundo_Color());
        buscar_Cursos_JTable.setSelectionForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        buscar_JTextField.setBackground(CourseRoom.Utilerias().Segundo_Color());
        buscar_JTextField.setForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        buscar_JTextField.setCaretColor(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        mostrar_Cursos_JButton.setBackground(CourseRoom.Utilerias().Primer_Color());
        
        DefaultTableModel modelo = (DefaultTableModel) buscar_Cursos_JTable.getModel();
        Celda_Renderer celda;
        for (int i = 0; i < modelo.getRowCount(); i++) {
            for (int j = 0; j < modelo.getColumnCount(); j++) {
                celda = (Celda_Renderer) modelo.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias().Primer_Color_Fuente());
            }
        }

        Curso_Estudiante_Panel curso_Estudiante_Panel;
        for (Nodo<Curso_Estudiante_Panel> nodo = buscar_Cursos_Lista.front(); nodo != null; nodo = nodo.next()) {
            curso_Estudiante_Panel = nodo.element();
            curso_Estudiante_Panel.Colorear_Componentes();
        }
        
        // Cursos actuales:
        mostrar_Cursos_Actuales_JTable.setBackground(CourseRoom.Utilerias().Primer_Color());
        mostrar_Cursos_Actuales_JTable.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        mostrar_Cursos_Actuales_JTable.getTableHeader().setBackground(CourseRoom.Utilerias().Tercer_Color());
        mostrar_Cursos_Actuales_JTable.getTableHeader().setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        mostrar_Cursos_Actuales_JTable.setGridColor(CourseRoom.Utilerias().Segundo_Color());
        mostrar_Cursos_Actuales_JTable.setSelectionBackground(CourseRoom.Utilerias().Segundo_Color());
        mostrar_Cursos_Actuales_JTable.setSelectionForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        for (int i = 0; i < modelo_Cursos_Actuales.getRowCount(); i++) {
            for (int j = 0; j < modelo_Cursos_Actuales.getColumnCount(); j++) {
                celda = (Celda_Renderer) modelo_Cursos_Actuales.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias().Primer_Color_Fuente());
            }
        }

        for (Nodo<Curso_Estudiante_Panel> nodo = mostrar_Cursos_Actuales_Lista.front(); nodo != null; nodo = nodo.next()) {
            curso_Estudiante_Panel = nodo.element();
            curso_Estudiante_Panel.Colorear_Componentes();
        }
        
        
        //Cursos finalizados:
        mostrar_Cursos_Finalizados_JTable.setBackground(CourseRoom.Utilerias().Primer_Color());
        mostrar_Cursos_Finalizados_JTable.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        mostrar_Cursos_Finalizados_JTable.getTableHeader().setBackground(CourseRoom.Utilerias().Tercer_Color());
        mostrar_Cursos_Finalizados_JTable.getTableHeader().setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        mostrar_Cursos_Finalizados_JTable.setGridColor(CourseRoom.Utilerias().Segundo_Color());
        mostrar_Cursos_Finalizados_JTable.setSelectionBackground(CourseRoom.Utilerias().Segundo_Color());
        mostrar_Cursos_Finalizados_JTable.setSelectionForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        modelo = (DefaultTableModel) mostrar_Cursos_Finalizados_JTable.getModel();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            for (int j = 0; j < modelo.getColumnCount(); j++) {
                celda = (Celda_Renderer) modelo.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias().Primer_Color_Fuente());
            }
        }

        for (Nodo<Curso_Estudiante_Panel> nodo = mostrar_Cursos_Finalizados_Lista.front(); nodo != null; nodo = nodo.next()) {
            curso_Estudiante_Panel = nodo.element();
            curso_Estudiante_Panel.Colorear_Componentes();
        }
        
        //Cursos Recomendados:
        mostrar_Cursos_Recomendados_JTable.setBackground(CourseRoom.Utilerias().Primer_Color());
        mostrar_Cursos_Recomendados_JTable.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        mostrar_Cursos_Recomendados_JTable.getTableHeader().setBackground(CourseRoom.Utilerias().Tercer_Color());
        mostrar_Cursos_Recomendados_JTable.getTableHeader().setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        mostrar_Cursos_Recomendados_JTable.setGridColor(CourseRoom.Utilerias().Segundo_Color());
        mostrar_Cursos_Recomendados_JTable.setSelectionBackground(CourseRoom.Utilerias().Segundo_Color());
        mostrar_Cursos_Recomendados_JTable.setSelectionForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        for (int i = 0; i < modelo_Cursos_Recomendados.getRowCount(); i++) {
            for (int j = 0; j < modelo_Cursos_Recomendados.getColumnCount(); j++) {
                celda = (Celda_Renderer) modelo_Cursos_Recomendados.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias().Primer_Color_Fuente());
            }
        }

        Vista_Previa_Curso_Estudiante_Panel vista_Previa_Curso_Estudiante_Panel;
        for (Nodo<Vista_Previa_Curso_Estudiante_Panel> nodo = mostrar_Cursos_Recomendados_Lista.front(); nodo != null; nodo = nodo.next()) {
            vista_Previa_Curso_Estudiante_Panel = nodo.element();
            vista_Previa_Curso_Estudiante_Panel.Colorear_Componentes();
        }
        
        //Cursos nuevos:
        mostrar_Cursos_Nuevos_JTable.setBackground(CourseRoom.Utilerias().Primer_Color());
        mostrar_Cursos_Nuevos_JTable.setForeground(CourseRoom.Utilerias().Primer_Color_Fuente());
        mostrar_Cursos_Nuevos_JTable.getTableHeader().setBackground(CourseRoom.Utilerias().Tercer_Color());
        mostrar_Cursos_Nuevos_JTable.getTableHeader().setForeground(CourseRoom.Utilerias().Tercer_Color_Fuente());
        mostrar_Cursos_Nuevos_JTable.setGridColor(CourseRoom.Utilerias().Segundo_Color());
        mostrar_Cursos_Nuevos_JTable.setSelectionBackground(CourseRoom.Utilerias().Segundo_Color());
        mostrar_Cursos_Nuevos_JTable.setSelectionForeground(CourseRoom.Utilerias().Segundo_Color_Fuente());
        
        for (int i = 0; i < modelo_Cursos_Nuevos.getRowCount(); i++) {
            for (int j = 0; j < modelo_Cursos_Nuevos.getColumnCount(); j++) {
                celda = (Celda_Renderer) modelo_Cursos_Nuevos.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias().Primer_Color_Fuente());
            }
        }

        for (Nodo<Vista_Previa_Curso_Estudiante_Panel> nodo = mostrar_Cursos_Nuevos_Lista.front(); nodo != null; nodo = nodo.next()) {
            vista_Previa_Curso_Estudiante_Panel = nodo.element();
            vista_Previa_Curso_Estudiante_Panel.Colorear_Componentes();
        }
    }

    @Override
    public void Limpiar() {
        buscar_Cursos_Lista.clear();
        
        mostrar_Cursos_Actuales_Lista.clear();
        
        mostrar_Cursos_Finalizados_Lista.clear();
        
        mostrar_Cursos_Recomendados_Lista.clear();
        
        mostrar_Cursos_Nuevos_Lista.clear();
        
        modelo_Cursos_Actuales.setRowCount(0);
        modelo_Cursos_Recomendados.setRowCount(0);
        modelo_Cursos_Nuevos.setRowCount(0);
        
        DefaultTableModel modelo = (DefaultTableModel) buscar_Cursos_JTable.getModel();
        modelo.setRowCount(0);
        modelo = (DefaultTableModel) mostrar_Cursos_Finalizados_JTable.getModel();
        modelo.setRowCount(0);
        
    }

    @Override
    public void Carta_Visible() {
        switch (carta_Visible) {
            case 0:
                cursos_Actuales_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
                cursos_Finalizados_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                cursos_Recomendados_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                cursos_Nuevos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                break;
            case 1:
                cursos_Actuales_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                cursos_Finalizados_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
                cursos_Recomendados_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                cursos_Nuevos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                break;
            case 2:
                cursos_Actuales_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                cursos_Finalizados_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                cursos_Recomendados_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
                cursos_Nuevos_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                break;
            case 3:
                cursos_Actuales_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                cursos_Finalizados_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                cursos_Recomendados_JButton.setBackground(CourseRoom.Utilerias().Segundo_Color());
                cursos_Nuevos_JButton.setBackground(CourseRoom.Utilerias().Tercer_Color());
                break;
        }
    }

}
