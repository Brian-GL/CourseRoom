/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paneles.generales.tablero;

import courseroom.CourseRoom;
import datos.colecciones.Lista;
import datos.colecciones.Lista_Pares;
import datos.estructuras.Nodo;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.PixelGrabber;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import uk.co.caprica.vlcj.factory.MediaPlayerFactory;
import uk.co.caprica.vlcj.media.MediaRef;
import uk.co.caprica.vlcj.media.TrackType;
import uk.co.caprica.vlcj.player.base.MediaPlayer;
import uk.co.caprica.vlcj.player.base.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.base.State;
import uk.co.caprica.vlcj.player.component.AudioListPlayerComponent;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.TagException;
import org.jaudiotagger.tag.images.Artwork;
import datos.estructuras.Par;
import java.io.FileFilter;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import uk.co.caprica.vlcj.player.base.Equalizer;
import uk.co.caprica.vlcj.player.list.MediaListPlayer;
import uk.co.caprica.vlcj.player.list.MediaListPlayerEventListener;
import interfaces.Color_Interface;
import interfaces.Componentes_Interface;
import interfaces.Limpieza_Interface;
import interfaces.Reproductor_Interface;
import java.awt.Font;
import paneles.generales.Entrada_Lista_Reproduccion_General_Panel;

/**
 *
 * @author brian-gl
 */
public final class Reproductor_Musica_General_Panel extends javax.swing.JPanel implements Color_Interface, Limpieza_Interface, Componentes_Interface, Reproductor_Interface{

    //Private attributes
    
    //Banderas
    private boolean bandera_Mouse_Auxiliar, bandera_Siguiente_Pista, bandera_Anterior_Pista;
    private static boolean bandera_Indice_Cero;
    
    //Image Icons
    private ImageIcon icono_Play, icono_Pause;
    
    //Components
    private static AudioListPlayerComponent componente_Reproducto_Lista_Audio;
    
    //Data Structures
    private Map<String,Equalizer> mapa_presets;
    private static Lista<String> rutas;
    private static Nodo<String> nodo_actual;
     
    //Others
    private static int indice;
    private Color primer_Color, segundo_Color, segundo_Color_Fuente;

    
    public Reproductor_Musica_General_Panel() {
        
        initComponents();
        
        
        Iniciar_Componentes();
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagen_Arte_JLabel = new javax.swing.JLabel();
        controles_JPanel = new javax.swing.JPanel();
        controles_JTabbedPane = new javax.swing.JTabbedPane();
        abrir_Archivos_JPanel = new javax.swing.JPanel();
        abrir_Carpeta_JLabel = new javax.swing.JLabel();
        abrir_Archivos_JLabel = new javax.swing.JLabel();
        lista_Reproduccion_JScrollPane = new javax.swing.JScrollPane();
        lista_Reproduccion_JPanel = new javax.swing.JPanel();
        controles_Reproduccion_JPanel = new javax.swing.JPanel();
        alto_JLabel = new javax.swing.JLabel();
        anterior_JLabel = new javax.swing.JLabel();
        play_Pausa_JLabel = new javax.swing.JLabel();
        siguiente_JLabel = new javax.swing.JLabel();
        controles_Audio_JPanel = new javax.swing.JPanel();
        bajar_Rate_JLabel = new javax.swing.JLabel();
        rate_JSlider = new javax.swing.JSlider();
        subir_Rate_JLabel = new javax.swing.JLabel();
        bajar_Volumen_JLabel = new javax.swing.JLabel();
        volumen_JSlider = new javax.swing.JSlider();
        subir_Volumen_JLabel = new javax.swing.JLabel();
        ecualizador_JPanel = new javax.swing.JPanel();
        bandas_JPanel = new javax.swing.JPanel();
        banda0_JSlider = new javax.swing.JSlider();
        banda1_JSlider = new javax.swing.JSlider();
        banda2_JSlider = new javax.swing.JSlider();
        banda3_JSlider = new javax.swing.JSlider();
        banda4_JSlider = new javax.swing.JSlider();
        banda5_JSlider = new javax.swing.JSlider();
        banda6_JSlider = new javax.swing.JSlider();
        banda7_JSlider = new javax.swing.JSlider();
        banda8_JSlider = new javax.swing.JSlider();
        banda9_JSlider = new javax.swing.JSlider();
        banda0_JLabel = new javax.swing.JLabel();
        banda1_JLabel = new javax.swing.JLabel();
        banda2_JLabel = new javax.swing.JLabel();
        banda3_JLabel = new javax.swing.JLabel();
        banda4_JLabel = new javax.swing.JLabel();
        banda5_JLabel = new javax.swing.JLabel();
        banda6_JLabel = new javax.swing.JLabel();
        banda7_JLabel = new javax.swing.JLabel();
        banda8_JLabel = new javax.swing.JLabel();
        banda9_JLabel = new javax.swing.JLabel();
        titulo_Preamp_JLabel = new javax.swing.JLabel();
        preamp_JSlider = new javax.swing.JSlider();
        preamp_JLabel = new javax.swing.JLabel();
        preset_JLabel = new javax.swing.JLabel();
        presets_JComboBox = new javax.swing.JComboBox<>();
        informacion_Archivo_JPanel = new javax.swing.JPanel();
        genero_JLabel = new javax.swing.JLabel();
        informacion_Archivo_JLabel = new javax.swing.JLabel();
        anio_JLabel = new javax.swing.JLabel();
        letras_JScrollPane = new javax.swing.JScrollPane();
        letras_JTextPane = new javax.swing.JTextPane();
        titulo_JLabel = new javax.swing.JLabel();
        duracion_Total_JLabel = new javax.swing.JLabel();
        artista_JLabel = new javax.swing.JLabel();
        album_JLabel = new javax.swing.JLabel();
        progreso_JLabel = new javax.swing.JLabel();
        progreso_JSlider = new javax.swing.JSlider();

        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(new java.awt.Dimension(1110, 630));

        imagen_Arte_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagen_Arte_JLabel.setToolTipText("<html>\n<h3>Car√°tula</h3>\n</html>");
        imagen_Arte_JLabel.setMaximumSize(new java.awt.Dimension(550, 550));
        imagen_Arte_JLabel.setMinimumSize(new java.awt.Dimension(550, 550));
        imagen_Arte_JLabel.setPreferredSize(new java.awt.Dimension(550, 550));

        controles_JPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        controles_JTabbedPane.setTabPlacement(javax.swing.JTabbedPane.RIGHT);

        abrir_Archivos_JPanel.setOpaque(false);

        abrir_Carpeta_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        abrir_Carpeta_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/carpeta.png"))); // NOI18N
        abrir_Carpeta_JLabel.setToolTipText("<html> <h3>Abrir carpeta</h3> </html> ");
        ((ImageIcon)abrir_Carpeta_JLabel.getIcon()).getImage().flush();
        abrir_Carpeta_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                abrir_Carpeta_JLabelMouseClicked(evt);
            }
        });

        abrir_Archivos_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        abrir_Archivos_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/folder.png"))); // NOI18N
        abrir_Archivos_JLabel.setToolTipText("<html> <h3>Abrir archivo(s)</h3> </html> ");
        ((ImageIcon)abrir_Archivos_JLabel.getIcon()).getImage().flush();
        abrir_Archivos_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                abrir_Archivos_JLabelMouseClicked(evt);
            }
        });

        lista_Reproduccion_JScrollPane.setBorder(null);
        lista_Reproduccion_JScrollPane.setOpaque(false);

        lista_Reproduccion_JPanel.setOpaque(false);
        lista_Reproduccion_JPanel.setLayout(new javax.swing.BoxLayout(lista_Reproduccion_JPanel, javax.swing.BoxLayout.PAGE_AXIS));
        lista_Reproduccion_JScrollPane.setViewportView(lista_Reproduccion_JPanel);

        javax.swing.GroupLayout abrir_Archivos_JPanelLayout = new javax.swing.GroupLayout(abrir_Archivos_JPanel);
        abrir_Archivos_JPanel.setLayout(abrir_Archivos_JPanelLayout);
        abrir_Archivos_JPanelLayout.setHorizontalGroup(
            abrir_Archivos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abrir_Archivos_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abrir_Archivos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abrir_Archivos_JPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(abrir_Archivos_JLabel)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(abrir_Carpeta_JLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lista_Reproduccion_JScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        abrir_Archivos_JPanelLayout.setVerticalGroup(
            abrir_Archivos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abrir_Archivos_JPanelLayout.createSequentialGroup()
                .addGroup(abrir_Archivos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(abrir_Archivos_JLabel)
                    .addComponent(abrir_Carpeta_JLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lista_Reproduccion_JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        abrir_Archivos_JLabel.getAccessibleContext().setAccessibleName("jLabelOpenFile");

        controles_JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/audio.png")), abrir_Archivos_JPanel); // NOI18N

        controles_Reproduccion_JPanel.setOpaque(false);

        alto_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        alto_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/stop.png"))); // NOI18N
        alto_JLabel.setToolTipText("<html>\n<h3>Parar</h3>\n</html>\n");
        alto_JLabel.setEnabled(false);
        ((ImageIcon)alto_JLabel.getIcon()).getImage().flush();
        alto_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alto_JLabelMouseClicked(evt);
            }
        });

        anterior_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        anterior_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/previous.png"))); // NOI18N
        anterior_JLabel.setToolTipText("<html>\n<h3>Anterior</h3>\n</html>");
        anterior_JLabel.setEnabled(false);
        ((ImageIcon)anterior_JLabel.getIcon()).getImage().flush();
        anterior_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anterior_JLabelMouseClicked(evt);
            }
        });

        play_Pausa_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        play_Pausa_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/play-button.png"))); // NOI18N
        play_Pausa_JLabel.setToolTipText("<html>\n<h3>Reproducir/Pausar</h3>\n</html>");
        play_Pausa_JLabel.setEnabled(false);
        ((ImageIcon)play_Pausa_JLabel.getIcon()).getImage().flush();
        play_Pausa_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                play_Pausa_JLabelMouseClicked(evt);
            }
        });

        siguiente_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        siguiente_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/next-button.png"))); // NOI18N
        siguiente_JLabel.setToolTipText("<html>\n<h3>Siguiente</h3>\n</html>");
        siguiente_JLabel.setEnabled(false);
        ((ImageIcon)siguiente_JLabel.getIcon()).getImage().flush();
        siguiente_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                siguiente_JLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout controles_Reproduccion_JPanelLayout = new javax.swing.GroupLayout(controles_Reproduccion_JPanel);
        controles_Reproduccion_JPanel.setLayout(controles_Reproduccion_JPanelLayout);
        controles_Reproduccion_JPanelLayout.setHorizontalGroup(
            controles_Reproduccion_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controles_Reproduccion_JPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(alto_JLabel)
                .addGap(50, 50, 50)
                .addComponent(anterior_JLabel)
                .addGap(48, 48, 48)
                .addComponent(play_Pausa_JLabel)
                .addGap(50, 50, 50)
                .addComponent(siguiente_JLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controles_Reproduccion_JPanelLayout.setVerticalGroup(
            controles_Reproduccion_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controles_Reproduccion_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controles_Reproduccion_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(anterior_JLabel)
                    .addComponent(alto_JLabel)
                    .addComponent(play_Pausa_JLabel)
                    .addComponent(siguiente_JLabel))
                .addContainerGap(367, Short.MAX_VALUE))
        );

        controles_JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/play.png")), controles_Reproduccion_JPanel); // NOI18N

        controles_Audio_JPanel.setOpaque(false);

        bajar_Rate_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/snail.png"))); // NOI18N
        bajar_Rate_JLabel.setToolTipText("<html> <h3>Bajar velocidad</h3> </html>");
        bajar_Rate_JLabel.setEnabled(false);
        ((ImageIcon)bajar_Rate_JLabel.getIcon()).getImage().flush();
        bajar_Rate_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bajar_Rate_JLabelMouseClicked(evt);
            }
        });

        rate_JSlider.setBackground(new java.awt.Color(14, 30, 64));
        rate_JSlider.setMajorTickSpacing(10);
        rate_JSlider.setMaximum(150);
        rate_JSlider.setMinimum(50);
        rate_JSlider.setPaintTicks(true);
        rate_JSlider.setToolTipText("Rate");
        rate_JSlider.setValue(100);
        rate_JSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rate_JSlider.setEnabled(false);
        rate_JSlider.setFocusable(false);
        rate_JSlider.setMaximumSize(new java.awt.Dimension(32767, 32));
        rate_JSlider.setMinimumSize(new java.awt.Dimension(137, 32));
        rate_JSlider.setPreferredSize(new java.awt.Dimension(137, 32));

        subir_Rate_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/rabbit.png"))); // NOI18N
        subir_Rate_JLabel.setToolTipText("<html> <h3>Subir velocidad</h3> </html>");
        subir_Rate_JLabel.setEnabled(false);
        ((ImageIcon)subir_Rate_JLabel.getIcon()).getImage().flush();
        subir_Rate_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subir_Rate_JLabelMouseClicked(evt);
            }
        });

        bajar_Volumen_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/volume-down.png"))); // NOI18N
        bajar_Volumen_JLabel.setToolTipText("<html> <h3>Bajar volumen</h3> </html>");
        bajar_Volumen_JLabel.setEnabled(false);
        ((ImageIcon)bajar_Volumen_JLabel.getIcon()).getImage().flush();
        bajar_Volumen_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bajar_Volumen_JLabelMouseClicked(evt);
            }
        });

        volumen_JSlider.setBackground(new java.awt.Color(14, 30, 64));
        volumen_JSlider.setMajorTickSpacing(10);
        volumen_JSlider.setPaintTicks(true);
        volumen_JSlider.setToolTipText("Volume");
        volumen_JSlider.setValue(100);
        volumen_JSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        volumen_JSlider.setEnabled(false);
        volumen_JSlider.setFocusable(false);
        volumen_JSlider.setMaximumSize(new java.awt.Dimension(32767, 32));
        volumen_JSlider.setMinimumSize(new java.awt.Dimension(137, 32));
        volumen_JSlider.setPreferredSize(new java.awt.Dimension(137, 32));

        subir_Volumen_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/volume-up.png"))); // NOI18N
        subir_Volumen_JLabel.setToolTipText("<html> <h3>Subir volumen</h3> </html>");
        subir_Volumen_JLabel.setEnabled(false);
        ((ImageIcon)subir_Volumen_JLabel.getIcon()).getImage().flush();
        subir_Volumen_JLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subir_Volumen_JLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout controles_Audio_JPanelLayout = new javax.swing.GroupLayout(controles_Audio_JPanel);
        controles_Audio_JPanel.setLayout(controles_Audio_JPanelLayout);
        controles_Audio_JPanelLayout.setHorizontalGroup(
            controles_Audio_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controles_Audio_JPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controles_Audio_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controles_Audio_JPanelLayout.createSequentialGroup()
                        .addComponent(bajar_Rate_JLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rate_JSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controles_Audio_JPanelLayout.createSequentialGroup()
                        .addComponent(bajar_Volumen_JLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(volumen_JSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controles_Audio_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subir_Rate_JLabel)
                    .addGroup(controles_Audio_JPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(subir_Volumen_JLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controles_Audio_JPanelLayout.setVerticalGroup(
            controles_Audio_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controles_Audio_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controles_Audio_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bajar_Rate_JLabel)
                    .addComponent(rate_JSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subir_Rate_JLabel))
                .addGap(18, 18, 18)
                .addGroup(controles_Audio_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bajar_Volumen_JLabel)
                    .addComponent(volumen_JSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subir_Volumen_JLabel))
                .addContainerGap(317, Short.MAX_VALUE))
        );

        controles_JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/loud.png")), controles_Audio_JPanel); // NOI18N

        ecualizador_JPanel.setOpaque(false);

        bandas_JPanel.setMinimumSize(new java.awt.Dimension(470, 350));
        bandas_JPanel.setOpaque(false);
        bandas_JPanel.setPreferredSize(new java.awt.Dimension(287, 256));
        bandas_JPanel.setLayout(new java.awt.GridLayout(2, 2, 0, -250));

        banda0_JSlider.setMajorTickSpacing(1);
        banda0_JSlider.setMaximum(12);
        banda0_JSlider.setMinimum(-12);
        banda0_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda0_JSlider.setPaintTicks(true);
        banda0_JSlider.setValue(0);
        banda0_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda0_JSlider.setMinimumSize(new java.awt.Dimension(20, 150));
        banda0_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda0_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda0_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda0_JSlider);

        banda1_JSlider.setMajorTickSpacing(1);
        banda1_JSlider.setMaximum(12);
        banda1_JSlider.setMinimum(-12);
        banda1_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda1_JSlider.setPaintTicks(true);
        banda1_JSlider.setValue(0);
        banda1_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda1_JSlider.setMinimumSize(new java.awt.Dimension(28, 300));
        banda1_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda1_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda1_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda1_JSlider);

        banda2_JSlider.setMajorTickSpacing(1);
        banda2_JSlider.setMaximum(12);
        banda2_JSlider.setMinimum(-12);
        banda2_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda2_JSlider.setPaintTicks(true);
        banda2_JSlider.setValue(0);
        banda2_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda2_JSlider.setMinimumSize(new java.awt.Dimension(28, 300));
        banda2_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda2_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda2_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda2_JSlider);

        banda3_JSlider.setMajorTickSpacing(1);
        banda3_JSlider.setMaximum(12);
        banda3_JSlider.setMinimum(-12);
        banda3_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda3_JSlider.setPaintTicks(true);
        banda3_JSlider.setValue(0);
        banda3_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda3_JSlider.setMinimumSize(new java.awt.Dimension(28, 300));
        banda3_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda3_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda3_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda3_JSlider);

        banda4_JSlider.setMajorTickSpacing(1);
        banda4_JSlider.setMaximum(12);
        banda4_JSlider.setMinimum(-12);
        banda4_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda4_JSlider.setPaintTicks(true);
        banda4_JSlider.setValue(0);
        banda4_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda4_JSlider.setMinimumSize(new java.awt.Dimension(28, 300));
        banda4_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda4_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda4_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda4_JSlider);

        banda5_JSlider.setMajorTickSpacing(1);
        banda5_JSlider.setMaximum(12);
        banda5_JSlider.setMinimum(-12);
        banda5_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda5_JSlider.setPaintTicks(true);
        banda5_JSlider.setValue(0);
        banda5_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda5_JSlider.setMinimumSize(new java.awt.Dimension(28, 300));
        banda5_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda5_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda5_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda5_JSlider);

        banda6_JSlider.setMajorTickSpacing(1);
        banda6_JSlider.setMaximum(12);
        banda6_JSlider.setMinimum(-12);
        banda6_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda6_JSlider.setPaintTicks(true);
        banda6_JSlider.setValue(0);
        banda6_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda6_JSlider.setMinimumSize(new java.awt.Dimension(35, 400));
        banda6_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda6_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda6_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda6_JSlider);

        banda7_JSlider.setMajorTickSpacing(1);
        banda7_JSlider.setMaximum(12);
        banda7_JSlider.setMinimum(-12);
        banda7_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda7_JSlider.setPaintTicks(true);
        banda7_JSlider.setValue(0);
        banda7_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda7_JSlider.setMinimumSize(new java.awt.Dimension(28, 300));
        banda7_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda7_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda7_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda7_JSlider);

        banda8_JSlider.setMajorTickSpacing(1);
        banda8_JSlider.setMaximum(12);
        banda8_JSlider.setMinimum(-12);
        banda8_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda8_JSlider.setPaintTicks(true);
        banda8_JSlider.setValue(0);
        banda8_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda8_JSlider.setMinimumSize(new java.awt.Dimension(28, 300));
        banda8_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda8_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda8_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda8_JSlider);

        banda9_JSlider.setMajorTickSpacing(1);
        banda9_JSlider.setMaximum(12);
        banda9_JSlider.setMinimum(-12);
        banda9_JSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        banda9_JSlider.setPaintTicks(true);
        banda9_JSlider.setValue(0);
        banda9_JSlider.setMaximumSize(new java.awt.Dimension(35, 400));
        banda9_JSlider.setMinimumSize(new java.awt.Dimension(28, 300));
        banda9_JSlider.setPreferredSize(new java.awt.Dimension(35, 400));
        banda9_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                banda9_JSliderStateChanged(evt);
            }
        });
        bandas_JPanel.add(banda9_JSlider);

        banda0_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda0_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda0_JLabel.setText("0");
        banda0_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda0_JLabel);

        banda1_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda1_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda1_JLabel.setText("0");
        banda1_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda1_JLabel);

        banda2_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda2_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda2_JLabel.setText("0");
        banda2_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda2_JLabel);

        banda3_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda3_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda3_JLabel.setText("0");
        banda3_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda3_JLabel);

        banda4_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda4_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda4_JLabel.setText("0");
        banda4_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda4_JLabel);

        banda5_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda5_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda5_JLabel.setText("0");
        banda5_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda5_JLabel);

        banda6_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda6_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda6_JLabel.setText("0");
        banda6_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda6_JLabel);

        banda7_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda7_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda7_JLabel.setText("0");
        banda7_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda7_JLabel);

        banda8_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda8_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda8_JLabel.setText("0");
        banda8_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda8_JLabel);

        banda9_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        banda9_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banda9_JLabel.setText("0");
        banda9_JLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        bandas_JPanel.add(banda9_JLabel);

        titulo_Preamp_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        titulo_Preamp_JLabel.setText("Preamp");
        titulo_Preamp_JLabel.setPreferredSize(new java.awt.Dimension(47, 20));
        titulo_Preamp_JLabel.setRequestFocusEnabled(false);
        titulo_Preamp_JLabel.setVerifyInputWhenFocusTarget(false);

        preamp_JSlider.setMajorTickSpacing(1);
        preamp_JSlider.setMaximum(12);
        preamp_JSlider.setMinimum(-12);
        preamp_JSlider.setPaintTicks(true);
        preamp_JSlider.setValue(0);
        preamp_JSlider.setMaximumSize(new java.awt.Dimension(20, 150));
        preamp_JSlider.setMinimumSize(new java.awt.Dimension(20, 150));
        preamp_JSlider.setPreferredSize(new java.awt.Dimension(150, 20));
        preamp_JSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                preamp_JSliderStateChanged(evt);
            }
        });

        preamp_JLabel.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        preamp_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        preamp_JLabel.setText("0");
        preamp_JLabel.setMinimumSize(new java.awt.Dimension(20, 20));
        preamp_JLabel.setPreferredSize(new java.awt.Dimension(20, 20));
        preamp_JLabel.setRequestFocusEnabled(false);
        preamp_JLabel.setVerifyInputWhenFocusTarget(false);

        preset_JLabel.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        preset_JLabel.setText("Preset");
        preset_JLabel.setMaximumSize(new java.awt.Dimension(50, 32));
        preset_JLabel.setMinimumSize(new java.awt.Dimension(50, 32));
        preset_JLabel.setPreferredSize(new java.awt.Dimension(50, 32));

        presets_JComboBox.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        presets_JComboBox.setToolTipText("<html> <h3>Seleccionar preset</h3> </html>");
        presets_JComboBox.setMinimumSize(new java.awt.Dimension(250, 32));
        presets_JComboBox.setPreferredSize(new java.awt.Dimension(250, 32));
        presets_JComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                presets_JComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout ecualizador_JPanelLayout = new javax.swing.GroupLayout(ecualizador_JPanel);
        ecualizador_JPanel.setLayout(ecualizador_JPanelLayout);
        ecualizador_JPanelLayout.setHorizontalGroup(
            ecualizador_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ecualizador_JPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ecualizador_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ecualizador_JPanelLayout.createSequentialGroup()
                        .addGroup(ecualizador_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ecualizador_JPanelLayout.createSequentialGroup()
                                .addComponent(titulo_Preamp_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(ecualizador_JPanelLayout.createSequentialGroup()
                                .addComponent(preset_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))
                        .addGroup(ecualizador_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ecualizador_JPanelLayout.createSequentialGroup()
                                .addComponent(preamp_JSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(preamp_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(presets_JComboBox, 0, 262, Short.MAX_VALUE)))
                    .addComponent(bandas_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ecualizador_JPanelLayout.setVerticalGroup(
            ecualizador_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ecualizador_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bandas_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ecualizador_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titulo_Preamp_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preamp_JSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preamp_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ecualizador_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(presets_JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preset_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        controles_JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/control.png")), ecualizador_JPanel); // NOI18N

        informacion_Archivo_JPanel.setOpaque(false);

        genero_JLabel.setFont(new java.awt.Font("Gadugi", 0, 15)); // NOI18N
        genero_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        genero_JLabel.setMaximumSize(new java.awt.Dimension(51, 45));
        genero_JLabel.setMinimumSize(new java.awt.Dimension(51, 45));
        genero_JLabel.setPreferredSize(new java.awt.Dimension(51, 55));

        informacion_Archivo_JLabel.setFont(new java.awt.Font("Gadugi", 0, 15)); // NOI18N
        informacion_Archivo_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        informacion_Archivo_JLabel.setMaximumSize(new java.awt.Dimension(51, 45));
        informacion_Archivo_JLabel.setMinimumSize(new java.awt.Dimension(51, 45));
        informacion_Archivo_JLabel.setPreferredSize(new java.awt.Dimension(51, 55));

        anio_JLabel.setFont(new java.awt.Font("Gadugi", 0, 15)); // NOI18N
        anio_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        anio_JLabel.setMaximumSize(new java.awt.Dimension(51, 45));
        anio_JLabel.setMinimumSize(new java.awt.Dimension(51, 45));
        anio_JLabel.setPreferredSize(new java.awt.Dimension(51, 55));

        letras_JScrollPane.setBorder(null);
        letras_JScrollPane.setOpaque(false);

        letras_JTextPane.setEditable(false);
        letras_JTextPane.setBorder(null);
        letras_JTextPane.setFont(new java.awt.Font("Gadugi", 0, 15)); // NOI18N
        letras_JTextPane.setOpaque(false);
        letras_JScrollPane.setViewportView(letras_JTextPane);

        javax.swing.GroupLayout informacion_Archivo_JPanelLayout = new javax.swing.GroupLayout(informacion_Archivo_JPanel);
        informacion_Archivo_JPanel.setLayout(informacion_Archivo_JPanelLayout);
        informacion_Archivo_JPanelLayout.setHorizontalGroup(
            informacion_Archivo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informacion_Archivo_JPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(informacion_Archivo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(letras_JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(informacion_Archivo_JPanelLayout.createSequentialGroup()
                        .addComponent(anio_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(informacion_Archivo_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(informacion_Archivo_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(genero_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        informacion_Archivo_JPanelLayout.setVerticalGroup(
            informacion_Archivo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacion_Archivo_JPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(genero_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informacion_Archivo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(informacion_Archivo_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anio_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(letras_JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        controles_JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/archivo-de-musica.png")), informacion_Archivo_JPanel); // NOI18N

        titulo_JLabel.setBackground(new java.awt.Color(0, 0, 0));
        titulo_JLabel.setFont(new java.awt.Font("Gadugi", 1, 20)); // NOI18N
        titulo_JLabel.setForeground(java.awt.Color.white);
        titulo_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/cd.png"))); // NOI18N
        titulo_JLabel.setText("T√≠tulo");
        titulo_JLabel.setToolTipText("");
        titulo_JLabel.setFocusable(false);
        titulo_JLabel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        titulo_JLabel.setMinimumSize(new java.awt.Dimension(359, 35));
        titulo_JLabel.setPreferredSize(new java.awt.Dimension(359, 35));
        ((ImageIcon)titulo_JLabel.getIcon()).getImage().flush();

        duracion_Total_JLabel.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        duracion_Total_JLabel.setForeground(new java.awt.Color(104, 194, 232));
        duracion_Total_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        duracion_Total_JLabel.setText("00:00:00");
        duracion_Total_JLabel.setFocusable(false);
        duracion_Total_JLabel.setMaximumSize(new java.awt.Dimension(56, 35));
        duracion_Total_JLabel.setMinimumSize(new java.awt.Dimension(56, 35));

        artista_JLabel.setBackground(new java.awt.Color(0, 0, 0));
        artista_JLabel.setFont(new java.awt.Font("Gadugi", 1, 20)); // NOI18N
        artista_JLabel.setForeground(java.awt.Color.white);
        artista_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        artista_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/broadcaster.png"))); // NOI18N
        artista_JLabel.setText("Artista");
        artista_JLabel.setToolTipText("");
        artista_JLabel.setFocusable(false);
        artista_JLabel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        artista_JLabel.setMinimumSize(new java.awt.Dimension(359, 35));
        artista_JLabel.setName(""); // NOI18N
        artista_JLabel.setPreferredSize(new java.awt.Dimension(359, 35));
        ((ImageIcon)artista_JLabel.getIcon()).getImage().flush();

        album_JLabel.setBackground(new java.awt.Color(0, 0, 0));
        album_JLabel.setFont(new java.awt.Font("Gadugi", 1, 20)); // NOI18N
        album_JLabel.setForeground(java.awt.Color.white);
        album_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        album_JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/music-album.png"))); // NOI18N
        album_JLabel.setText("√Ålbum");
        album_JLabel.setToolTipText("");
        album_JLabel.setFocusable(false);
        album_JLabel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        album_JLabel.setMinimumSize(new java.awt.Dimension(359, 35));
        album_JLabel.setName(""); // NOI18N
        album_JLabel.setPreferredSize(new java.awt.Dimension(359, 35));
        ((ImageIcon)album_JLabel.getIcon()).getImage().flush();

        progreso_JLabel.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        progreso_JLabel.setForeground(new java.awt.Color(104, 194, 232));
        progreso_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        progreso_JLabel.setText("00:00:00");
        progreso_JLabel.setFocusable(false);
        progreso_JLabel.setMaximumSize(new java.awt.Dimension(56, 35));
        progreso_JLabel.setMinimumSize(new java.awt.Dimension(56, 35));

        progreso_JSlider.setBackground(new java.awt.Color(14, 30, 64));
        progreso_JSlider.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        progreso_JSlider.setForeground(new java.awt.Color(104, 194, 232));
        progreso_JSlider.setMaximum(2147483647);
        progreso_JSlider.setValue(0);
        progreso_JSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        progreso_JSlider.setEnabled(false);
        progreso_JSlider.setFocusable(false);
        progreso_JSlider.setMaximumSize(new java.awt.Dimension(32767, 17));
        progreso_JSlider.setMinimumSize(new java.awt.Dimension(664, 17));
        progreso_JSlider.setPreferredSize(new java.awt.Dimension(674, 17));
        progreso_JSlider.setValueIsAdjusting(true);

        javax.swing.GroupLayout controles_JPanelLayout = new javax.swing.GroupLayout(controles_JPanel);
        controles_JPanel.setLayout(controles_JPanelLayout);
        controles_JPanelLayout.setHorizontalGroup(
            controles_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controles_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controles_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(titulo_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(artista_JLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(album_JLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, controles_JPanelLayout.createSequentialGroup()
                        .addComponent(progreso_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progreso_JSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duracion_Total_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(controles_JTabbedPane, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controles_JPanelLayout.setVerticalGroup(
            controles_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controles_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(artista_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(album_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(controles_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progreso_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(duracion_Total_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progreso_JSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(controles_JTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        controles_JTabbedPane.getAccessibleContext().setAccessibleName("OpenFiles");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imagen_Arte_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(controles_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imagen_Arte_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controles_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
      
    /**Sets all available presets*/
    public void Establecer_Presets_Ecualizador(){
        
        Iterator<Entry<String,Equalizer>> iterador = mapa_presets.entrySet().iterator();
        
        while(iterador.hasNext()){
            Entry<String,Equalizer> entrada = iterador.next();
            presets_JComboBox.addItem(entrada.getKey());
        }
        
        presets_JComboBox.setSelectedItem("Flat");
    }
    
    /**Stablish all ecualizador bands from the audio list media player ecualizador*/
    private void Establecer_Amperajes(){
        
        int amp0 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(0);
        int amp1 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(1);
        int amp2 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(2);
        int amp3 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(3);
        int amp4 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(4);
        int amp5 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(5);
        int amp6 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(6);
        int amp7 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(7);
        int amp8 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(8);
        int amp9 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(9);
        int preamp = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().preamp();

        banda0_JSlider.setValue(amp0);
        banda1_JSlider.setValue(amp1);
        banda2_JSlider.setValue(amp2);
        banda3_JSlider.setValue(amp3);
        banda4_JSlider.setValue(amp4);
        banda5_JSlider.setValue(amp5);
        banda6_JSlider.setValue(amp6);
        banda7_JSlider.setValue(amp7);
        banda8_JSlider.setValue(amp8);
        banda9_JSlider.setValue(amp9);
        preamp_JSlider.setValue(preamp);

        banda0_JLabel.setText(String.valueOf(amp0));
        banda1_JLabel.setText(String.valueOf(amp1));
        banda2_JLabel.setText(String.valueOf(amp2));
        banda3_JLabel.setText(String.valueOf(amp3));
        banda4_JLabel.setText(String.valueOf(amp4));
        banda5_JLabel.setText(String.valueOf(amp5));
        banda6_JLabel.setText(String.valueOf(amp6));
        banda7_JLabel.setText(String.valueOf(amp7));
        banda8_JLabel.setText(String.valueOf(amp8));
        banda9_JLabel.setText(String.valueOf(amp9));
        preamp_JLabel.setText(String.valueOf(preamp));
    }

    private void subir_Volumen_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subir_Volumen_JLabelMouseClicked
        // TODO add your handling code here:
        int volumen;
        if(SwingUtilities.isLeftMouseButton(evt)){
            volumen = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().volume();
            volumen+=10;
            if(volumen <= 100){
                volumen_JSlider.setValue(volumen);
            }
        }
    }//GEN-LAST:event_subir_Volumen_JLabelMouseClicked

    private void bajar_Volumen_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bajar_Volumen_JLabelMouseClicked
        // TODO add your handling code here:
        int volumen;
        if(SwingUtilities.isLeftMouseButton(evt)){
            volumen = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().volume();
            volumen-=10;
            if(volumen >= 0){
                volumen_JSlider.setValue(volumen);
            }
        }
    }//GEN-LAST:event_bajar_Volumen_JLabelMouseClicked

    private void subir_Rate_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subir_Rate_JLabelMouseClicked
        // TODO add your handling code here:
        float rate;
        if(SwingUtilities.isLeftMouseButton(evt)){
            rate = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().rate();
            rate += 0.1f;
            if (rate <= 1.5f) {
                rate = rate * 100;
                rate_JSlider.setValue((int)rate);
            }
        }

    }//GEN-LAST:event_subir_Rate_JLabelMouseClicked

    private void bajar_Rate_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bajar_Rate_JLabelMouseClicked
        // TODO add your handling code here:
        float rate;
        if (SwingUtilities.isLeftMouseButton(evt)) {
            rate = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().rate();
            rate -= 0.1f;
            if (rate >= 0.5f) {
                rate = rate * 100;
                rate_JSlider.setValue((int)rate);
            }
        }
    }//GEN-LAST:event_bajar_Rate_JLabelMouseClicked

    private void siguiente_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_siguiente_JLabelMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Siguiente_Pista();
        }
    }//GEN-LAST:event_siguiente_JLabelMouseClicked

    private void play_Pausa_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_play_Pausa_JLabelMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Establecer_Reproduccion_Pausa();
        }
    }//GEN-LAST:event_play_Pausa_JLabelMouseClicked

    private void anterior_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anterior_JLabelMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Anterior_Pista();
        }
    }//GEN-LAST:event_anterior_JLabelMouseClicked

    private void alto_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alto_JLabelMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Establecer_Alto();
            Limpiar_Informacion();
        }
    }//GEN-LAST:event_alto_JLabelMouseClicked

    private void abrir_Carpeta_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abrir_Carpeta_JLabelMouseClicked
        // TODO add your handling code here:
        JFileChooser escogedor_Archivos;
        int resultado;
        File folder;
        FileFilter filtro;
        File[] archivos_Abiertos;
        if(SwingUtilities.isLeftMouseButton(evt)){

            escogedor_Archivos = new JFileChooser();
            escogedor_Archivos.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            escogedor_Archivos.setApproveButtonText("Abrir Carpeta");
            resultado = escogedor_Archivos.showOpenDialog(this);

            if (resultado == JFileChooser.APPROVE_OPTION) {
                folder = escogedor_Archivos.getSelectedFile();
                if(folder != null){
                    filtro = (File rutaname) -> {
                        if(rutaname != null){
                            return rutaname.getName().endsWith(".mp3") ||
                                    rutaname.getName().endsWith(".flac") ||
                                    rutaname.getName().endsWith(".aac") ||
                                    rutaname.getName().endsWith(".wma") ||
                                    rutaname.getName().endsWith(".ogg");
                        }
                        return false;
                    };

                   archivos_Abiertos = folder.listFiles(filtro);
                    if(archivos_Abiertos.length > 0){
                        rutas.clear();
                        bandera_Indice_Cero = false;
                        bandera_Siguiente_Pista = false;
                        bandera_Anterior_Pista = true;
                        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().stop();
                        componente_Reproducto_Lista_Audio.mediaListPlayer().list().media().clear();
                        lista_Reproduccion_JPanel.removeAll();
                        int idx = 0;
                        
                        File archivos_Abierto;
                        String ruta;
                        String nombre_Archivo;
                        Entrada_Lista_Reproduccion_General_Panel entrada_Lista_Reproduccion_General_Panel;
                        
                        for(int i = 0; i < archivos_Abiertos.length;i++){
                            archivos_Abierto = archivos_Abiertos[i];
                            ruta = archivos_Abierto.getAbsolutePath();
                            nombre_Archivo = archivos_Abierto.getName();
                            entrada_Lista_Reproduccion_General_Panel = new Entrada_Lista_Reproduccion_General_Panel(nombre_Archivo,idx);
                            lista_Reproduccion_JPanel.add(entrada_Lista_Reproduccion_General_Panel);
                            rutas.push_back(ruta);
                            componente_Reproducto_Lista_Audio.mediaListPlayer().list().media().add(ruta);
                            idx++;
                        }
                        
                        nodo_actual = rutas.front();
                        indice = 0;
                        Cargar_Metadatos();
                        volumen_JSlider.setEnabled(true);
                        volumen_JSlider.setValue(100);
                        rate_JSlider.setEnabled(true);
                        volumen_JSlider.setValue(100);
                        subir_Volumen_JLabel.setEnabled(true);
                        bajar_Volumen_JLabel.setEnabled(true);
                        subir_Rate_JLabel.setEnabled(true);
                        bajar_Rate_JLabel.setEnabled(true);
                        siguiente_JLabel.setEnabled(true);
                        anterior_JLabel.setEnabled(true);
                        alto_JLabel.setEnabled(true);
                        play_Pausa_JLabel.setEnabled(true);
                        progreso_JSlider.setEnabled(true);
                        bandas_JPanel.setEnabled(true);
                        preamp_JSlider.setEnabled(true);
                        presets_JComboBox.setEnabled(true);
                        
                        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().play();
                    }
                }
            }
        }
        
        System.gc();
    }//GEN-LAST:event_abrir_Carpeta_JLabelMouseClicked

    @SuppressWarnings("null")
    private void abrir_Archivos_JLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abrir_Archivos_JLabelMouseClicked

        // TODO add your handling code here:
        JFileChooser escogedor_Archivos;
        FileNameExtensionFilter filtro;
        int resultado;
        File[] archivos_Abiertos;
        if(SwingUtilities.isLeftMouseButton(evt)){

            escogedor_Archivos = new JFileChooser();
            filtro = new FileNameExtensionFilter("Archivos De M√∫sica", "mp3", "flac", "aac", "wav","ogg");
            escogedor_Archivos.addChoosableFileFilter(filtro);
            escogedor_Archivos.setFileSelectionMode(JFileChooser.FILES_ONLY);
            escogedor_Archivos.setAcceptAllFileFilterUsed(true);
            escogedor_Archivos.setApproveButtonText("Reproducir Archivos");
            escogedor_Archivos.setMultiSelectionEnabled(true);
            resultado = escogedor_Archivos.showOpenDialog(this);

            if (resultado == JFileChooser.APPROVE_OPTION) {
                archivos_Abiertos = escogedor_Archivos.getSelectedFiles();
                if(archivos_Abiertos != null){
                    
                    if(archivos_Abiertos.length > 0){
                        int indice_auxiliar = 0;
                        rutas.clear();
                        bandera_Siguiente_Pista = false;
                        bandera_Anterior_Pista = true;
                        bandera_Indice_Cero = false;
                        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().stop();
                        componente_Reproducto_Lista_Audio.mediaListPlayer().list().media().clear();
                        lista_Reproduccion_JPanel.removeAll();

                        File archivos_Abierto;
                        String ruta;
                        String nombre_Archivo;
                        Entrada_Lista_Reproduccion_General_Panel entrada_Lista_Reproduccion_General_Panel;

                        for (int i = 0; i < archivos_Abiertos.length; i++) {
                            archivos_Abierto = archivos_Abiertos[i];
                            ruta = archivos_Abierto.getAbsolutePath();
                            nombre_Archivo = archivos_Abierto.getName();
                            entrada_Lista_Reproduccion_General_Panel = new Entrada_Lista_Reproduccion_General_Panel(nombre_Archivo, indice_auxiliar);
                            lista_Reproduccion_JPanel.add(entrada_Lista_Reproduccion_General_Panel);
                            rutas.push_back(ruta);
                            componente_Reproducto_Lista_Audio.mediaListPlayer().list().media().add(ruta);
                            indice_auxiliar++;
                        }

                        nodo_actual = rutas.front();
                        indice = 0;
                        Cargar_Metadatos();
                        volumen_JSlider.setEnabled(true);
                        volumen_JSlider.setValue(100);
                        rate_JSlider.setEnabled(true);
                        volumen_JSlider.setValue(100);
                        subir_Volumen_JLabel.setEnabled(true);
                        progreso_JSlider.setEnabled(true);
                        bajar_Volumen_JLabel.setEnabled(true);
                        subir_Rate_JLabel.setEnabled(true);
                        bajar_Rate_JLabel.setEnabled(true);
                        siguiente_JLabel.setEnabled(true);
                        anterior_JLabel.setEnabled(true);
                        alto_JLabel.setEnabled(true);
                        play_Pausa_JLabel.setEnabled(true);
                        bandas_JPanel.setEnabled(true);
                        preamp_JSlider.setEnabled(true);
                        presets_JComboBox.setEnabled(true);
                        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().play();
                    }
                    
                }
            }
        }
    }//GEN-LAST:event_abrir_Archivos_JLabelMouseClicked

    private void banda6_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda6_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda6_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(6, valor);
        String valor_string = String.valueOf(valor);
        banda6_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda6_JSliderStateChanged

    private void banda1_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda1_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda1_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(1, valor);
        String valor_string = String.valueOf(valor);
        banda1_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda1_JSliderStateChanged

    private void banda2_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda2_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda2_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(2, valor);
        String valor_string = String.valueOf(valor);
        banda2_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda2_JSliderStateChanged

    private void banda3_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda3_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda3_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(3, valor);
        String valor_string = String.valueOf(valor);
        banda3_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda3_JSliderStateChanged

    private void banda4_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda4_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda4_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(4, valor);
        String valor_string = String.valueOf(valor);
        banda4_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda4_JSliderStateChanged

    private void banda5_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda5_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda5_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(5, valor);
        String valor_string = String.valueOf(valor);
        banda5_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda5_JSliderStateChanged

    private void banda0_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda0_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda0_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(0, valor);
        String valor_string = String.valueOf(valor);
        banda0_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda0_JSliderStateChanged

    private void banda7_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda7_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda7_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(7, valor);
        String valor_string = String.valueOf(valor);
        banda7_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda7_JSliderStateChanged

    private void banda8_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda8_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda8_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(8, valor);
        String valor_string = String.valueOf(valor);
        banda8_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda8_JSliderStateChanged

    private void banda9_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_banda9_JSliderStateChanged
        // TODO add your handling code here:
        int valor = banda9_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(9, valor);
        String valor_string = String.valueOf(valor);
        banda9_JLabel.setText(valor_string);
    }//GEN-LAST:event_banda9_JSliderStateChanged

    private void preamp_JSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_preamp_JSliderStateChanged
        // TODO add your handling code here:
        int valor = preamp_JSlider.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setPreamp(valor);
        String valor_string = String.valueOf(valor);
        preamp_JLabel.setText(valor_string);
    }//GEN-LAST:event_preamp_JSliderStateChanged

    private void presets_JComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_presets_JComboBoxItemStateChanged
        // TODO add your handling code here:
        
        @SuppressWarnings("element-type-mismatch")
        Equalizer ecualizador = mapa_presets.get(presets_JComboBox.getSelectedItem());
        if(ecualizador != null){
            componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setEqualizer(ecualizador);

            int amp0 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(0);
            int amp1 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(1);
            int amp2 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(2);
            int amp3 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(3);
            int amp4 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(4);
            int amp5 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(5);
            int amp6 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(6);
            int amp7 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(7);
            int amp8 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(8);
            int amp9 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(9);
            int preamp = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().preamp();

            banda0_JSlider.setValue(amp0);
            banda1_JSlider.setValue(amp1);
            banda2_JSlider.setValue(amp2);
            banda3_JSlider.setValue(amp3);
            banda4_JSlider.setValue(amp4);
            banda5_JSlider.setValue(amp5);
            banda6_JSlider.setValue(amp6);
            banda7_JSlider.setValue(amp7);
            banda8_JSlider.setValue(amp8);
            banda9_JSlider.setValue(amp9);
            preamp_JSlider.setValue(preamp);

            banda0_JLabel.setText(String.valueOf(amp0));
            banda1_JLabel.setText(String.valueOf(amp1));
            banda2_JLabel.setText(String.valueOf(amp2));
            banda3_JLabel.setText(String.valueOf(amp3));
            banda4_JLabel.setText(String.valueOf(amp4));
            banda5_JLabel.setText(String.valueOf(amp5));
            banda6_JLabel.setText(String.valueOf(amp6));
            banda7_JLabel.setText(String.valueOf(amp7));
            banda8_JLabel.setText(String.valueOf(amp8));
            banda9_JLabel.setText(String.valueOf(amp9));
            preamp_JLabel.setText(String.valueOf(preamp));

        }
        
    }//GEN-LAST:event_presets_JComboBoxItemStateChanged

    /**Sets Play And Pause Functions*/
    private void Establecer_Reproduccion_Pausa() {
        
        if (componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() != State.STOPPED && !rutas.is_empty()) {

            if (componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() == State.PLAYING) {
                componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setPause(true);
                play_Pausa_JLabel.setIcon(icono_Play);
            } else if (componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() == State.PAUSED) {
                componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setPause(false);
                play_Pausa_JLabel.setIcon(icono_Pause);
            }
        }
    }
    
    /**Sets Next Media Function*/
    private void Siguiente_Pista(){
        if(nodo_actual != null){
            if(nodo_actual.has_next()){
                componente_Reproducto_Lista_Audio.mediaListPlayer().controls().playNext();
            }
        }
    }
    
    /**Sets Previous Media Function*/
    private void Anterior_Pista(){
        if(nodo_actual != null){
            if(nodo_actual.has_previous()){
                bandera_Anterior_Pista = true;
                bandera_Siguiente_Pista = false;
                componente_Reproducto_Lista_Audio.mediaListPlayer().controls().playPrevious();
            }
        }
    }

    /**Sets Stop Function*/
    private void Establecer_Alto() {
        if (componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() != State.STOPPED && !rutas.is_empty()) {
            componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().stop();
        }
    }

    /**Cleans Screen Information*/
    private void Limpiar_Informacion(){
        titulo_JLabel.setText("Titulo");
        artista_JLabel.setText("Artista");
        album_JLabel.setText("Album");
        imagen_Arte_JLabel.setIcon(null);
        progreso_JSlider.setValue(0);
        progreso_JLabel.setText("00:00:00");
        duracion_Total_JLabel.setText("00:00:00");
        progreso_JSlider.setEnabled(false);
        play_Pausa_JLabel.setIcon(icono_Play);
        volumen_JSlider.setEnabled(false);
        volumen_JSlider.setValue(100);
        rate_JSlider.setEnabled(false);
        volumen_JSlider.setValue(100);
        subir_Volumen_JLabel.setEnabled(false);
        bajar_Volumen_JLabel.setEnabled(false);
        subir_Rate_JLabel.setEnabled(false);
        bajar_Rate_JLabel.setEnabled(false);
        siguiente_JLabel.setEnabled(false);
        anterior_JLabel.setEnabled(false);
        alto_JLabel.setEnabled(false);
        play_Pausa_JLabel.setEnabled(false);
        bandas_JPanel.setEnabled(false);
        preamp_JSlider.setEnabled(false);
        presets_JComboBox.setEnabled(false);
        lista_Reproduccion_JPanel.removeAll();
        System.gc();
    }

    public static void Play_Indice(int _indice){
        if(_indice > 0){
            indice = (_indice-1);
            nodo_actual = rutas.node(indice);
            componente_Reproducto_Lista_Audio.mediaListPlayer().controls().play(_indice);
            bandera_Indice_Cero = false;
        } else{
            indice = 0;
            bandera_Indice_Cero = true;
            componente_Reproducto_Lista_Audio.mediaListPlayer().controls().play(0);
        }
    }  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel abrir_Archivos_JLabel;
    private javax.swing.JPanel abrir_Archivos_JPanel;
    private javax.swing.JLabel abrir_Carpeta_JLabel;
    private static javax.swing.JLabel album_JLabel;
    private javax.swing.JLabel alto_JLabel;
    public javax.swing.JLabel anio_JLabel;
    private javax.swing.JLabel anterior_JLabel;
    private static javax.swing.JLabel artista_JLabel;
    private javax.swing.JLabel bajar_Rate_JLabel;
    private javax.swing.JLabel bajar_Volumen_JLabel;
    private javax.swing.JLabel banda0_JLabel;
    private javax.swing.JSlider banda0_JSlider;
    private javax.swing.JLabel banda1_JLabel;
    private javax.swing.JSlider banda1_JSlider;
    private javax.swing.JLabel banda2_JLabel;
    private javax.swing.JSlider banda2_JSlider;
    private javax.swing.JLabel banda3_JLabel;
    private javax.swing.JSlider banda3_JSlider;
    private javax.swing.JLabel banda4_JLabel;
    private javax.swing.JSlider banda4_JSlider;
    private javax.swing.JLabel banda5_JLabel;
    private javax.swing.JSlider banda5_JSlider;
    private javax.swing.JLabel banda6_JLabel;
    private javax.swing.JSlider banda6_JSlider;
    private javax.swing.JLabel banda7_JLabel;
    private javax.swing.JSlider banda7_JSlider;
    private javax.swing.JLabel banda8_JLabel;
    private javax.swing.JSlider banda8_JSlider;
    private javax.swing.JLabel banda9_JLabel;
    private javax.swing.JSlider banda9_JSlider;
    private javax.swing.JPanel bandas_JPanel;
    private javax.swing.JPanel controles_Audio_JPanel;
    private javax.swing.JPanel controles_JPanel;
    private javax.swing.JTabbedPane controles_JTabbedPane;
    private javax.swing.JPanel controles_Reproduccion_JPanel;
    private javax.swing.JLabel duracion_Total_JLabel;
    private javax.swing.JPanel ecualizador_JPanel;
    public javax.swing.JLabel genero_JLabel;
    private static javax.swing.JLabel imagen_Arte_JLabel;
    public javax.swing.JLabel informacion_Archivo_JLabel;
    private javax.swing.JPanel informacion_Archivo_JPanel;
    private javax.swing.JScrollPane letras_JScrollPane;
    public javax.swing.JTextPane letras_JTextPane;
    private javax.swing.JPanel lista_Reproduccion_JPanel;
    private javax.swing.JScrollPane lista_Reproduccion_JScrollPane;
    public javax.swing.JLabel play_Pausa_JLabel;
    private javax.swing.JLabel preamp_JLabel;
    private javax.swing.JSlider preamp_JSlider;
    private javax.swing.JLabel preset_JLabel;
    private javax.swing.JComboBox<String> presets_JComboBox;
    private javax.swing.JLabel progreso_JLabel;
    private javax.swing.JSlider progreso_JSlider;
    private static javax.swing.JSlider rate_JSlider;
    private javax.swing.JLabel siguiente_JLabel;
    private javax.swing.JLabel subir_Rate_JLabel;
    private javax.swing.JLabel subir_Volumen_JLabel;
    private static javax.swing.JLabel titulo_JLabel;
    private javax.swing.JLabel titulo_Preamp_JLabel;
    private static javax.swing.JSlider volumen_JSlider;
    // End of variables declaration//GEN-END:variables

    @Override
    public void Iniciar_Componentes() {
        
        bandera_Mouse_Auxiliar = true;
        bandera_Indice_Cero = false;
        rutas = new Lista<>();
        bandera_Siguiente_Pista = bandera_Anterior_Pista = false;
        MediaPlayerFactory media_player_Factory = new MediaPlayerFactory();
        componente_Reproducto_Lista_Audio = new AudioListPlayerComponent(media_player_Factory);
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().setMediaPlayer(media_player_Factory.mediaPlayers().newMediaPlayer());
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().setEqualizer(media_player_Factory.equalizer().newEqualizer("Flat"));
        mapa_presets = media_player_Factory.equalizer().allPresetEqualizers();
        icono_Play = new ImageIcon(getClass().getResource("/recursos/iconos/play-button.png"));
        icono_Pause = new ImageIcon(getClass().getResource("/recursos/iconos/pause.png"));
        this.play_Pausa_JLabel.setIcon(icono_Play);
        
        icono_Play.getImage().flush();
        icono_Pause.getImage().flush();
        
        letras_JScrollPane.getViewport().setOpaque(false);
        lista_Reproduccion_JScrollPane.getViewport().setOpaque(false);
        letras_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);
        letras_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        lista_Reproduccion_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        lista_Reproduccion_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);
       
        Establecer_Eventos_Reproductor();
        
        Establecer_Presets_Ecualizador();
        
        Establecer_Amperajes();
    }
    
    @Override
    public void Colorear_Componentes() {
        
        this.setBackground(primer_Color);
        controles_JPanel.setBackground(segundo_Color);
        
        Color transparente = new Color(0,0,0,0);
        controles_JTabbedPane.setBackground(transparente);
        Component[] componentes = this.getComponents();
        Component componente;

        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            componente.setForeground(segundo_Color_Fuente);
        }

        rate_JSlider.setForeground(segundo_Color_Fuente);
        volumen_JSlider.setForeground(segundo_Color_Fuente);
        titulo_JLabel.setForeground(segundo_Color_Fuente);
        album_JLabel.setForeground(segundo_Color_Fuente);
        artista_JLabel.setForeground(segundo_Color_Fuente);
        progreso_JLabel.setForeground(segundo_Color_Fuente);
        duracion_Total_JLabel.setForeground(segundo_Color_Fuente);
        progreso_JSlider.setForeground(segundo_Color_Fuente);

        componentes = informacion_Archivo_JPanel.getComponents();

        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            componente.setForeground(segundo_Color_Fuente);
        }

        componentes = ecualizador_JPanel.getComponents();

        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            componente.setForeground(segundo_Color_Fuente);
        }

        componentes = bandas_JPanel.getComponents();

        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            componente.setBackground(primer_Color);
            componente.setForeground(segundo_Color_Fuente);
        }
        
        preamp_JSlider.setBackground(segundo_Color_Fuente);

        componentes = lista_Reproduccion_JPanel.getComponents();

        Entrada_Lista_Reproduccion_General_Panel entrada_Lista_Reproduccion_General_Panel;
        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            entrada_Lista_Reproduccion_General_Panel = (Entrada_Lista_Reproduccion_General_Panel)componente;
            entrada_Lista_Reproduccion_General_Panel.Colores(segundo_Color_Fuente, segundo_Color);
        }
        
        Font gadugi = new Font("Gadugi", 1, 16);

        genero_JLabel.setBorder(javax.swing.BorderFactory.createTitledBorder
        (javax.swing.BorderFactory.createLineBorder(segundo_Color_Fuente), "G√©nero", 
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
                javax.swing.border.TitledBorder.DEFAULT_POSITION, 
                gadugi,segundo_Color_Fuente)); // NOI18N
        
        bandas_JPanel.setBorder(javax.swing.BorderFactory.createTitledBorder
        (javax.swing.BorderFactory.createLineBorder(segundo_Color_Fuente), "Bandas", 
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
                javax.swing.border.TitledBorder.DEFAULT_POSITION, 
                gadugi,segundo_Color_Fuente));
        
        informacion_Archivo_JLabel.setBorder(javax.swing.BorderFactory.createTitledBorder
        (javax.swing.BorderFactory.createLineBorder(segundo_Color_Fuente), "Media", 
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
                javax.swing.border.TitledBorder.DEFAULT_POSITION, 
                gadugi,segundo_Color_Fuente));
        
        anio_JLabel.setBorder(javax.swing.BorderFactory.createTitledBorder
        (javax.swing.BorderFactory.createLineBorder(segundo_Color_Fuente), "A√±o", 
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
                javax.swing.border.TitledBorder.DEFAULT_POSITION, 
                gadugi,segundo_Color_Fuente));
        
        letras_JTextPane.setBorder(javax.swing.BorderFactory.createTitledBorder
        (javax.swing.BorderFactory.createLineBorder(segundo_Color_Fuente), "Letras", 
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
                javax.swing.border.TitledBorder.DEFAULT_POSITION, 
                gadugi,segundo_Color_Fuente));
        
        presets_JComboBox.setForeground(segundo_Color_Fuente);
        presets_JComboBox.setBackground(segundo_Color);
        letras_JTextPane.setForeground(segundo_Color_Fuente);
    }
    
    
    @Override
    public void Establecer_Colores(Image image) {
       try {
            int maximo_auxiliar = 0;
            Lista_Pares<Integer, Color> lista_Colores = new Lista_Pares<>();
            PixelGrabber obtener_Pixeles = new PixelGrabber(image, 0, 0, -1, -1, false);
            int largo_Imagen = image.getWidth(null);
            int[] pixeles;
            int pixel,rojo,verde,azul,numero_Auxiliar,posicion;
            Color color;
            Par<Integer, Color> par;
            if (obtener_Pixeles.grabPixels()) {
                pixeles = (int[]) obtener_Pixeles.getPixels();
                for(int i = 0; i < pixeles.length; i++){
                    pixel = pixeles[i];
                    rojo = (pixel  & 0x00ff0000) >> 16;
                    verde = (pixel & 0x0000ff00) >> 8;
                    azul = pixel & 0x000000ff;
                    color = new Color(rojo,verde,azul);
                    par = lista_Colores.get_from_second(color);
            
                    if (par != null) { //existe
                        numero_Auxiliar = par.first()+ 1;
                        par.first(numero_Auxiliar);
                        if (numero_Auxiliar > maximo_auxiliar) {
                            primer_Color = color;
                            maximo_auxiliar = numero_Auxiliar;
                        }
                    } else {
                        lista_Colores.push_back(1, color);
                    }

                    i += CourseRoom.Random().nextInt(largo_Imagen+1) + largo_Imagen;
                }

                segundo_Color = primer_Color;
            
                int iteraciones = 0;
                if(lista_Colores.size() > 1){
                    
                    while(Math.abs(segundo_Color.getRGB() - primer_Color.getRGB()) < 3000000){
                        posicion = CourseRoom.Random().nextInt((int)lista_Colores.size()-1);
                        segundo_Color = lista_Colores.get(posicion).second();
                        iteraciones++;
                        if(iteraciones > 25){
                             while(primer_Color.getRGB() == segundo_Color.getRGB()){
                                posicion = CourseRoom.Random().nextInt((int)lista_Colores.size()-1);
                                segundo_Color = lista_Colores.get(posicion).second();
                            }
                             break;
                        }
                    }
                }
               
                rojo = segundo_Color.getRed();
                segundo_Color_Fuente = (rojo >= 155) ? Color.BLACK : Color.WHITE;
                lista_Colores.clear();
                
                Colorear_Componentes();
                
            }
            
        } catch (InterruptedException ex) {
            
        }
    }
    
    @Override
    public void Limpiar()  {
        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().stop();
        componente_Reproducto_Lista_Audio.release();
        icono_Play.getImage().flush();
        icono_Pause.getImage().flush();
        rutas.clear();
    }

    @Override
    public void Establecer_Eventos_Reproductor() {
         rate_JSlider.addChangeListener((ChangeEvent e) -> {
            Object fuente = e.getSource();
            float rate = (float)(((JSlider) fuente).getValue() / 100f);
            componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setRate(rate); 
        });
        
        rate_JSlider.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(SwingUtilities.isRightMouseButton(e)){
                    rate_JSlider.setValue(100);
                    componente_Reproducto_Lista_Audio.mediaPlayer().controls().setRate(1); 
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
        
        volumen_JSlider.addChangeListener((ChangeEvent e) -> {
            Object fuente = e.getSource();
            int volumen = ((JSlider) fuente).getValue();
            componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().setVolume(volumen);
        });

        volumen_JSlider.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    volumen_JSlider.setValue(100);
                    componente_Reproducto_Lista_Audio.mediaPlayer().audio().setVolume(100);
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
        
        
        //Listener para el slider progress
        progreso_JSlider.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
               
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if(SwingUtilities.isLeftMouseButton(e)){
                    bandera_Mouse_Auxiliar = false;
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if(!bandera_Mouse_Auxiliar){
                  bandera_Mouse_Auxiliar = true;
                }
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
            
        });

        //Control para cambiar a posicion de reproduccion
        progreso_JSlider.addChangeListener((ChangeEvent e) -> {
            if (!bandera_Mouse_Auxiliar) {
                Object fuente = e.getSource();
                componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setTime(((JSlider) fuente).getValue());
            }
        });
        
        componente_Reproducto_Lista_Audio.mediaListPlayer().events().addMediaListPlayerEventListener(new MediaListPlayerEventListener() {
            @Override
            public void mediaListPlayerFinished(MediaListPlayer mlp) {
                Limpiar_Informacion();
            }

            @Override
            public void nextItem(MediaListPlayer mlp, MediaRef mr) {
                bandera_Siguiente_Pista = true;
                bandera_Anterior_Pista = false;
            }

            @Override
            public void stopped(MediaListPlayer mlp) {
                Limpiar_Informacion();
            }
        });
       
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().events().addMediaPlayerEventListener(new MediaPlayerEventListener() {
            String segundos;
            int tiempo, valor, longitud_Real;
            long longitud;
            
            @Override
            public void mediaChanged(MediaPlayer mp, MediaRef mr) {
                if (bandera_Siguiente_Pista) {
                    if (nodo_actual.has_next()) {
                        if (!bandera_Indice_Cero) {
                            nodo_actual = nodo_actual.next();
                            indice++;
                        } else {
                            nodo_actual = rutas.front();
                            bandera_Indice_Cero = false;
                        }
                        Cargar_Metadatos();
                        
                        bandera_Siguiente_Pista = true;
                    }
                }
                if (bandera_Anterior_Pista) {
                    if (nodo_actual.has_previous()) {
                        indice--;
                        nodo_actual = nodo_actual.previous();
                        Cargar_Metadatos();
                    }
                }
            }

            @Override
            public void opening(MediaPlayer mp) {
            }

            @Override
            public void buffering(MediaPlayer mp, float f) {
                
            }

            @Override
            public void playing(MediaPlayer mp) {
                
            }

            @Override
            public void paused(MediaPlayer mp) {
                
            }

            @Override
            public void stopped(MediaPlayer mp) {
                
            }

            @Override
            public void forward(MediaPlayer mp) {
                
            }

            @Override
            public void backward(MediaPlayer mp) {
                
            }

            @Override
            public void finished(MediaPlayer mp) {
            }

            @Override
            public void timeChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void positionChanged(MediaPlayer mp, float f) {
               
                if(bandera_Mouse_Auxiliar){
                    if(componente_Reproducto_Lista_Audio != null){
                        tiempo = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().time();
                        valor = tiempo / 1000;
                        progreso_JSlider.setValue(tiempo);
                        segundos = CourseRoom.Convertir_Segundos(valor);
                        progreso_JLabel.setText(segundos);
                    }
                    
                }
            }

            @Override
            public void seekableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void pausableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void titleChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void snapshotTaken(MediaPlayer mp, String string) {
                
            }

            @Override
            public void lengthChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void videoOutput(MediaPlayer mp, int i) {
                
            }

            @Override
            public void scrambledChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void elementaryStreamAdded(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamDeleted(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamSelected(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void corked(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void muted(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void volumeChanged(MediaPlayer mp, float f) {
                
            }

            @Override
            public void audioDeviceChanged(MediaPlayer mp, String string) {
                
            }

            @Override
            public void chapterChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void error(MediaPlayer mp) {
                
            }

            @Override
            public void mediaPlayerReady(MediaPlayer mp) {
                
                longitud = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().length();
                if(longitud < Integer.MAX_VALUE){
                    longitud_Real = (int)longitud;
                    progreso_JSlider.setMaximum(longitud_Real);
                    duracion_Total_JLabel.setText(CourseRoom.Convertir_Segundos(longitud_Real/1000));
                    play_Pausa_JLabel.setIcon(icono_Pause);
                    componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().setVolume(volumen_JSlider.getValue());
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Archivo Demasiado Grande","ERROR",JOptionPane.ERROR_MESSAGE);
                } 
            }
        });
    }
    
    @Override
    public void Cargar_Metadatos(){
        try {
            String mrl;
            File archivo_Leer = new File(nodo_actual.element());
            AudioFile archivo_Audio;
            Tag tag;
            
            if(archivo_Leer.exists()){      
               
                archivo_Audio = AudioFileIO.read(archivo_Leer);
                
                tag = archivo_Audio.getTag();
                String titulo = tag.getFirst(FieldKey.TITLE);
                String artista = tag.getFirst(FieldKey.ARTIST);
                String album = tag.getFirst(FieldKey.ALBUM);
                String genero = tag.getFirst(FieldKey.GENRE);
                String anio = tag.getFirst(FieldKey.YEAR);
                String informacion_archivo = 
                CourseRoom.Concatenar(archivo_Audio.getExt().toUpperCase()," Archivo - ",archivo_Audio.getAudioHeader().getBitRate()," kbps");
                String letras = tag.getFirst(FieldKey.LYRICS);
                if(titulo == null){
                    titulo = archivo_Leer.getName();
                }
                if(titulo.isEmpty()){
                    titulo = archivo_Leer.getName();
                }
                titulo_JLabel.setToolTipText(CourseRoom.Concatenar("<html><h3>Titulo: ",titulo,"</h3></html>"));
                artista_JLabel.setToolTipText(CourseRoom.Concatenar("<html><h3>Artista: ",artista,"</h3></html>"));
                album_JLabel.setToolTipText(CourseRoom.Concatenar("<html><h3>Album: ",album,"</h3></html>"));

                titulo_JLabel.setText(titulo);
                artista_JLabel.setText(artista);
                album_JLabel.setText(album);
                
                genero_JLabel.setText(genero);
                anio_JLabel.setText(anio);
                informacion_Archivo_JLabel.setText(informacion_archivo);
                letras_JTextPane.setText(letras);
                letras_JTextPane.setCaretPosition(0);

                Artwork arte = tag.getFirstArtwork();
                Entrada_Lista_Reproduccion_General_Panel entrada_Lista_Reproduccion_General_Panel = 
                        (Entrada_Lista_Reproduccion_General_Panel) lista_Reproduccion_JPanel.getComponent(indice);
                if(arte != null){
                    
                    Image imagen_Real = ((Image)arte.getImage());
                    if(imagen_Real != null){
                        imagen_Real = imagen_Real.getScaledInstance(500, 500, Image.SCALE_AREA_AVERAGING);
                        Establecer_Colores(imagen_Real);
                        ImageIcon cover = new ImageIcon(imagen_Real);
                        imagen_Arte_JLabel.setIcon(cover);
                        cover.getImage().flush();
                        imagen_Real.flush();
                    } 
                } 
                
                if (entrada_Lista_Reproduccion_General_Panel.Vacio()) {
                    entrada_Lista_Reproduccion_General_Panel.Titulo(titulo);
                    entrada_Lista_Reproduccion_General_Panel.Artista(artista);
                    entrada_Lista_Reproduccion_General_Panel.Album(album);
                }
                
                
            }else{
                mrl = nodo_actual.element();
                JOptionPane.showMessageDialog(this, mrl,"El Archivo No Se Encontr√≥",JOptionPane.ERROR_MESSAGE);
                rutas.remove(mrl);
                if((indice+1) < rutas.size()){
                    Siguiente_Pista();
                } else if((indice - 1) > 0){
                    Anterior_Pista();
                } else{
                    Establecer_Alto();
                }
            }
        } catch (CannotReadException | IOException | TagException | ReadOnlyFileException | InvalidAudioFrameException ex) {
            
        }
        
    }
    
}
