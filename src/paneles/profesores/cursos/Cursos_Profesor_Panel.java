/*
 * Copyright (C) 2022 LENOVO
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package paneles.profesores.cursos;

import javax.swing.JLayeredPane;
import clases.Celda_Renderer;
import datos.colecciones.Lista;
import datos.estructuras.Nodo;
import datos.interfaces.Componentes_Interface;
import datos.interfaces.Limpieza_Interface;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import courseroom.CourseRoom;
import java.awt.CardLayout;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import paneles.profesores.Tablero_Profesor_Panel;

/**
 *
 * @author LENOVO
 */
public class Cursos_Profesor_Panel extends JLayeredPane implements Limpieza_Interface, Componentes_Interface{

    private Lista<Curso_Profesor_Panel> buscar_Cursos_Lista;
    private Lista<Curso_Profesor_Panel> mostrar_Cursos_Actuales_Lista;
    
    private static DefaultTableModel modelo_Cursos_Actuales;
    
    private byte carta_Visible;
    private static int id_Curso_Actual;
    
    
    /**
     * Creates new form Cursos_Estudiante_Panel
     */
    public Cursos_Profesor_Panel() {
        initComponents();
        
        Iniciar_Componentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mostrar_Cursos_JPanel = new javax.swing.JPanel();
        contenido_Titulo_JPanel = new javax.swing.JPanel();
        titulo_JLabel = new javax.swing.JLabel();
        cursos_Actuales_JButton = new javax.swing.JButton();
        actualizar_JButton = new javax.swing.JButton();
        mostrar_Cursos_JLayeredPane = new javax.swing.JLayeredPane();
        mostrar_Cursos_Actuales_JScrollPane = new javax.swing.JScrollPane();
        mostrar_Cursos_Actuales_JTable = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1110, 630));
        setLayout(new java.awt.CardLayout());

        mostrar_Cursos_JPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        mostrar_Cursos_JPanel.setOpaque(false);
        mostrar_Cursos_JPanel.setPreferredSize(new java.awt.Dimension(1110, 630));

        contenido_Titulo_JPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        contenido_Titulo_JPanel.setMaximumSize(new java.awt.Dimension(32767, 68));
        contenido_Titulo_JPanel.setPreferredSize(new java.awt.Dimension(822, 68));

        titulo_JLabel.setFont(new java.awt.Font("Gadugi", 1, 48)); // NOI18N
        titulo_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        titulo_JLabel.setText("Cursos Creados");
        titulo_JLabel.setMaximumSize(new java.awt.Dimension(416, 84));
        titulo_JLabel.setMinimumSize(new java.awt.Dimension(416, 84));
        titulo_JLabel.setOpaque(true);
        titulo_JLabel.setPreferredSize(new java.awt.Dimension(416, 84));

        cursos_Actuales_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/training.png"))); // NOI18N
        cursos_Actuales_JButton.setBorder(null);
        cursos_Actuales_JButton.setPreferredSize(new java.awt.Dimension(36, 36));
        ((ImageIcon)cursos_Actuales_JButton.getIcon()).getImage().flush();
        cursos_Actuales_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cursos_Actuales_JButtonMouseClicked(evt);
            }
        });

        actualizar_JButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/updated.png"))); // NOI18N
        actualizar_JButton.setBorder(null);
        actualizar_JButton.setPreferredSize(new java.awt.Dimension(36, 36));
        ((ImageIcon)actualizar_JButton.getIcon()).getImage().flush();
        actualizar_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actualizar_JButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                actualizar_JButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                actualizar_JButtonMouseExited(evt);
            }
        });

        javax.swing.GroupLayout contenido_Titulo_JPanelLayout = new javax.swing.GroupLayout(contenido_Titulo_JPanel);
        contenido_Titulo_JPanel.setLayout(contenido_Titulo_JPanelLayout);
        contenido_Titulo_JPanelLayout.setHorizontalGroup(
            contenido_Titulo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenido_Titulo_JPanelLayout.createSequentialGroup()
                .addComponent(titulo_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 386, Short.MAX_VALUE)
                .addComponent(cursos_Actuales_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(234, 234, 234)
                .addComponent(actualizar_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        contenido_Titulo_JPanelLayout.setVerticalGroup(
            contenido_Titulo_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titulo_JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(cursos_Actuales_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(actualizar_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        mostrar_Cursos_JLayeredPane.setLayout(new java.awt.CardLayout());

        mostrar_Cursos_Actuales_JScrollPane.setBorder(null);
        mostrar_Cursos_Actuales_JScrollPane.setOpaque(false);

        mostrar_Cursos_Actuales_JTable.setAutoCreateRowSorter(true);
        mostrar_Cursos_Actuales_JTable.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        mostrar_Cursos_Actuales_JTable.setModel(

            new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "Curso", "Temáticas", "Fecha" ,"Calificación"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }

                @Override
                public Class getColumnClass(int column)
                {
                    for(int i = 0; i < mostrar_Cursos_Actuales_JTable.getRowCount(); i++)
                    {
                        //The first valid value of a cell of given column is retrieved.
                        if(getValueAt(i,column) != null)
                        {
                            return getValueAt(i, column).getClass();
                        }
                    }
                    //if no valid value is found, default renderer is returned.
                    return super.getColumnClass(column);
                }
            });
            mostrar_Cursos_Actuales_JTable.setOpaque(false);
            mostrar_Cursos_Actuales_JTable.setRowHeight(100);
            mostrar_Cursos_Actuales_JTable.setRowMargin(15);
            mostrar_Cursos_Actuales_JTable.setShowGrid(true);
            mostrar_Cursos_Actuales_JTable.setShowVerticalLines(false);
            mostrar_Cursos_Actuales_JTable.setRowSorter(new TableRowSorter(mostrar_Cursos_Actuales_JTable.getModel()));
            mostrar_Cursos_Actuales_JScrollPane.setViewportView(mostrar_Cursos_Actuales_JTable);

            mostrar_Cursos_JLayeredPane.add(mostrar_Cursos_Actuales_JScrollPane, "Actuales");

            javax.swing.GroupLayout mostrar_Cursos_JPanelLayout = new javax.swing.GroupLayout(mostrar_Cursos_JPanel);
            mostrar_Cursos_JPanel.setLayout(mostrar_Cursos_JPanelLayout);
            mostrar_Cursos_JPanelLayout.setHorizontalGroup(
                mostrar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mostrar_Cursos_JPanelLayout.createSequentialGroup()
                    .addGap(32, 32, 32)
                    .addGroup(mostrar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(mostrar_Cursos_JLayeredPane)
                        .addComponent(contenido_Titulo_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1046, Short.MAX_VALUE))
                    .addGap(32, 32, 32))
            );
            mostrar_Cursos_JPanelLayout.setVerticalGroup(
                mostrar_Cursos_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mostrar_Cursos_JPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(contenido_Titulo_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(mostrar_Cursos_JLayeredPane)
                    .addContainerGap())
            );

            add(mostrar_Cursos_JPanel, "Mostrar");
        }// </editor-fold>//GEN-END:initComponents

    private void cursos_Actuales_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cursos_Actuales_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            ((CardLayout)mostrar_Cursos_JLayeredPane.getLayout()).show(mostrar_Cursos_JLayeredPane, "Actuales");
            carta_Visible = 0;
            cursos_Actuales_JButton.setBackground(CourseRoom.Utilerias.Tercer_Color());
        }
    }//GEN-LAST:event_cursos_Actuales_JButtonMouseClicked

    private void actualizar_JButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizar_JButtonMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){

        }
    }//GEN-LAST:event_actualizar_JButtonMouseClicked

    private void actualizar_JButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizar_JButtonMouseEntered
        // TODO add your handling code here:
        actualizar_JButton.setBackground(CourseRoom.Utilerias.Tercer_Color());
    }//GEN-LAST:event_actualizar_JButtonMouseEntered

    private void actualizar_JButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actualizar_JButtonMouseExited
        // TODO add your handling code here:
        actualizar_JButton.setBackground(CourseRoom.Utilerias.Segundo_Color());
    }//GEN-LAST:event_actualizar_JButtonMouseExited

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizar_JButton;
    private javax.swing.JPanel contenido_Titulo_JPanel;
    private javax.swing.JButton cursos_Actuales_JButton;
    private javax.swing.JScrollPane mostrar_Cursos_Actuales_JScrollPane;
    private static javax.swing.JTable mostrar_Cursos_Actuales_JTable;
    private javax.swing.JLayeredPane mostrar_Cursos_JLayeredPane;
    private javax.swing.JPanel mostrar_Cursos_JPanel;
    private javax.swing.JLabel titulo_JLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void Iniciar_Componentes() {
        
        carta_Visible = 0;
        id_Curso_Actual = 0;
        
       

        buscar_Cursos_Lista = new Lista<>();

        Font gadugi = new Font("Gadugi", Font.BOLD, 16);
       
        
        // Cursos actuales:
        mostrar_Cursos_Actuales_JScrollPane.getViewport().setOpaque(false);
        mostrar_Cursos_Actuales_JScrollPane.getVerticalScrollBar().setUnitIncrement(15);
        mostrar_Cursos_Actuales_JScrollPane.getHorizontalScrollBar().setUnitIncrement(15);

        mostrar_Cursos_Actuales_Lista = new Lista<>();

        mostrar_Cursos_Actuales_JTable.getTableHeader().setFont(gadugi);

        mostrar_Cursos_Actuales_JTable.setDefaultRenderer(Celda_Renderer.class, new Celda_Renderer());
        Celda_Renderer[] celdas = new Celda_Renderer[4];
        modelo_Cursos_Actuales = (DefaultTableModel) mostrar_Cursos_Actuales_JTable.getModel();

        String id;
        URL url_Imagen;
        Image obtener_Imagen_Curso, obtener_Imagen_Profesor, imagen = null;
        ImageIcon icono = null;
        String fecha_Creacion;
        Curso_Profesor_Panel curso_Profesor_Panel;
        for (id_Curso_Actual = 0; id_Curso_Actual < CourseRoom.Utilerias.number().numberBetween(1, 5); id_Curso_Actual++) {
            id = CourseRoom.Utilerias.Concatenar("Curso_Actual_", id_Curso_Actual);
            try {
                System.out.println(id + " -> Getting Image From https://picsum.photos/450/450");
                url_Imagen = new URL("https://picsum.photos/450/450");
                obtener_Imagen_Curso = ImageIO.read(url_Imagen);

                imagen = obtener_Imagen_Curso.getScaledInstance(96, 96, Image.SCALE_SMOOTH);
                icono = new ImageIcon(imagen);

                celdas[0] = new Celda_Renderer(icono, CourseRoom.Utilerias.educator().course(), id);

                System.out.println(id + " Profesor: -> Getting Image From https://i.pravatar.cc/450");
                url_Imagen = new URL("https://i.pravatar.cc/450");
                obtener_Imagen_Profesor = ImageIO.read(url_Imagen);

                fecha_Creacion = CourseRoom.Utilerias.date().birthday(21, 22).toString();
                celdas[1] = new Celda_Renderer(CourseRoom.Utilerias.programmingLanguage().name(), id);
                celdas[2] = new Celda_Renderer(fecha_Creacion, id);
                celdas[3] = new Celda_Renderer(CourseRoom.Utilerias.Concatenar(
                        String.valueOf(CourseRoom.Utilerias.number().numberBetween(0, 6)), "/",
                        String.valueOf(CourseRoom.Utilerias.number().numberBetween(0, 6))), id);

                curso_Profesor_Panel = new Curso_Profesor_Panel(celdas[0].Label().getText(), obtener_Imagen_Curso,
                        CourseRoom.Utilerias.name().fullName(), obtener_Imagen_Profesor, fecha_Creacion,  id);
                mostrar_Cursos_Actuales_Lista.push_back(curso_Profesor_Panel);
                Tablero_Profesor_Panel.Agregar_Vista(curso_Profesor_Panel, id);
                modelo_Cursos_Actuales.addRow(celdas);

                obtener_Imagen_Curso.flush();

                obtener_Imagen_Profesor.flush();
            } catch (MalformedURLException ex) {

            } catch (IOException ex) {

            }
        }

        mostrar_Cursos_Actuales_JTable.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getClickCount() == 2) {

                    JTable tabla = (JTable) e.getComponent();
                    int fila = tabla.getRowSorter().convertRowIndexToModel(tabla.getSelectedRow());
                    int columna = tabla.getSelectedColumn();

                    DefaultTableModel modelo = (DefaultTableModel) mostrar_Cursos_Actuales_JTable.getModel();

                    Celda_Renderer celda = (Celda_Renderer) modelo.getValueAt(fila, columna);

                    Tablero_Profesor_Panel.Mostrar_Vista(celda.ID());

                }
            }
        });
        
       
    }

    @Override
    public void Colorear_Componentes() {
        
        //Titulo cursos:
        contenido_Titulo_JPanel.setBackground(CourseRoom.Utilerias.Segundo_Color());

        titulo_JLabel.setBackground(CourseRoom.Utilerias.Tercer_Color());
        titulo_JLabel.setForeground(CourseRoom.Utilerias.Tercer_Color_Fuente());
        
        cursos_Actuales_JButton.setBackground(CourseRoom.Utilerias.Tercer_Color());

        actualizar_JButton.setBackground(CourseRoom.Utilerias.Segundo_Color());
        
        Celda_Renderer celda;

        Curso_Profesor_Panel curso_Profesor_Panel;
        for (Nodo<Curso_Profesor_Panel> nodo = buscar_Cursos_Lista.front(); nodo != null; nodo = nodo.next()) {
            curso_Profesor_Panel = nodo.element();
            curso_Profesor_Panel.Colorear_Componentes();
        }
        
        // Cursos actuales:
        mostrar_Cursos_Actuales_JTable.getTableHeader().setBackground(CourseRoom.Utilerias.Tercer_Color());
        mostrar_Cursos_Actuales_JTable.getTableHeader().setForeground(CourseRoom.Utilerias.Tercer_Color_Fuente());

        
        for (int i = 0; i < mostrar_Cursos_Actuales_JTable.getRowCount(); i++) {
            for (int j = 0; j < 4; j++) {
                celda = (Celda_Renderer) modelo_Cursos_Actuales.getValueAt(i, j);
                celda.Color_Fuente(CourseRoom.Utilerias.Primer_Color_Fuente());
            }
        }

        for (Nodo<Curso_Profesor_Panel> nodo = mostrar_Cursos_Actuales_Lista.front(); nodo != null; nodo = nodo.next()) {
            curso_Profesor_Panel = nodo.element();
            curso_Profesor_Panel.Colorear_Componentes();
        }
        
        
       
    }

    @Override
    public void Limpiar() {
        buscar_Cursos_Lista.clear();
        mostrar_Cursos_Actuales_Lista.clear();
        mostrar_Cursos_Actuales_JTable.removeAll();
    }

    
}
