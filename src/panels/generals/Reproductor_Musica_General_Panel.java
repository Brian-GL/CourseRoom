/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels.generals;

import data.collections.DoublyLinkedList;
import data.collections.PairDoublyLinkedList;
import data.structures.Node;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.PixelGrabber;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import uk.co.caprica.vlcj.factory.MediaPlayerFactory;
import uk.co.caprica.vlcj.media.MediaRef;
import uk.co.caprica.vlcj.media.TrackType;
import uk.co.caprica.vlcj.player.base.MediaPlayer;
import uk.co.caprica.vlcj.player.base.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.base.State;
import uk.co.caprica.vlcj.player.component.AudioListPlayerComponent;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.TagException;
import org.jaudiotagger.tag.images.Artwork;
import data.structures.Pair;
import java.io.FileFilter;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.border.TitledBorder;
import uk.co.caprica.vlcj.player.base.Equalizer;
import uk.co.caprica.vlcj.player.list.MediaListPlayer;
import uk.co.caprica.vlcj.player.list.MediaListPlayerEventListener;
import data.interfaces.Color_Interface;
import data.interfaces.Componentes_Interface;
import data.interfaces.Limpieza_Interface;
import data.interfaces.Reproductor_Interface;
import java.util.logging.Level;
import main.MainFrame;

/**
 *
 * @author brian-gl
 */
public final class Reproductor_Musica_General_Panel extends javax.swing.JPanel implements Color_Interface, Limpieza_Interface, Componentes_Interface, Reproductor_Interface{

    //Private attributes
    
    //Banderas
    private boolean bandera_Mouse_Auxiliar, bandera_Siguiente_Pista, bandera_Anterior_Pista;
    private static boolean bandera_Indice_Cero;
    
    //Image Icons
    private ImageIcon icono_Play, icono_Pause;
    
    //Components
    private static AudioListPlayerComponent componente_Reproducto_Lista_Audio;
    
    //Data Structures
    private Map<String,Equalizer> mapa_presets;
    private static DoublyLinkedList<String> rutas;
    private static Node<String> nodo_actual;
     
    //Others
    private static int indice;
    private Color primer_Color, segundo_Color, tercer_Color,primer_Color_Fuente, segundo_Color_Fuente, tercer_Color_Fuente;

    
    public Reproductor_Musica_General_Panel() {
        
        initComponents();
        
        Iniciar_Componentes();
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelCoverArt = new javax.swing.JLabel();
        jPanelControls = new javax.swing.JPanel();
        jTabbedPanelControls = new javax.swing.JTabbedPane();
        jPanelOpenFiles = new javax.swing.JPanel();
        jLabelOpenFolder = new javax.swing.JLabel();
        jLabelOpenFiles = new javax.swing.JLabel();
        jScrollPanePlaylist = new javax.swing.JScrollPane();
        jPanelPlaylist = new javax.swing.JPanel();
        jPanelPlayerControls = new javax.swing.JPanel();
        jLabelStop = new javax.swing.JLabel();
        jLabelPrevious = new javax.swing.JLabel();
        jLabelPlayPause = new javax.swing.JLabel();
        jLabelNext = new javax.swing.JLabel();
        jPanelAudioControls = new javax.swing.JPanel();
        jLabelRateDown = new javax.swing.JLabel();
        jSliderRate = new javax.swing.JSlider();
        jLabelRateUp = new javax.swing.JLabel();
        jLabelVolumeDown = new javax.swing.JLabel();
        jSliderVolume = new javax.swing.JSlider();
        jLabelVolumeUp = new javax.swing.JLabel();
        jPanelEqualizer = new javax.swing.JPanel();
        jPanelBands = new javax.swing.JPanel();
        jSliderBand6 = new javax.swing.JSlider();
        jSliderBand1 = new javax.swing.JSlider();
        jSliderBand2 = new javax.swing.JSlider();
        jSliderBand3 = new javax.swing.JSlider();
        jSliderBand4 = new javax.swing.JSlider();
        jSliderBand5 = new javax.swing.JSlider();
        jSliderBand0 = new javax.swing.JSlider();
        jSliderBand7 = new javax.swing.JSlider();
        jSliderBand8 = new javax.swing.JSlider();
        jSliderBand9 = new javax.swing.JSlider();
        jLabelBand1 = new javax.swing.JLabel();
        jLabelBand0 = new javax.swing.JLabel();
        jLabelBand2 = new javax.swing.JLabel();
        jLabelBand3 = new javax.swing.JLabel();
        jLabelBand4 = new javax.swing.JLabel();
        jLabelBand5 = new javax.swing.JLabel();
        jLabelBand6 = new javax.swing.JLabel();
        jLabelBand7 = new javax.swing.JLabel();
        jLabelBand8 = new javax.swing.JLabel();
        jLabelBand9 = new javax.swing.JLabel();
        jLabelPreampTitle = new javax.swing.JLabel();
        jSliderBandPreamp = new javax.swing.JSlider();
        jLabelPreamp = new javax.swing.JLabel();
        jLabelPreset = new javax.swing.JLabel();
        jComboBoxPresets = new javax.swing.JComboBox<>();
        jPanelMediaInformation = new javax.swing.JPanel();
        jLabelGenreValue = new javax.swing.JLabel();
        jLabelMediaValue = new javax.swing.JLabel();
        jLabelYearValue = new javax.swing.JLabel();
        jScrollPaneLyrics = new javax.swing.JScrollPane();
        jTextPaneLyrics = new javax.swing.JTextPane();
        jLabelTitle = new javax.swing.JLabel();
        jLabelTotalDuration = new javax.swing.JLabel();
        jLabelArtist = new javax.swing.JLabel();
        jLabelAlbum = new javax.swing.JLabel();
        jLabelProgress = new javax.swing.JLabel();
        jSliderProgress = new javax.swing.JSlider();

        setMinimumSize(new java.awt.Dimension(1085, 630));
        setPreferredSize(new java.awt.Dimension(1085, 630));

        jLabelCoverArt.setBackground(new java.awt.Color(0, 0, 0));
        jLabelCoverArt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCoverArt.setToolTipText("");
        jLabelCoverArt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabelCoverArt.setMaximumSize(new java.awt.Dimension(550, 550));
        jLabelCoverArt.setMinimumSize(new java.awt.Dimension(550, 550));
        jLabelCoverArt.setPreferredSize(new java.awt.Dimension(550, 550));

        jPanelControls.setOpaque(false);

        jTabbedPanelControls.setBackground(new java.awt.Color(0, 0, 0));
        jTabbedPanelControls.setTabPlacement(javax.swing.JTabbedPane.RIGHT);

        jPanelOpenFiles.setOpaque(false);

        jLabelOpenFolder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOpenFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/carpeta.png"))); // NOI18N
        jLabelOpenFolder.setToolTipText("Abrir Carpeta De Música");
        jLabelOpenFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelOpenFolderMouseClicked(evt);
            }
        });

        jLabelOpenFiles.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOpenFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/folder.png"))); // NOI18N
        jLabelOpenFiles.setToolTipText("Abrir Archivo De Música");
        jLabelOpenFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelOpenFilesMouseClicked(evt);
            }
        });

        jScrollPanePlaylist.setBorder(null);
        jScrollPanePlaylist.setOpaque(false);

        jPanelPlaylist.setOpaque(false);
        jPanelPlaylist.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPanePlaylist.setViewportView(jPanelPlaylist);

        javax.swing.GroupLayout jPanelOpenFilesLayout = new javax.swing.GroupLayout(jPanelOpenFiles);
        jPanelOpenFiles.setLayout(jPanelOpenFilesLayout);
        jPanelOpenFilesLayout.setHorizontalGroup(
            jPanelOpenFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOpenFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOpenFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPanePlaylist)
                    .addGroup(jPanelOpenFilesLayout.createSequentialGroup()
                        .addComponent(jLabelOpenFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 252, Short.MAX_VALUE)
                        .addComponent(jLabelOpenFolder)))
                .addContainerGap())
        );
        jPanelOpenFilesLayout.setVerticalGroup(
            jPanelOpenFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOpenFilesLayout.createSequentialGroup()
                .addGroup(jPanelOpenFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelOpenFiles)
                    .addComponent(jLabelOpenFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPanePlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabelOpenFiles.getAccessibleContext().setAccessibleName("jLabelOpenFile");

        jTabbedPanelControls.addTab("", new javax.swing.ImageIcon(getClass().getResource("/resources/icons/audio.png")), jPanelOpenFiles); // NOI18N

        jPanelPlayerControls.setOpaque(false);

        jLabelStop.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/stop.png"))); // NOI18N
        jLabelStop.setToolTipText("Stop Media");
        jLabelStop.setEnabled(false);
        jLabelStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelStopMouseClicked(evt);
            }
        });

        jLabelPrevious.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/previous.png"))); // NOI18N
        jLabelPrevious.setToolTipText("Previous Media");
        jLabelPrevious.setEnabled(false);
        jLabelPrevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPreviousMouseClicked(evt);
            }
        });

        jLabelPlayPause.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlayPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/play-button.png"))); // NOI18N
        jLabelPlayPause.setToolTipText("Play/Pause Media");
        jLabelPlayPause.setEnabled(false);
        jLabelPlayPause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPlayPauseMouseClicked(evt);
            }
        });

        jLabelNext.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/next-button.png"))); // NOI18N
        jLabelNext.setToolTipText("Next Media");
        jLabelNext.setEnabled(false);
        jLabelNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelNextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlayerControlsLayout = new javax.swing.GroupLayout(jPanelPlayerControls);
        jPanelPlayerControls.setLayout(jPanelPlayerControlsLayout);
        jPanelPlayerControlsLayout.setHorizontalGroup(
            jPanelPlayerControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlayerControlsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelStop)
                .addGap(50, 50, 50)
                .addComponent(jLabelPrevious)
                .addGap(48, 48, 48)
                .addComponent(jLabelPlayPause)
                .addGap(50, 50, 50)
                .addComponent(jLabelNext)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanelPlayerControlsLayout.setVerticalGroup(
            jPanelPlayerControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlayerControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlayerControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPrevious)
                    .addComponent(jLabelStop)
                    .addComponent(jLabelPlayPause)
                    .addComponent(jLabelNext))
                .addContainerGap(354, Short.MAX_VALUE))
        );

        jTabbedPanelControls.addTab("", new javax.swing.ImageIcon(getClass().getResource("/resources/icons/play.png")), jPanelPlayerControls); // NOI18N

        jPanelAudioControls.setOpaque(false);

        jLabelRateDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/snail.png"))); // NOI18N
        jLabelRateDown.setToolTipText("Slow Rate");
        jLabelRateDown.setEnabled(false);
        jLabelRateDown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelRateDownMouseClicked(evt);
            }
        });

        jSliderRate.setBackground(new java.awt.Color(14, 30, 64));
        jSliderRate.setMajorTickSpacing(10);
        jSliderRate.setMaximum(150);
        jSliderRate.setMinimum(50);
        jSliderRate.setPaintTicks(true);
        jSliderRate.setToolTipText("Rate");
        jSliderRate.setValue(100);
        jSliderRate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jSliderRate.setEnabled(false);
        jSliderRate.setFocusable(false);
        jSliderRate.setMaximumSize(new java.awt.Dimension(32767, 32));
        jSliderRate.setMinimumSize(new java.awt.Dimension(137, 32));
        jSliderRate.setPreferredSize(new java.awt.Dimension(137, 32));

        jLabelRateUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rabbit.png"))); // NOI18N
        jLabelRateUp.setToolTipText("Fast Rate");
        jLabelRateUp.setEnabled(false);
        jLabelRateUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelRateUpMouseClicked(evt);
            }
        });

        jLabelVolumeDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/volume-down.png"))); // NOI18N
        jLabelVolumeDown.setToolTipText("Volume Down");
        jLabelVolumeDown.setEnabled(false);
        jLabelVolumeDown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelVolumeDownMouseClicked(evt);
            }
        });

        jSliderVolume.setBackground(new java.awt.Color(14, 30, 64));
        jSliderVolume.setMajorTickSpacing(10);
        jSliderVolume.setPaintTicks(true);
        jSliderVolume.setToolTipText("Volume");
        jSliderVolume.setValue(100);
        jSliderVolume.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jSliderVolume.setEnabled(false);
        jSliderVolume.setFocusable(false);
        jSliderVolume.setMaximumSize(new java.awt.Dimension(32767, 32));
        jSliderVolume.setMinimumSize(new java.awt.Dimension(137, 32));
        jSliderVolume.setPreferredSize(new java.awt.Dimension(137, 32));

        jLabelVolumeUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/volume-up.png"))); // NOI18N
        jLabelVolumeUp.setToolTipText("Volume Up");
        jLabelVolumeUp.setEnabled(false);
        jLabelVolumeUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelVolumeUpMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelAudioControlsLayout = new javax.swing.GroupLayout(jPanelAudioControls);
        jPanelAudioControls.setLayout(jPanelAudioControlsLayout);
        jPanelAudioControlsLayout.setHorizontalGroup(
            jPanelAudioControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAudioControlsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelAudioControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAudioControlsLayout.createSequentialGroup()
                        .addComponent(jLabelRateDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSliderRate, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAudioControlsLayout.createSequentialGroup()
                        .addComponent(jLabelVolumeDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSliderVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAudioControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelRateUp)
                    .addGroup(jPanelAudioControlsLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabelVolumeUp)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelAudioControlsLayout.setVerticalGroup(
            jPanelAudioControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAudioControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAudioControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelRateDown)
                    .addComponent(jSliderRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRateUp))
                .addGap(18, 18, 18)
                .addGroup(jPanelAudioControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelVolumeDown)
                    .addComponent(jSliderVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelVolumeUp))
                .addContainerGap(304, Short.MAX_VALUE))
        );

        jTabbedPanelControls.addTab("", new javax.swing.ImageIcon(getClass().getResource("/resources/icons/loud.png")), jPanelAudioControls); // NOI18N

        jPanelEqualizer.setOpaque(false);

        jPanelBands.setBorder(javax.swing.BorderFactory.createTitledBorder("Bands"));
        jPanelBands.setMinimumSize(new java.awt.Dimension(470, 350));
        jPanelBands.setOpaque(false);
        jPanelBands.setPreferredSize(new java.awt.Dimension(287, 256));
        jPanelBands.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jSliderBand6.setMajorTickSpacing(1);
        jSliderBand6.setMaximum(12);
        jSliderBand6.setMinimum(-12);
        jSliderBand6.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand6.setValue(0);
        jSliderBand6.setMaximumSize(new java.awt.Dimension(28, 300));
        jSliderBand6.setMinimumSize(new java.awt.Dimension(28, 300));
        jSliderBand6.setPreferredSize(new java.awt.Dimension(35, 300));
        jSliderBand6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand6StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand6, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 20, 10, 240));

        jSliderBand1.setMajorTickSpacing(1);
        jSliderBand1.setMaximum(12);
        jSliderBand1.setMinimum(-12);
        jSliderBand1.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand1.setValue(0);
        jSliderBand1.setMaximumSize(new java.awt.Dimension(28, 300));
        jSliderBand1.setMinimumSize(new java.awt.Dimension(28, 300));
        jSliderBand1.setPreferredSize(new java.awt.Dimension(35, 300));
        jSliderBand1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand1StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand1, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 20, 10, 240));

        jSliderBand2.setMajorTickSpacing(1);
        jSliderBand2.setMaximum(12);
        jSliderBand2.setMinimum(-12);
        jSliderBand2.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand2.setValue(0);
        jSliderBand2.setMaximumSize(new java.awt.Dimension(28, 300));
        jSliderBand2.setMinimumSize(new java.awt.Dimension(28, 300));
        jSliderBand2.setPreferredSize(new java.awt.Dimension(35, 300));
        jSliderBand2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand2StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand2, new org.netbeans.lib.awtextra.AbsoluteConstraints(66, 20, 10, 240));

        jSliderBand3.setMajorTickSpacing(1);
        jSliderBand3.setMaximum(12);
        jSliderBand3.setMinimum(-12);
        jSliderBand3.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand3.setValue(0);
        jSliderBand3.setMaximumSize(new java.awt.Dimension(28, 300));
        jSliderBand3.setMinimumSize(new java.awt.Dimension(28, 300));
        jSliderBand3.setPreferredSize(new java.awt.Dimension(35, 300));
        jSliderBand3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand3StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand3, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 20, 10, 240));

        jSliderBand4.setMajorTickSpacing(1);
        jSliderBand4.setMaximum(12);
        jSliderBand4.setMinimum(-12);
        jSliderBand4.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand4.setValue(0);
        jSliderBand4.setMaximumSize(new java.awt.Dimension(28, 300));
        jSliderBand4.setMinimumSize(new java.awt.Dimension(28, 300));
        jSliderBand4.setPreferredSize(new java.awt.Dimension(35, 300));
        jSliderBand4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand4StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand4, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 20, 10, 240));

        jSliderBand5.setMajorTickSpacing(1);
        jSliderBand5.setMaximum(12);
        jSliderBand5.setMinimum(-12);
        jSliderBand5.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand5.setValue(0);
        jSliderBand5.setMaximumSize(new java.awt.Dimension(28, 300));
        jSliderBand5.setMinimumSize(new java.awt.Dimension(28, 300));
        jSliderBand5.setPreferredSize(new java.awt.Dimension(35, 300));
        jSliderBand5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand5StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand5, new org.netbeans.lib.awtextra.AbsoluteConstraints(153, 20, 10, 240));

        jSliderBand0.setMajorTickSpacing(1);
        jSliderBand0.setMaximum(12);
        jSliderBand0.setMinimum(-12);
        jSliderBand0.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand0.setValue(0);
        jSliderBand0.setMaximumSize(new java.awt.Dimension(20, 150));
        jSliderBand0.setMinimumSize(new java.awt.Dimension(20, 150));
        jSliderBand0.setPreferredSize(new java.awt.Dimension(20, 150));
        jSliderBand0.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand0StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand0, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 20, 10, 240));

        jSliderBand7.setMajorTickSpacing(1);
        jSliderBand7.setMaximum(12);
        jSliderBand7.setMinimum(-12);
        jSliderBand7.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand7.setValue(0);
        jSliderBand7.setMaximumSize(new java.awt.Dimension(28, 300));
        jSliderBand7.setMinimumSize(new java.awt.Dimension(28, 300));
        jSliderBand7.setPreferredSize(new java.awt.Dimension(35, 300));
        jSliderBand7.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand7StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand7, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 20, 10, 240));

        jSliderBand8.setMajorTickSpacing(1);
        jSliderBand8.setMaximum(12);
        jSliderBand8.setMinimum(-12);
        jSliderBand8.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand8.setValue(0);
        jSliderBand8.setMaximumSize(new java.awt.Dimension(28, 300));
        jSliderBand8.setMinimumSize(new java.awt.Dimension(28, 300));
        jSliderBand8.setPreferredSize(new java.awt.Dimension(35, 300));
        jSliderBand8.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand8StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand8, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 10, 240));

        jSliderBand9.setMajorTickSpacing(1);
        jSliderBand9.setMaximum(12);
        jSliderBand9.setMinimum(-12);
        jSliderBand9.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBand9.setValue(0);
        jSliderBand9.setMaximumSize(new java.awt.Dimension(28, 300));
        jSliderBand9.setMinimumSize(new java.awt.Dimension(28, 300));
        jSliderBand9.setPreferredSize(new java.awt.Dimension(35, 300));
        jSliderBand9.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBand9StateChanged(evt);
            }
        });
        jPanelBands.add(jSliderBand9, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 20, 10, 240));

        jLabelBand1.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand1.setText("0");
        jPanelBands.add(jLabelBand1, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 260, 10, 20));

        jLabelBand0.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand0.setText("0");
        jPanelBands.add(jLabelBand0, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 260, 10, 20));

        jLabelBand2.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand2.setText("0");
        jPanelBands.add(jLabelBand2, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 260, 10, 20));

        jLabelBand3.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand3.setText("0");
        jPanelBands.add(jLabelBand3, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 260, 10, 20));

        jLabelBand4.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand4.setText("0");
        jPanelBands.add(jLabelBand4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 260, 10, 20));

        jLabelBand5.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand5.setText("0");
        jPanelBands.add(jLabelBand5, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 260, 10, 20));

        jLabelBand6.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand6.setText("0");
        jPanelBands.add(jLabelBand6, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 260, 10, 20));

        jLabelBand7.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand7.setText("0");
        jPanelBands.add(jLabelBand7, new org.netbeans.lib.awtextra.AbsoluteConstraints(207, 260, 10, 20));

        jLabelBand8.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand8.setText("0");
        jPanelBands.add(jLabelBand8, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 260, 10, 20));

        jLabelBand9.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelBand9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelBand9.setText("0");
        jPanelBands.add(jLabelBand9, new org.netbeans.lib.awtextra.AbsoluteConstraints(266, 260, 10, 20));

        jLabelPreampTitle.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelPreampTitle.setText("Preamp");
        jLabelPreampTitle.setPreferredSize(new java.awt.Dimension(47, 20));
        jLabelPreampTitle.setRequestFocusEnabled(false);
        jLabelPreampTitle.setVerifyInputWhenFocusTarget(false);

        jSliderBandPreamp.setMajorTickSpacing(1);
        jSliderBandPreamp.setMaximum(12);
        jSliderBandPreamp.setMinimum(-12);
        jSliderBandPreamp.setValue(0);
        jSliderBandPreamp.setMaximumSize(new java.awt.Dimension(20, 150));
        jSliderBandPreamp.setMinimumSize(new java.awt.Dimension(20, 150));
        jSliderBandPreamp.setPreferredSize(new java.awt.Dimension(150, 20));
        jSliderBandPreamp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBandPreampStateChanged(evt);
            }
        });

        jLabelPreamp.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jLabelPreamp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPreamp.setText("0");
        jLabelPreamp.setMinimumSize(new java.awt.Dimension(20, 20));
        jLabelPreamp.setPreferredSize(new java.awt.Dimension(20, 20));
        jLabelPreamp.setRequestFocusEnabled(false);
        jLabelPreamp.setVerifyInputWhenFocusTarget(false);

        jLabelPreset.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        jLabelPreset.setText("Preset");
        jLabelPreset.setMaximumSize(new java.awt.Dimension(50, 32));
        jLabelPreset.setMinimumSize(new java.awt.Dimension(50, 32));
        jLabelPreset.setPreferredSize(new java.awt.Dimension(50, 32));

        jComboBoxPresets.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        jComboBoxPresets.setToolTipText("Selet Preset");
        jComboBoxPresets.setMinimumSize(new java.awt.Dimension(250, 32));
        jComboBoxPresets.setPreferredSize(new java.awt.Dimension(250, 32));
        jComboBoxPresets.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPresetsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelEqualizerLayout = new javax.swing.GroupLayout(jPanelEqualizer);
        jPanelEqualizer.setLayout(jPanelEqualizerLayout);
        jPanelEqualizerLayout.setHorizontalGroup(
            jPanelEqualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEqualizerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelEqualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelBands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelEqualizerLayout.createSequentialGroup()
                        .addGroup(jPanelEqualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEqualizerLayout.createSequentialGroup()
                                .addComponent(jLabelPreampTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanelEqualizerLayout.createSequentialGroup()
                                .addComponent(jLabelPreset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))
                        .addGroup(jPanelEqualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSliderBandPreamp, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addComponent(jComboBoxPresets, 0, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPreamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelEqualizerLayout.setVerticalGroup(
            jPanelEqualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEqualizerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelBands, javax.swing.GroupLayout.PREFERRED_SIZE, 294, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelEqualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPreampTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderBandPreamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPreamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelEqualizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxPresets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPreset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        jTabbedPanelControls.addTab("", new javax.swing.ImageIcon(getClass().getResource("/resources/icons/control.png")), jPanelEqualizer); // NOI18N

        jPanelMediaInformation.setOpaque(false);

        jLabelGenreValue.setFont(new java.awt.Font("Gadugi", 0, 15)); // NOI18N
        jLabelGenreValue.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelGenreValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Genre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Inter", 1, 16))); // NOI18N
        jLabelGenreValue.setMaximumSize(new java.awt.Dimension(51, 45));
        jLabelGenreValue.setMinimumSize(new java.awt.Dimension(51, 45));
        jLabelGenreValue.setPreferredSize(new java.awt.Dimension(51, 55));

        jLabelMediaValue.setFont(new java.awt.Font("Gadugi", 0, 15)); // NOI18N
        jLabelMediaValue.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelMediaValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Media", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Inter", 1, 16))); // NOI18N
        jLabelMediaValue.setMaximumSize(new java.awt.Dimension(51, 45));
        jLabelMediaValue.setMinimumSize(new java.awt.Dimension(51, 45));
        jLabelMediaValue.setPreferredSize(new java.awt.Dimension(51, 55));

        jLabelYearValue.setFont(new java.awt.Font("Gadugi", 0, 15)); // NOI18N
        jLabelYearValue.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelYearValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Year", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Inter", 1, 16))); // NOI18N
        jLabelYearValue.setMaximumSize(new java.awt.Dimension(51, 45));
        jLabelYearValue.setMinimumSize(new java.awt.Dimension(51, 45));
        jLabelYearValue.setPreferredSize(new java.awt.Dimension(51, 55));

        jScrollPaneLyrics.setBorder(null);
        jScrollPaneLyrics.setOpaque(false);

        jTextPaneLyrics.setEditable(false);
        jTextPaneLyrics.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lyrics", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Inter", 1, 16))); // NOI18N
        jTextPaneLyrics.setFont(new java.awt.Font("Gadugi", 0, 15)); // NOI18N
        jTextPaneLyrics.setOpaque(false);
        jScrollPaneLyrics.setViewportView(jTextPaneLyrics);

        javax.swing.GroupLayout jPanelMediaInformationLayout = new javax.swing.GroupLayout(jPanelMediaInformation);
        jPanelMediaInformation.setLayout(jPanelMediaInformationLayout);
        jPanelMediaInformationLayout.setHorizontalGroup(
            jPanelMediaInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMediaInformationLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanelMediaInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelGenreValue, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneLyrics, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMediaInformationLayout.createSequentialGroup()
                        .addComponent(jLabelYearValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelMediaValue, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelMediaInformationLayout.setVerticalGroup(
            jPanelMediaInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMediaInformationLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabelGenreValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMediaInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelMediaValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelYearValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneLyrics, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPanelControls.addTab("", new javax.swing.ImageIcon(getClass().getResource("/resources/icons/archivo-de-musica.png")), jPanelMediaInformation); // NOI18N

        jLabelTitle.setBackground(new java.awt.Color(0, 0, 0));
        jLabelTitle.setFont(new java.awt.Font("Gadugi", 1, 20)); // NOI18N
        jLabelTitle.setForeground(java.awt.Color.white);
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/cd.png"))); // NOI18N
        jLabelTitle.setText("Title");
        jLabelTitle.setToolTipText("");
        jLabelTitle.setFocusable(false);
        jLabelTitle.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jLabelTitle.setMinimumSize(new java.awt.Dimension(359, 35));
        jLabelTitle.setPreferredSize(new java.awt.Dimension(359, 35));

        jLabelTotalDuration.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        jLabelTotalDuration.setForeground(new java.awt.Color(104, 194, 232));
        jLabelTotalDuration.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTotalDuration.setText("00:00:00");
        jLabelTotalDuration.setFocusable(false);
        jLabelTotalDuration.setMaximumSize(new java.awt.Dimension(56, 35));
        jLabelTotalDuration.setMinimumSize(new java.awt.Dimension(56, 35));

        jLabelArtist.setBackground(new java.awt.Color(0, 0, 0));
        jLabelArtist.setFont(new java.awt.Font("Gadugi", 1, 20)); // NOI18N
        jLabelArtist.setForeground(java.awt.Color.white);
        jLabelArtist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelArtist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/broadcaster.png"))); // NOI18N
        jLabelArtist.setText("Artist");
        jLabelArtist.setToolTipText("");
        jLabelArtist.setFocusable(false);
        jLabelArtist.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jLabelArtist.setMinimumSize(new java.awt.Dimension(359, 35));
        jLabelArtist.setName(""); // NOI18N
        jLabelArtist.setPreferredSize(new java.awt.Dimension(359, 35));

        jLabelAlbum.setBackground(new java.awt.Color(0, 0, 0));
        jLabelAlbum.setFont(new java.awt.Font("Gadugi", 1, 20)); // NOI18N
        jLabelAlbum.setForeground(java.awt.Color.white);
        jLabelAlbum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelAlbum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/music-album.png"))); // NOI18N
        jLabelAlbum.setText("Album");
        jLabelAlbum.setToolTipText("");
        jLabelAlbum.setFocusable(false);
        jLabelAlbum.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jLabelAlbum.setMinimumSize(new java.awt.Dimension(359, 35));
        jLabelAlbum.setName(""); // NOI18N
        jLabelAlbum.setPreferredSize(new java.awt.Dimension(359, 35));

        jLabelProgress.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        jLabelProgress.setForeground(new java.awt.Color(104, 194, 232));
        jLabelProgress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelProgress.setText("00:00:00");
        jLabelProgress.setFocusable(false);
        jLabelProgress.setMaximumSize(new java.awt.Dimension(56, 35));
        jLabelProgress.setMinimumSize(new java.awt.Dimension(56, 35));

        jSliderProgress.setBackground(new java.awt.Color(14, 30, 64));
        jSliderProgress.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jSliderProgress.setForeground(new java.awt.Color(104, 194, 232));
        jSliderProgress.setMaximum(2147483647);
        jSliderProgress.setValue(0);
        jSliderProgress.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jSliderProgress.setEnabled(false);
        jSliderProgress.setFocusable(false);
        jSliderProgress.setMaximumSize(new java.awt.Dimension(32767, 17));
        jSliderProgress.setMinimumSize(new java.awt.Dimension(664, 17));
        jSliderProgress.setPreferredSize(new java.awt.Dimension(674, 17));
        jSliderProgress.setValueIsAdjusting(true);

        javax.swing.GroupLayout jPanelControlsLayout = new javax.swing.GroupLayout(jPanelControls);
        jPanelControls.setLayout(jPanelControlsLayout);
        jPanelControlsLayout.setHorizontalGroup(
            jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPanelControls)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelControlsLayout.createSequentialGroup()
                        .addComponent(jLabelProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSliderProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelTotalDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelArtist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelControlsLayout.setVerticalGroup(
            jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabelArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTotalDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPanelControls)
                .addContainerGap())
        );

        jTabbedPanelControls.getAccessibleContext().setAccessibleName("OpenFiles");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(110, Short.MAX_VALUE)
                .addComponent(jLabelCoverArt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jPanelControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelCoverArt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
      
    /**Sets all available presets*/
    public void Establecer_Presets_Ecualizador(){
        
        Iterator<Entry<String,Equalizer>> iterador = mapa_presets.entrySet().iterator();
        
        while(iterador.hasNext()){
            Entry<String,Equalizer> entrada = iterador.next();
            jComboBoxPresets.addItem(entrada.getKey());
        }
        
        jComboBoxPresets.setSelectedItem("Flat");
    }
    
    /**Stablish all ecualizador bands from the audio list media player ecualizador*/
    private void Establecer_Amperajes(){
        
        int amp0 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(0);
        int amp1 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(1);
        int amp2 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(2);
        int amp3 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(3);
        int amp4 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(4);
        int amp5 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(5);
        int amp6 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(6);
        int amp7 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(7);
        int amp8 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(8);
        int amp9 = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(9);
        int preamp = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().preamp();

        jSliderBand0.setValue(amp0);
        jSliderBand1.setValue(amp1);
        jSliderBand2.setValue(amp2);
        jSliderBand3.setValue(amp3);
        jSliderBand4.setValue(amp4);
        jSliderBand5.setValue(amp5);
        jSliderBand6.setValue(amp6);
        jSliderBand7.setValue(amp7);
        jSliderBand8.setValue(amp8);
        jSliderBand9.setValue(amp9);
        jSliderBandPreamp.setValue(preamp);

        jLabelBand0.setText(String.valueOf(amp0));
        jLabelBand1.setText(String.valueOf(amp1));
        jLabelBand2.setText(String.valueOf(amp2));
        jLabelBand3.setText(String.valueOf(amp3));
        jLabelBand4.setText(String.valueOf(amp4));
        jLabelBand5.setText(String.valueOf(amp5));
        jLabelBand6.setText(String.valueOf(amp6));
        jLabelBand7.setText(String.valueOf(amp7));
        jLabelBand8.setText(String.valueOf(amp8));
        jLabelBand9.setText(String.valueOf(amp9));
        jLabelPreamp.setText(String.valueOf(preamp));
    }

    private void jLabelVolumeUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelVolumeUpMouseClicked
        // TODO add your handling code here:
        int volumen;
        if(SwingUtilities.isLeftMouseButton(evt)){
            volumen = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().volume();
            volumen+=10;
            if(volumen <= 100){
                jSliderVolume.setValue(volumen);
            }
        }
    }//GEN-LAST:event_jLabelVolumeUpMouseClicked

    private void jLabelVolumeDownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelVolumeDownMouseClicked
        // TODO add your handling code here:
        int volumen;
        if(SwingUtilities.isLeftMouseButton(evt)){
            volumen = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().volume();
            volumen-=10;
            if(volumen >= 0){
                jSliderVolume.setValue(volumen);
            }
        }
    }//GEN-LAST:event_jLabelVolumeDownMouseClicked

    private void jLabelRateUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelRateUpMouseClicked
        // TODO add your handling code here:
        float rate;
        if(SwingUtilities.isLeftMouseButton(evt)){
            rate = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().rate();
            rate += 0.1f;
            if (rate <= 1.5f) {
                rate = rate * 100;
                jSliderRate.setValue((int)rate);
            }
        }

    }//GEN-LAST:event_jLabelRateUpMouseClicked

    private void jLabelRateDownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelRateDownMouseClicked
        // TODO add your handling code here:
        float rate;
        if (SwingUtilities.isLeftMouseButton(evt)) {
            rate = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().rate();
            rate -= 0.1f;
            if (rate >= 0.5f) {
                rate = rate * 100;
                jSliderRate.setValue((int)rate);
            }
        }
    }//GEN-LAST:event_jLabelRateDownMouseClicked

    private void jLabelNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelNextMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Siguiente_Pista();
        }
    }//GEN-LAST:event_jLabelNextMouseClicked

    private void jLabelPlayPauseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPlayPauseMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Establecer_Reproduccion_Pausa();
        }
    }//GEN-LAST:event_jLabelPlayPauseMouseClicked

    private void jLabelPreviousMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPreviousMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Anterior_Pista();
        }
    }//GEN-LAST:event_jLabelPreviousMouseClicked

    private void jLabelStopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelStopMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            Establecer_Alto();
            Limpiar_Informacion();
        }
    }//GEN-LAST:event_jLabelStopMouseClicked

    private void jLabelOpenFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelOpenFolderMouseClicked
        // TODO add your handling code here:
        JFileChooser escogedor_Archivos;
        int resultado;
        File folder;
        FileFilter filtro;
        File[] archivos_Abiertos;
        if(SwingUtilities.isLeftMouseButton(evt)){

            escogedor_Archivos = new JFileChooser();
            escogedor_Archivos.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            escogedor_Archivos.setApproveButtonText("Abrir Carpeta");
            resultado = escogedor_Archivos.showOpenDialog(this);

            if (resultado == JFileChooser.APPROVE_OPTION) {
                folder = escogedor_Archivos.getSelectedFile();
                if(folder != null){
                    filtro = (File rutaname) -> {
                        if(rutaname != null){
                            return rutaname.getName().endsWith(".mp3") ||
                                    rutaname.getName().endsWith(".flac") ||
                                    rutaname.getName().endsWith(".aac") ||
                                    rutaname.getName().endsWith(".wma") ||
                                    rutaname.getName().endsWith(".ogg");
                        }
                        return false;
                    };

                   archivos_Abiertos = folder.listFiles(filtro);
                    if(archivos_Abiertos.length > 0){
                        rutas.clear();
                        bandera_Indice_Cero = false;
                        bandera_Siguiente_Pista = false;
                        bandera_Anterior_Pista = true;
                        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().stop();
                        componente_Reproducto_Lista_Audio.mediaListPlayer().list().media().clear();
                        jPanelPlaylist.removeAll();
                        int idx = 0;
                        
                        File archivos_Abierto;
                        String ruta;
                        String nombre_Archivo;
                        Entrada_Lista_Reproduccion_General_Panel entrada_Lista_Reproduccion_General_Panel;
                        
                        for(int i = 0; i < archivos_Abiertos.length;i++){
                            archivos_Abierto = archivos_Abiertos[i];
                            ruta = archivos_Abierto.getAbsolutePath();
                            nombre_Archivo = archivos_Abierto.getName();
                            entrada_Lista_Reproduccion_General_Panel = new Entrada_Lista_Reproduccion_General_Panel(nombre_Archivo,idx);
                            jPanelPlaylist.add(entrada_Lista_Reproduccion_General_Panel);
                            rutas.push_back(ruta);
                            componente_Reproducto_Lista_Audio.mediaListPlayer().list().media().add(ruta);
                            idx++;
                        }
                        
                        nodo_actual = rutas.front();
                        indice = 0;
                        Cargar_Metadatos();
                        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().play();
                        jSliderVolume.setEnabled(true);
                        jSliderVolume.setValue(100);
                        jSliderRate.setEnabled(true);
                        jSliderVolume.setValue(100);
                        jLabelVolumeUp.setEnabled(true);
                        jLabelVolumeDown.setEnabled(true);
                        jLabelRateUp.setEnabled(true);
                        jLabelRateDown.setEnabled(true);
                        jLabelNext.setEnabled(true);
                        jLabelPrevious.setEnabled(true);
                        jLabelStop.setEnabled(true);
                        jLabelPlayPause.setEnabled(true);
                        jSliderProgress.setEnabled(true);
                        jPanelBands.setEnabled(true);
                        jSliderBandPreamp.setEnabled(true);
                        jComboBoxPresets.setEnabled(true);
                    }
                }
            }
        }
        
        System.gc();
    }//GEN-LAST:event_jLabelOpenFolderMouseClicked

    @SuppressWarnings("null")
    private void jLabelOpenFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelOpenFilesMouseClicked

        // TODO add your handling code here:
        JFileChooser escogedor_Archivos;
        FileNameExtensionFilter filtro;
        int resultado;
        File[] archivos_Abiertos;
        if(SwingUtilities.isLeftMouseButton(evt)){

            escogedor_Archivos = new JFileChooser();
            filtro = new FileNameExtensionFilter("Archivos De Música", "mp3", "flac", "aac", "wav","ogg");
            escogedor_Archivos.addChoosableFileFilter(filtro);
            escogedor_Archivos.setFileSelectionMode(JFileChooser.FILES_ONLY);
            escogedor_Archivos.setAcceptAllFileFilterUsed(true);
            escogedor_Archivos.setApproveButtonText("Reproducir Archivos");
            escogedor_Archivos.setMultiSelectionEnabled(true);
            resultado = escogedor_Archivos.showOpenDialog(this);

            if (resultado == JFileChooser.APPROVE_OPTION) {
                archivos_Abiertos = escogedor_Archivos.getSelectedFiles();
                if(archivos_Abiertos != null){
                    
                    if(archivos_Abiertos.length > 0){
                        int indice_auxiliar = 0;
                        rutas.clear();
                        bandera_Siguiente_Pista = false;
                        bandera_Anterior_Pista = true;
                        bandera_Indice_Cero = false;
                        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().stop();
                        componente_Reproducto_Lista_Audio.mediaListPlayer().list().media().clear();
                        jPanelPlaylist.removeAll();

                        File archivos_Abierto;
                        String ruta;
                        String nombre_Archivo;
                        Entrada_Lista_Reproduccion_General_Panel entrada_Lista_Reproduccion_General_Panel;

                        for (int i = 0; i < archivos_Abiertos.length; i++) {
                            archivos_Abierto = archivos_Abiertos[i];
                            ruta = archivos_Abierto.getAbsolutePath();
                            nombre_Archivo = archivos_Abierto.getName();
                            entrada_Lista_Reproduccion_General_Panel = new Entrada_Lista_Reproduccion_General_Panel(nombre_Archivo, indice_auxiliar);
                            jPanelPlaylist.add(entrada_Lista_Reproduccion_General_Panel);
                            rutas.push_back(ruta);
                            componente_Reproducto_Lista_Audio.mediaListPlayer().list().media().add(ruta);
                            indice_auxiliar++;
                        }

                        nodo_actual = rutas.front();
                        indice = 0;
                        Cargar_Metadatos();
                        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().play();
                        jSliderVolume.setEnabled(true);
                        jSliderVolume.setValue(100);
                        jSliderRate.setEnabled(true);
                        jSliderVolume.setValue(100);
                        jLabelVolumeUp.setEnabled(true);
                        jSliderProgress.setEnabled(true);
                        jLabelVolumeDown.setEnabled(true);
                        jLabelRateUp.setEnabled(true);
                        jLabelRateDown.setEnabled(true);
                        jLabelNext.setEnabled(true);
                        jLabelPrevious.setEnabled(true);
                        jLabelStop.setEnabled(true);
                        jLabelPlayPause.setEnabled(true);
                        jPanelBands.setEnabled(true);
                        jSliderBandPreamp.setEnabled(true);
                        jComboBoxPresets.setEnabled(true);
                    }
                    
                }
            }
        }
    }//GEN-LAST:event_jLabelOpenFilesMouseClicked

    private void jSliderBand6StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand6StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand6.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(6, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand6.setText(valor_string);
    }//GEN-LAST:event_jSliderBand6StateChanged

    private void jSliderBand1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand1StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand1.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(1, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand1.setText(valor_string);
    }//GEN-LAST:event_jSliderBand1StateChanged

    private void jSliderBand2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand2StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand2.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(2, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand2.setText(valor_string);
    }//GEN-LAST:event_jSliderBand2StateChanged

    private void jSliderBand3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand3StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand3.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(3, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand3.setText(valor_string);
    }//GEN-LAST:event_jSliderBand3StateChanged

    private void jSliderBand4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand4StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand4.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(4, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand4.setText(valor_string);
    }//GEN-LAST:event_jSliderBand4StateChanged

    private void jSliderBand5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand5StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand5.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(5, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand5.setText(valor_string);
    }//GEN-LAST:event_jSliderBand5StateChanged

    private void jSliderBand0StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand0StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand0.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(0, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand0.setText(valor_string);
    }//GEN-LAST:event_jSliderBand0StateChanged

    private void jSliderBand7StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand7StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand7.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(7, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand7.setText(valor_string);
    }//GEN-LAST:event_jSliderBand7StateChanged

    private void jSliderBand8StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand8StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand8.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(8, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand8.setText(valor_string);
    }//GEN-LAST:event_jSliderBand8StateChanged

    private void jSliderBand9StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBand9StateChanged
        // TODO add your handling code here:
        int valor = jSliderBand9.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setAmp(9, valor);
        String valor_string = String.valueOf(valor);
        jLabelBand9.setText(valor_string);
    }//GEN-LAST:event_jSliderBand9StateChanged

    private void jSliderBandPreampStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBandPreampStateChanged
        // TODO add your handling code here:
        int valor = jSliderBandPreamp.getValue();
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setPreamp(valor);
        String valor_string = String.valueOf(valor);
        jLabelPreamp.setText(valor_string);
    }//GEN-LAST:event_jSliderBandPreampStateChanged

    private void jComboBoxPresetsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPresetsItemStateChanged
        // TODO add your handling code here:
        
        @SuppressWarnings("element-type-mismatch")
        Equalizer ecualizador = mapa_presets.get(jComboBoxPresets.getSelectedItem());
        if(ecualizador != null){
            componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().setEqualizer(ecualizador);

            int amp0 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(0);
            int amp1 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(1);
            int amp2 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(2);
            int amp3 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(3);
            int amp4 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(4);
            int amp5 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(5);
            int amp6 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(6);
            int amp7 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(7);
            int amp8 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(8);
            int amp9 = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().amp(9);
            int preamp = (int) componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().equalizer().preamp();

            jSliderBand0.setValue(amp0);
            jSliderBand1.setValue(amp1);
            jSliderBand2.setValue(amp2);
            jSliderBand3.setValue(amp3);
            jSliderBand4.setValue(amp4);
            jSliderBand5.setValue(amp5);
            jSliderBand6.setValue(amp6);
            jSliderBand7.setValue(amp7);
            jSliderBand8.setValue(amp8);
            jSliderBand9.setValue(amp9);
            jSliderBandPreamp.setValue(preamp);

            jLabelBand0.setText(String.valueOf(amp0));
            jLabelBand1.setText(String.valueOf(amp1));
            jLabelBand2.setText(String.valueOf(amp2));
            jLabelBand3.setText(String.valueOf(amp3));
            jLabelBand4.setText(String.valueOf(amp4));
            jLabelBand5.setText(String.valueOf(amp5));
            jLabelBand6.setText(String.valueOf(amp6));
            jLabelBand7.setText(String.valueOf(amp7));
            jLabelBand8.setText(String.valueOf(amp8));
            jLabelBand9.setText(String.valueOf(amp9));
            jLabelPreamp.setText(String.valueOf(preamp));

        }
        
    }//GEN-LAST:event_jComboBoxPresetsItemStateChanged

    /**Sets Play And Pause Functions*/
    private void Establecer_Reproduccion_Pausa() {
        
        if (componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() != State.STOPPED && !rutas.is_empty()) {

            if (componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() == State.PLAYING) {
                componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setPause(true);
                jLabelPlayPause.setIcon(icono_Play);
            } else if (componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() == State.PAUSED) {
                componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setPause(false);
                jLabelPlayPause.setIcon(icono_Pause);
            }
        }
    }
    
    /**Sets Next Media Function*/
    private void Siguiente_Pista(){
        if(nodo_actual != null){
            if(nodo_actual.has_next()){
                componente_Reproducto_Lista_Audio.mediaListPlayer().controls().playNext();
            }
        }
    }
    
    /**Sets Previous Media Function*/
    private void Anterior_Pista(){
        if(nodo_actual != null){
            if(nodo_actual.has_previous()){
                bandera_Anterior_Pista = true;
                bandera_Siguiente_Pista = false;
                componente_Reproducto_Lista_Audio.mediaListPlayer().controls().playPrevious();
            }
        }
    }

    /**Sets Stop Function*/
    private void Establecer_Alto() {
        if (componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() != State.STOPPED && !rutas.is_empty()) {
            componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().stop();
        }
    }

    /**Cleans Screen Information*/
    private void Limpiar_Informacion(){
        jLabelTitle.setText("Titulo");
        jLabelArtist.setText("Artista");
        jLabelAlbum.setText("Album");
        jLabelCoverArt.setIcon(null);
        jSliderProgress.setValue(0);
        jLabelProgress.setText("00:00:00");
        jLabelTotalDuration.setText("00:00:00");
        jSliderProgress.setEnabled(false);
        jLabelPlayPause.setIcon(icono_Play);
        jSliderVolume.setEnabled(false);
        jSliderVolume.setValue(100);
        jSliderRate.setEnabled(false);
        jSliderVolume.setValue(100);
        jLabelVolumeUp.setEnabled(false);
        jLabelVolumeDown.setEnabled(false);
        jLabelRateUp.setEnabled(false);
        jLabelRateDown.setEnabled(false);
        jLabelNext.setEnabled(false);
        jLabelPrevious.setEnabled(false);
        jLabelStop.setEnabled(false);
        jLabelPlayPause.setEnabled(false);
        jPanelBands.setEnabled(false);
        jSliderBandPreamp.setEnabled(false);
        jComboBoxPresets.setEnabled(false);
        jPanelPlaylist.removeAll();
    }

  
    /**Charge Metadata On Screen*/
    private void Cargar_Metadatos(){
        try {
            String mrl;
            File archivo_Leer = new File(nodo_actual.element());
            AudioFile archivo_Audio;
            Tag tag;
            
            if(archivo_Leer.exists()){      
               
                archivo_Audio = AudioFileIO.read(archivo_Leer);
                
                tag = archivo_Audio.getTag();
                String titulo = tag.getFirst(FieldKey.TITLE);
                String artista = tag.getFirst(FieldKey.ARTIST);
                String album = tag.getFirst(FieldKey.ALBUM);
                String genero = tag.getFirst(FieldKey.GENRE);
                String anio = tag.getFirst(FieldKey.YEAR);
                String informacion_archivo = 
                        MainFrame.Concatenar(archivo_Audio.getExt().toUpperCase()," File - ",archivo_Audio.getAudioHeader().getBitRate()," kbps");
                String letras = tag.getFirst(FieldKey.LYRICS);
                if(titulo == null){
                    titulo = archivo_Leer.getName();
                }
                if(titulo.isEmpty()){
                    titulo = archivo_Leer.getName();
                }
                jLabelTitle.setToolTipText(MainFrame.Concatenar("Titulo: ",titulo));
                jLabelArtist.setToolTipText(MainFrame.Concatenar("Artista: ",artista));
                jLabelAlbum.setToolTipText(MainFrame.Concatenar("Album: ",album));

                jLabelTitle.setText(titulo);
                jLabelArtist.setText(artista);
                jLabelAlbum.setText(album);
                
                jLabelGenreValue.setText(genero);
                jLabelYearValue.setText(anio);
                jLabelMediaValue.setText(informacion_archivo);
                jTextPaneLyrics.setText(letras);

                Artwork arte = tag.getFirstArtwork();
                Image entrada_Lista_Reproduccion_Imagen = null;
                if(arte != null){
                    
                    int largo_Imagen = jLabelCoverArt.getHeight();
                    Image imagen_Real = ((Image)arte.getImage());
                    if(imagen_Real != null){
                        Image arte_Real_Imagen = imagen_Real.getScaledInstance(largo_Imagen, largo_Imagen, Image.SCALE_SMOOTH);
                        entrada_Lista_Reproduccion_Imagen = imagen_Real.getScaledInstance(63, 63, Image.SCALE_SMOOTH);
                        ImageIcon cover = new ImageIcon(arte_Real_Imagen);
                        jLabelCoverArt.setIcon(cover);
                        Establecer_Colores(arte_Real_Imagen);
                        arte_Real_Imagen.flush();
                        imagen_Real.flush();
                        
                    }
                } 
                Entrada_Lista_Reproduccion_General_Panel entrada_Lista_Reproduccion_General_Panel = (Entrada_Lista_Reproduccion_General_Panel)jPanelPlaylist.getComponent(indice);
                if(entrada_Lista_Reproduccion_General_Panel.No_Esta_Seteado()){
                    entrada_Lista_Reproduccion_General_Panel.Establecer_Titulo(titulo);
                    entrada_Lista_Reproduccion_General_Panel.Establecer_Artista(artista);
                    entrada_Lista_Reproduccion_General_Panel.Establecer_Album(album);
                    if(entrada_Lista_Reproduccion_Imagen != null){
                        entrada_Lista_Reproduccion_General_Panel.Establecer_Imagen_Arte(entrada_Lista_Reproduccion_Imagen);
                    }
                }
               
            }else{
                mrl = nodo_actual.element();
                JOptionPane.showMessageDialog(this, mrl,"El Archivo No Se Encontró",JOptionPane.ERROR_MESSAGE);
                rutas.remove(mrl);
                if((indice+1) < rutas.size()){
                    Siguiente_Pista();
                } else if((indice - 1) > 0){
                    Anterior_Pista();
                } else{
                    Establecer_Alto();
                }
            }
        } catch (CannotReadException | IOException | TagException | ReadOnlyFileException | InvalidAudioFrameException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),"ERROR ENCONTRADO",JOptionPane.ERROR_MESSAGE);
        }
        
    }

    public static void Play_Indice(int _indice){
        if(_indice > 0){
            indice = (_indice-1);
            nodo_actual = rutas.node(indice);
            componente_Reproducto_Lista_Audio.mediaListPlayer().controls().play(_indice);
            bandera_Indice_Cero = false;
        } else{
            indice = 0;
            bandera_Indice_Cero = true;
            componente_Reproducto_Lista_Audio.mediaListPlayer().controls().play(0);
        }
    }  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxPresets;
    private static javax.swing.JLabel jLabelAlbum;
    private static javax.swing.JLabel jLabelArtist;
    private javax.swing.JLabel jLabelBand0;
    private javax.swing.JLabel jLabelBand1;
    private javax.swing.JLabel jLabelBand2;
    private javax.swing.JLabel jLabelBand3;
    private javax.swing.JLabel jLabelBand4;
    private javax.swing.JLabel jLabelBand5;
    private javax.swing.JLabel jLabelBand6;
    private javax.swing.JLabel jLabelBand7;
    private javax.swing.JLabel jLabelBand8;
    private javax.swing.JLabel jLabelBand9;
    private static javax.swing.JLabel jLabelCoverArt;
    public javax.swing.JLabel jLabelGenreValue;
    public javax.swing.JLabel jLabelMediaValue;
    private javax.swing.JLabel jLabelNext;
    private javax.swing.JLabel jLabelOpenFiles;
    private javax.swing.JLabel jLabelOpenFolder;
    public javax.swing.JLabel jLabelPlayPause;
    private javax.swing.JLabel jLabelPreamp;
    private javax.swing.JLabel jLabelPreampTitle;
    private javax.swing.JLabel jLabelPreset;
    private javax.swing.JLabel jLabelPrevious;
    private javax.swing.JLabel jLabelProgress;
    private javax.swing.JLabel jLabelRateDown;
    private javax.swing.JLabel jLabelRateUp;
    private javax.swing.JLabel jLabelStop;
    private static javax.swing.JLabel jLabelTitle;
    private javax.swing.JLabel jLabelTotalDuration;
    private javax.swing.JLabel jLabelVolumeDown;
    private javax.swing.JLabel jLabelVolumeUp;
    public javax.swing.JLabel jLabelYearValue;
    private javax.swing.JPanel jPanelAudioControls;
    private javax.swing.JPanel jPanelBands;
    private javax.swing.JPanel jPanelControls;
    private javax.swing.JPanel jPanelEqualizer;
    private javax.swing.JPanel jPanelMediaInformation;
    private javax.swing.JPanel jPanelOpenFiles;
    private javax.swing.JPanel jPanelPlayerControls;
    private javax.swing.JPanel jPanelPlaylist;
    private javax.swing.JScrollPane jScrollPaneLyrics;
    private javax.swing.JScrollPane jScrollPanePlaylist;
    private javax.swing.JSlider jSliderBand0;
    private javax.swing.JSlider jSliderBand1;
    private javax.swing.JSlider jSliderBand2;
    private javax.swing.JSlider jSliderBand3;
    private javax.swing.JSlider jSliderBand4;
    private javax.swing.JSlider jSliderBand5;
    private javax.swing.JSlider jSliderBand6;
    private javax.swing.JSlider jSliderBand7;
    private javax.swing.JSlider jSliderBand8;
    private javax.swing.JSlider jSliderBand9;
    private javax.swing.JSlider jSliderBandPreamp;
    private javax.swing.JSlider jSliderProgress;
    private static javax.swing.JSlider jSliderRate;
    private static javax.swing.JSlider jSliderVolume;
    private javax.swing.JTabbedPane jTabbedPanelControls;
    public javax.swing.JTextPane jTextPaneLyrics;
    // End of variables declaration//GEN-END:variables

    @Override
    public void Iniciar_Componentes() {
        
        bandera_Mouse_Auxiliar = true;
        bandera_Indice_Cero = false;
        rutas = new DoublyLinkedList<>();
        bandera_Siguiente_Pista = bandera_Anterior_Pista = false;
        MediaPlayerFactory media_player_Factory = new MediaPlayerFactory();
        componente_Reproducto_Lista_Audio = new AudioListPlayerComponent(media_player_Factory);
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().setMediaPlayer(media_player_Factory.mediaPlayers().newMediaPlayer());
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().setEqualizer(media_player_Factory.equalizer().newEqualizer("Flat"));
        mapa_presets = media_player_Factory.equalizer().allPresetEqualizers();
        icono_Play = new ImageIcon(getClass().getResource("/resources/icons/play-button.png"));
        icono_Pause = new ImageIcon(getClass().getResource("/resources/icons/pause.png"));
        this.jLabelPlayPause.setIcon(icono_Play);
        
        jScrollPaneLyrics.getViewport().setOpaque(false);
        jScrollPanePlaylist.getViewport().setOpaque(false);
        jScrollPaneLyrics.getHorizontalScrollBar().setUnitIncrement(15);
        jScrollPaneLyrics.getVerticalScrollBar().setUnitIncrement(15);
        jScrollPanePlaylist.getVerticalScrollBar().setUnitIncrement(15);
        jScrollPanePlaylist.getHorizontalScrollBar().setUnitIncrement(15);
        
        Establecer_Eventos_Reproductor();
        
        Establecer_Presets_Ecualizador();
        
        Establecer_Amperajes();
    }

    @Override
    public void Colorear_Componentes() {
        
        Color transparente = new Color(0,0,0,0);
        jTabbedPanelControls.setBackground(transparente);
        Component[] componentes = this.getComponents();
        Component componente;

        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            componente.setForeground(primer_Color_Fuente);
        }

        jSliderRate.setForeground(primer_Color_Fuente);
        jSliderRate.setForeground(primer_Color_Fuente);
        jLabelTitle.setForeground(primer_Color_Fuente);
        jLabelAlbum.setForeground(primer_Color_Fuente);
        jLabelArtist.setForeground(primer_Color_Fuente);
        jLabelProgress.setForeground(primer_Color_Fuente);
        jLabelTotalDuration.setForeground(primer_Color_Fuente);
        jSliderProgress.setForeground(primer_Color_Fuente);
        jLabelCoverArt.setForeground(primer_Color_Fuente);

        componentes = jPanelMediaInformation.getComponents();

        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            componente.setForeground(primer_Color_Fuente);
        }

        componentes = jPanelEqualizer.getComponents();

        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            componente.setForeground(primer_Color_Fuente);
        }

        componentes = jPanelBands.getComponents();

        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            componente.setForeground(primer_Color_Fuente);
        }

        componentes = jPanelPlaylist.getComponents();

        Entrada_Lista_Reproduccion_General_Panel entrada_Lista_Reproduccion_General_Panel;
        for(int i = 0; i < componentes.length;i++){
            componente = componentes[i];
            entrada_Lista_Reproduccion_General_Panel = (Entrada_Lista_Reproduccion_General_Panel)componente;
            entrada_Lista_Reproduccion_General_Panel.Establecer_Colores_Fuente(primer_Color_Fuente);
        }

        TitledBorder borde = (TitledBorder)jLabelGenreValue.getBorder();
        borde.setTitleColor(primer_Color_Fuente);

        borde = (TitledBorder)jLabelYearValue.getBorder();
        borde.setTitleColor(primer_Color_Fuente);

        borde = (TitledBorder)jLabelMediaValue.getBorder();
        borde.setTitleColor(primer_Color_Fuente);

        borde = (TitledBorder)jTextPaneLyrics.getBorder();
        borde.setTitleColor(primer_Color_Fuente);

        borde = (TitledBorder)jPanelBands.getBorder();
        borde.setTitleColor(primer_Color_Fuente);

        jComboBoxPresets.setForeground(primer_Color_Fuente);
        jComboBoxPresets.setBackground(primer_Color);
        jTextPaneLyrics.setForeground(primer_Color_Fuente);

        setBackground(primer_Color);
    }
    
    
    @Override
    public void Establecer_Colores(Image image) {
       try {
            Random numero_Aleatorio = new Random(System.currentTimeMillis());
            int maximo_auxiliar = 0;
            PairDoublyLinkedList<Integer, Color> lista_Colores = new PairDoublyLinkedList<>();
            PixelGrabber obtener_Pixeles = new PixelGrabber(image, 0, 0, -1, -1, false);
            int largo_Imagen = image.getWidth(null)/2;
            int[] pixeles;
            int pixel,rojo,verde,azul,numero_Auxiliar,posicion;
            Color color;
            Pair<Integer, Color> par;
            if (obtener_Pixeles.grabPixels()) {
                pixeles = (int[]) obtener_Pixeles.getPixels();
                for(int i = 0; i < pixeles.length; i++){
                    pixel = pixeles[i];
                    rojo = (pixel  & 0x00ff0000) >> 16;
                    verde = (pixel & 0x0000ff00) >> 8;
                    azul = pixel & 0x000000ff;
                    color = new Color(rojo,verde,azul);
                    par = lista_Colores.get_from_second(color);
            
                    if (par != null) { //existe
                        numero_Auxiliar = par.first()+ 1;
                        par.first(numero_Auxiliar);
                        if (numero_Auxiliar > maximo_auxiliar) {
                            primer_Color = color;
                            maximo_auxiliar = numero_Auxiliar;
                        }
                    } else {
                        lista_Colores.push_back(1, color);
                    }

                    i += numero_Aleatorio.nextInt(largo_Imagen+1) + largo_Imagen;
                }

                segundo_Color = primer_Color;
            
                int iteraciones = 0;
                if(lista_Colores.size() > 1){
                    
                    while(Math.abs(segundo_Color.getRGB() - primer_Color.getRGB()) < 3000000){
                        posicion = numero_Aleatorio.nextInt((int)lista_Colores.size()-1);
                        segundo_Color = lista_Colores.get(posicion).second();
                        iteraciones++;
                        if(iteraciones > 25){
                             while(primer_Color.getRGB() == segundo_Color.getRGB()){
                                posicion = numero_Aleatorio.nextInt((int)lista_Colores.size()-1);
                                segundo_Color = lista_Colores.get(posicion).second();
                            }
                             break;
                        }
                    }
                }
               
                tercer_Color = segundo_Color;
                if(lista_Colores.size() > 2){
                    iteraciones = 0;
                    
                    while(Math.abs(tercer_Color.getRGB() - primer_Color.getRGB()) < 3000000 || Math.abs(segundo_Color.getRGB() - tercer_Color.getRGB()) < 3000000){
                        posicion = numero_Aleatorio.nextInt((int)lista_Colores.size()-1);
                        tercer_Color = lista_Colores.get(posicion).second();
                        iteraciones++;
                        if(iteraciones > 50){
                            while(tercer_Color.getRGB() == primer_Color.getRGB() || tercer_Color.getRGB() == segundo_Color.getRGB()){
                                posicion = numero_Aleatorio.nextInt((int)lista_Colores.size()-1);
                                tercer_Color = lista_Colores.get(posicion).second();
                            }
                            break;
                        }
                    }
                }
                
                rojo = primer_Color.getRed();
                primer_Color_Fuente = (rojo >= 155) ? Color.BLACK : Color.WHITE;
                rojo = segundo_Color.getRed();
                segundo_Color_Fuente = (rojo >= 155) ? Color.BLACK : Color.WHITE;
                rojo = tercer_Color.getRed();
                tercer_Color_Fuente = (rojo >= 155) ? Color.BLACK : Color.WHITE;
                lista_Colores.clear();
                
                Colorear_Componentes();
                
            }
            
        } catch (InterruptedException ex) {
            MainFrame.getLogger().log(Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public void Limpiar()  {
        componente_Reproducto_Lista_Audio.mediaListPlayer().controls().stop();
        componente_Reproducto_Lista_Audio.release();
        icono_Play.getImage().flush();
        icono_Pause.getImage().flush();
        rutas.clear();
    }

    @Override
    public void Establecer_Eventos_Reproductor() {
         jSliderRate.addChangeListener((ChangeEvent e) -> {
            Object fuente = e.getSource();
            float rate = (float)(((JSlider) fuente).getValue() / 100f);
            componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setRate(rate); 
        });
        
        jSliderRate.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(SwingUtilities.isRightMouseButton(e)){
                    jSliderRate.setValue(100);
                    componente_Reproducto_Lista_Audio.mediaPlayer().controls().setRate(1); 
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
        
        jSliderVolume.addChangeListener((ChangeEvent e) -> {
            Object fuente = e.getSource();
            int volumen = ((JSlider) fuente).getValue();
            componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().setVolume(volumen);
        });

        jSliderVolume.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    jSliderVolume.setValue(100);
                    componente_Reproducto_Lista_Audio.mediaPlayer().audio().setVolume(100);
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
        
        
        //Listener para el slider progress
        jSliderProgress.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
               
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if(SwingUtilities.isLeftMouseButton(e)){
                    bandera_Mouse_Auxiliar = false;
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if(!bandera_Mouse_Auxiliar){
                  bandera_Mouse_Auxiliar = true;
                }
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
            
        });

        //Control para cambiar a posicion de reproduccion
        jSliderProgress.addChangeListener((ChangeEvent e) -> {
            if (!bandera_Mouse_Auxiliar) {
                Object fuente = e.getSource();
                componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setTime(((JSlider) fuente).getValue());
            }
        });
        
        componente_Reproducto_Lista_Audio.mediaListPlayer().events().addMediaListPlayerEventListener(new MediaListPlayerEventListener() {
            @Override
            public void mediaListPlayerFinished(MediaListPlayer mlp) {
            }

            @Override
            public void nextItem(MediaListPlayer mlp, MediaRef mr) {
                bandera_Siguiente_Pista = true;
                bandera_Anterior_Pista = false;
            }

            @Override
            public void stopped(MediaListPlayer mlp) {
                Limpiar_Informacion();
            }
        });
       
        componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().events().addMediaPlayerEventListener(new MediaPlayerEventListener() {
            String segundos;
            int tiempo, valor, longitud_Real;
            long longitud;
            
            @Override
            public void mediaChanged(MediaPlayer mp, MediaRef mr) {
                if (bandera_Siguiente_Pista) {
                    if (nodo_actual.has_next()) {
                        if (!bandera_Indice_Cero) {
                            nodo_actual = nodo_actual.next();
                            indice++;
                        } else {
                            nodo_actual = rutas.front();
                            bandera_Indice_Cero = false;
                        }
                        Cargar_Metadatos();
                        bandera_Siguiente_Pista = true;
                    }
                }
                if (bandera_Anterior_Pista) {
                    if (nodo_actual.has_previous()) {
                        indice--;
                        nodo_actual = nodo_actual.previous();
                        Cargar_Metadatos();
                    }
                }
            }

            @Override
            public void opening(MediaPlayer mp) {
            }

            @Override
            public void buffering(MediaPlayer mp, float f) {
                
            }

            @Override
            public void playing(MediaPlayer mp) {
                
            }

            @Override
            public void paused(MediaPlayer mp) {
                
            }

            @Override
            public void stopped(MediaPlayer mp) {
                
            }

            @Override
            public void forward(MediaPlayer mp) {
                
            }

            @Override
            public void backward(MediaPlayer mp) {
                
            }

            @Override
            public void finished(MediaPlayer mp) {
                
                
            }

            @Override
            public void timeChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void positionChanged(MediaPlayer mp, float f) {
               
                if(bandera_Mouse_Auxiliar){
                    if(componente_Reproducto_Lista_Audio != null){
                        tiempo = (int)componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().time();
                        valor = tiempo / 1000;
                        jSliderProgress.setValue(tiempo);
                        segundos = MainFrame.Convertir_Segundos(valor);
                        jLabelProgress.setText(segundos);
                    }
                    
                }
            }

            @Override
            public void seekableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void pausableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void titleChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void snapshotTaken(MediaPlayer mp, String string) {
                
            }

            @Override
            public void lengthChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void videoOutput(MediaPlayer mp, int i) {
                
            }

            @Override
            public void scrambledChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void elementaryStreamAdded(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamDeleted(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamSelected(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void corked(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void muted(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void volumeChanged(MediaPlayer mp, float f) {
                
            }

            @Override
            public void audioDeviceChanged(MediaPlayer mp, String string) {
                
            }

            @Override
            public void chapterChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void error(MediaPlayer mp) {
                
            }

            @Override
            public void mediaPlayerReady(MediaPlayer mp) {
                
                longitud = componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().status().length();
                if(longitud < Integer.MAX_VALUE){
                    longitud_Real = (int)longitud;
                    jSliderProgress.setMaximum(longitud_Real);
                    jLabelTotalDuration.setText(MainFrame.Convertir_Segundos(longitud_Real/1000));
                    jLabelPlayPause.setIcon(icono_Pause);
                    componente_Reproducto_Lista_Audio.mediaListPlayer().mediaPlayer().mediaPlayer().audio().setVolume(jSliderVolume.getValue());
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Archivo Demasiado Grande","ERROR",JOptionPane.ERROR_MESSAGE);
                } 
            }
        });
    }
    
}
