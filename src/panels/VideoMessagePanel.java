/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import uk.co.caprica.vlcj.media.MediaRef;
import uk.co.caprica.vlcj.media.TrackType;
import uk.co.caprica.vlcj.player.base.MediaPlayer;
import uk.co.caprica.vlcj.player.base.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.base.State;
import uk.co.caprica.vlcj.player.component.EmbeddedMediaPlayerComponent;
import courseroom.MainFrame;

/**
 *
 * @author LENOVO
 */
public class VideoMessagePanel extends javax.swing.JPanel {

    private EmbeddedMediaPlayerComponent embeddedMediaPlayerComponent;
    private boolean flag;
    private boolean play;
    private String mrl;
    
    
    public VideoMessagePanel(String sender, String date, String _mrl, String title) {
        
        initComponents();
        jLabelDate.setText(date);
        jLabelSender.setText(sender);
        play = false;
        
        jLabelDate.setForeground(MainFrame.getFontColor());
        jLabelSender.setForeground(MainFrame.getFontColor());
        jLabelDate.setBackground(MainFrame.getFirstColor());
        jLabelSender.setBackground(MainFrame.getFirstColor());
        
        jLabelDuration.setForeground(MainFrame.getSecondFontColor());
        jLabelProgress.setForeground(MainFrame.getSecondFontColor());
        jLabelTitle.setForeground(MainFrame.getSecondFontColor());
        jSliderProgress.setForeground(MainFrame.getSecondFontColor());
        jPanelControls.setBackground(MainFrame.getSecondColor());
        
        flag = true;
        embeddedMediaPlayerComponent = new EmbeddedMediaPlayerComponent();
        jPanelVideoView.add("videoView",embeddedMediaPlayerComponent.videoSurfaceComponent());
        setPlayerEvents();
        embeddedMediaPlayerComponent.mediaPlayer().video().setAdjustVideo(true);
        jLabelTitle.setText(title);
        mrl = _mrl;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelSender = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jPanelVideoContent = new javax.swing.JPanel();
        jPanelVideoView = new javax.swing.JPanel();
        jPanelControls = new javax.swing.JPanel();
        jLabelProgress = new javax.swing.JLabel();
        jLabelTitle = new javax.swing.JLabel();
        jSliderProgress = new javax.swing.JSlider();
        jLabelDuration = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(800, 520));
        setMinimumSize(new java.awt.Dimension(800, 520));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(800, 520));

        jLabelSender.setFont(new java.awt.Font("Gadugi", 1, 18)); // NOI18N
        jLabelSender.setText("ALSOALSMAODLAOSLADOAA");
        jLabelSender.setOpaque(true);

        jLabelDate.setFont(new java.awt.Font("Gadugi", 1, 18)); // NOI18N
        jLabelDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDate.setText("MIÃ‰RCOLES 25 De OCTUBRE DE 2021 - 10:10 A.M");
        jLabelDate.setOpaque(true);

        jPanelVideoContent.setOpaque(false);

        jPanelVideoView.setOpaque(false);
        jPanelVideoView.setLayout(new java.awt.CardLayout());

        jPanelControls.setBackground(java.awt.Color.black);

        jLabelProgress.setBackground(java.awt.Color.black);
        jLabelProgress.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        jLabelProgress.setForeground(java.awt.Color.white);
        jLabelProgress.setText("00:00:00");

        jLabelTitle.setBackground(java.awt.Color.black);
        jLabelTitle.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        jLabelTitle.setForeground(java.awt.Color.white);
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("Title");

        jSliderProgress.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jSliderProgress.setValue(0);
        jSliderProgress.setMaximumSize(new java.awt.Dimension(32767, 16));
        jSliderProgress.setMinimumSize(new java.awt.Dimension(36, 16));

        jLabelDuration.setBackground(java.awt.Color.black);
        jLabelDuration.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        jLabelDuration.setForeground(java.awt.Color.white);
        jLabelDuration.setText("00:00:00");

        javax.swing.GroupLayout jPanelControlsLayout = new javax.swing.GroupLayout(jPanelControls);
        jPanelControls.setLayout(jPanelControlsLayout);
        jPanelControlsLayout.setHorizontalGroup(
            jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelControlsLayout.createSequentialGroup()
                        .addComponent(jLabelProgress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSliderProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelDuration))
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelControlsLayout.setVerticalGroup(
            jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlsLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                    .addGroup(jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSliderProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelDuration)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelVideoContentLayout = new javax.swing.GroupLayout(jPanelVideoContent);
        jPanelVideoContent.setLayout(jPanelVideoContentLayout);
        jPanelVideoContentLayout.setHorizontalGroup(
            jPanelVideoContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVideoContentLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanelVideoContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelVideoView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanelVideoContentLayout.setVerticalGroup(
            jPanelVideoContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVideoContentLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanelVideoView, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelVideoContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSender)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSender)
                    .addComponent(jLabelDate))
                .addGap(0, 0, 0)
                .addComponent(jPanelVideoContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
     /**Sets Play And Pause Functions*/
    private void setPlayPause() {
        
        if(!play){
            embeddedMediaPlayerComponent.mediaPlayer().media().play(mrl);
            play = true;
        }
        
        if (embeddedMediaPlayerComponent != null) {

            if (embeddedMediaPlayerComponent.mediaPlayer().status().state() == State.PLAYING) {
                embeddedMediaPlayerComponent.mediaPlayer().controls().setPause(true);
            } else if (embeddedMediaPlayerComponent.mediaPlayer().status().state() == State.PAUSED) {
                embeddedMediaPlayerComponent.mediaPlayer().controls().setPause(false);
            }
        }
    }
     /**Sets Stop Function*/
    private void setStop() {
        if(embeddedMediaPlayerComponent != null){
            if (embeddedMediaPlayerComponent.mediaPlayer().status().state() != State.STOPPED) {
                embeddedMediaPlayerComponent.mediaPlayer().controls().stop();
                jLabelDuration.setText("00:00:00");
                jLabelProgress.setText("00:00:00");
                jSliderProgress.setValue(0);
                play = false;
                System.gc();
            }
        }
    }
    
    /**Creates and initializes all player events*/
    private void setPlayerEvents(){
        
       
       
        //Listener para el slider progress
        jSliderProgress.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
               
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if(SwingUtilities.isLeftMouseButton(e)){
                    flag = false;
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if(!flag){
                  flag = true;
                }
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
            
        });

        //Control para cambiar a posicion de reproduccion
        jSliderProgress.addChangeListener((ChangeEvent e) -> {
            if (!flag) {
                Object source = e.getSource();
                embeddedMediaPlayerComponent.mediaPlayer().controls().setTime(((JSlider) source).getValue());
            }
        });
        embeddedMediaPlayerComponent.videoSurfaceComponent().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(SwingUtilities.isLeftMouseButton(e)){
                    if(e.getClickCount() == 1){
                        setPlayPause();
                    }
                    else if(e.getClickCount() == 2){
                        setStop();
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
                
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                
            }

            @Override
            public void mouseExited(MouseEvent e) {
                
            }
        });
        
      
        embeddedMediaPlayerComponent.mediaPlayer().events().addMediaPlayerEventListener(new MediaPlayerEventListener() {
            @Override
            public void mediaChanged(MediaPlayer mp, MediaRef mr) {
            }

            @Override
            public void opening(MediaPlayer mp) {
            }

            @Override
            public void buffering(MediaPlayer mp, float f) {
                
            }

            @Override
            public void playing(MediaPlayer mp) {
                
            }

            @Override
            public void paused(MediaPlayer mp) {
                
            }

            @Override
            public void stopped(MediaPlayer mp) {
                
            }

            @Override
            public void forward(MediaPlayer mp) {
                
            }

            @Override
            public void backward(MediaPlayer mp) {
                
            }

            @Override
            public void finished(MediaPlayer mp) {
                play = false;
                jSliderProgress.setValue(0);
                jLabelProgress.setText("00:00:00");
                jLabelDuration.setText("00:00:00");
                System.gc();
                
            }

            @Override
            public void timeChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void positionChanged(MediaPlayer mp, float f) {
                if(flag){
                    if(embeddedMediaPlayerComponent != null){
                        int tiempo = (int)embeddedMediaPlayerComponent.mediaPlayer().status().time();
                     
                        int value = tiempo / 1000;
                        jSliderProgress.setValue(tiempo);
                        String seconds = secondsToString(value);
                        jLabelProgress.setText(seconds);
                        seconds = null;
                    }
                    
                }
            }

            @Override
            public void seekableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void pausableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void titleChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void snapshotTaken(MediaPlayer mp, String string) {
                
            }

            @Override
            public void lengthChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void videoOutput(MediaPlayer mp, int i) {
                
            }

            @Override
            public void scrambledChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void elementaryStreamAdded(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamDeleted(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamSelected(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void corked(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void muted(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void volumeChanged(MediaPlayer mp, float f) {
                
            }

            @Override
            public void audioDeviceChanged(MediaPlayer mp, String string) {
                
            }

            @Override
            public void chapterChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void error(MediaPlayer mp) {
                
            }

            @Override
            public void mediaPlayerReady(MediaPlayer mp) {
                long longLenght = embeddedMediaPlayerComponent.mediaPlayer().status().length();
                if(longLenght < Integer.MAX_VALUE){
                    int lenght = (int)longLenght;
                    jSliderProgress.setMaximum(lenght);
                    jLabelDuration.setText(secondsToString(lenght/1000));
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Too Long File","ERROR",JOptionPane.ERROR_MESSAGE);
                } 
            }
        });
    }
    
    private String secondsToString(long seconds) {
        long absSeconds = Math.abs(seconds);
        String positive = String.format(
                "%02d:%02d:%02d",
                absSeconds / 3600,
                (absSeconds % 3600) / 60,
                absSeconds % 60);
        return seconds < 0 ? "-" + positive : positive;
    }
    
    public void dispose(){
        embeddedMediaPlayerComponent.release();
        embeddedMediaPlayerComponent = null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelDuration;
    private javax.swing.JLabel jLabelProgress;
    private javax.swing.JLabel jLabelSender;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelControls;
    private javax.swing.JPanel jPanelVideoContent;
    private javax.swing.JPanel jPanelVideoView;
    private javax.swing.JSlider jSliderProgress;
    // End of variables declaration//GEN-END:variables
}
