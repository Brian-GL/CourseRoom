/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.TagException;
import org.jaudiotagger.tag.images.Artwork;
import uk.co.caprica.vlcj.media.MediaRef;
import uk.co.caprica.vlcj.media.TrackType;
import uk.co.caprica.vlcj.player.base.MediaPlayer;
import uk.co.caprica.vlcj.player.base.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.base.State;
import uk.co.caprica.vlcj.player.component.AudioPlayerComponent;

/**
 *
 * @author LENOVO
 */
public class AudioMessagePanel extends javax.swing.JPanel {

    private AudioPlayerComponent audioPlayerComponent;
    private boolean flag;
    private boolean play;
    private String mrl;
    //Image Icons
    private ImageIcon play_icon, pause_icon;
    
    /**
     * Creates new form AudioMessagePanel
     */
    public AudioMessagePanel(String sender, String date, String _mrl, String title) {
        initComponents();
        jLabelDate.setText(date);
        jLabelSender.setText(sender);
        play = false;
        jLabelDate.setForeground(DashboardPanel.getFontColor());
        jLabelSender.setForeground(DashboardPanel.getFontColor());
        jLabelDate.setBackground(DashboardPanel.getFirstColor());
        jLabelSender.setBackground(DashboardPanel.getFirstColor());
        jPanelAudioInfo.setBackground(DashboardPanel.getSecondColor());
        jLabelDuration.setForeground(DashboardPanel.getSecondFontColor());
        jLabelProgress.setForeground(DashboardPanel.getSecondFontColor());
        jLabelTitle.setForeground(DashboardPanel.getSecondFontColor());
        jLabelArtist.setForeground(DashboardPanel.getSecondFontColor());
        jLabelAlbum.setForeground(DashboardPanel.getSecondFontColor());
        jSliderProgress.setForeground(DashboardPanel.getSecondFontColor());
        this.setBackground(DashboardPanel.getSecondColor());
        play_icon = new ImageIcon(getClass().getResource("/resources/icons/play-button.png"));
        pause_icon = new ImageIcon(getClass().getResource("/resources/icons/pause.png"));
        flag = true;
        audioPlayerComponent = new AudioPlayerComponent();
        setPlayerEvents();
        jLabelTitle.setText(title);
        mrl = _mrl;
        loadMetadata();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelSender = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jPanelAudioInfo = new javax.swing.JPanel();
        jLabelCoverArt = new javax.swing.JLabel();
        jLabelAlbum = new javax.swing.JLabel();
        jLabelArtist = new javax.swing.JLabel();
        jLabelPlayPause = new javax.swing.JLabel();
        jLabelProgress = new javax.swing.JLabel();
        jLabelTitle = new javax.swing.JLabel();
        jSliderProgress = new javax.swing.JSlider();
        jLabelDuration = new javax.swing.JLabel();
        jLabelStop = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(800, 432));
        setMinimumSize(new java.awt.Dimension(800, 432));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(800, 432));
        setRequestFocusEnabled(false);

        jLabelSender.setFont(new java.awt.Font("Gadugi", 1, 18)); // NOI18N
        jLabelSender.setText("USERNAME__102PALSOLA");
        jLabelSender.setOpaque(true);

        jLabelDate.setFont(new java.awt.Font("Gadugi", 1, 18)); // NOI18N
        jLabelDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDate.setText("MIÉRCOLES 31 DE DICIEMBRE DE 2021 -  10:40 P.M");
        jLabelDate.setOpaque(true);

        jLabelCoverArt.setMaximumSize(new java.awt.Dimension(380, 380));
        jLabelCoverArt.setMinimumSize(new java.awt.Dimension(380, 380));
        jLabelCoverArt.setPreferredSize(new java.awt.Dimension(380, 380));

        jLabelAlbum.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        jLabelAlbum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelAlbum.setText("Álbum");

        jLabelArtist.setFont(new java.awt.Font("Gadugi", 0, 14)); // NOI18N
        jLabelArtist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelArtist.setText("Artista");

        jLabelPlayPause.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPlayPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/play-button.png"))); // NOI18N
        jLabelPlayPause.setToolTipText("Play/Pause Media");
        jLabelPlayPause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPlayPauseMouseClicked(evt);
            }
        });

        jLabelProgress.setBackground(java.awt.Color.black);
        jLabelProgress.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        jLabelProgress.setForeground(java.awt.Color.white);
        jLabelProgress.setText("00:00:00");
        jLabelProgress.setMaximumSize(new java.awt.Dimension(48, 20));
        jLabelProgress.setMinimumSize(new java.awt.Dimension(48, 20));
        jLabelProgress.setPreferredSize(new java.awt.Dimension(48, 20));

        jLabelTitle.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("Titulo");

        jSliderProgress.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        jSliderProgress.setValue(0);
        jSliderProgress.setMaximumSize(new java.awt.Dimension(32767, 16));
        jSliderProgress.setMinimumSize(new java.awt.Dimension(36, 16));

        jLabelDuration.setBackground(java.awt.Color.black);
        jLabelDuration.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        jLabelDuration.setForeground(java.awt.Color.white);
        jLabelDuration.setText("00:00:00");
        jLabelDuration.setMaximumSize(new java.awt.Dimension(48, 20));
        jLabelDuration.setMinimumSize(new java.awt.Dimension(48, 20));
        jLabelDuration.setPreferredSize(new java.awt.Dimension(48, 20));

        jLabelStop.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/stop.png"))); // NOI18N
        jLabelStop.setToolTipText("Stop Media");
        jLabelStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelStopMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelAudioInfoLayout = new javax.swing.GroupLayout(jPanelAudioInfo);
        jPanelAudioInfo.setLayout(jPanelAudioInfoLayout);
        jPanelAudioInfoLayout.setHorizontalGroup(
            jPanelAudioInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAudioInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelCoverArt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanelAudioInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelAudioInfoLayout.createSequentialGroup()
                        .addComponent(jLabelProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jSliderProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelArtist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelAudioInfoLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabelStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelPlayPause)
                        .addGap(96, 96, 96)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelAudioInfoLayout.setVerticalGroup(
            jPanelAudioInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAudioInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAudioInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCoverArt, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelAudioInfoLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabelTitle)
                        .addGap(10, 10, 10)
                        .addComponent(jLabelArtist)
                        .addGap(10, 10, 10)
                        .addComponent(jLabelAlbum)
                        .addGap(20, 20, 20)
                        .addGroup(jPanelAudioInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelAudioInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jSliderProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelAudioInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelPlayPause)
                            .addComponent(jLabelStop))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSender, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelDate))
                    .addComponent(jPanelAudioInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSender)
                    .addComponent(jLabelDate))
                .addGap(0, 0, 0)
                .addComponent(jPanelAudioInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelPlayPauseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPlayPauseMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            setPlayPause();
        }
    }//GEN-LAST:event_jLabelPlayPauseMouseClicked

    private void jLabelStopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelStopMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            setStop();
            cleanInfoMedia();
        }
    }//GEN-LAST:event_jLabelStopMouseClicked

    /**Cleans Screen Information*/
    private void cleanInfoMedia(){
        jSliderProgress.setValue(0);
        jLabelProgress.setText("00:00:00");
        jLabelDuration.setText("00:00:00");
        jLabelPlayPause.setIcon(play_icon);
        System.gc();
    }

  
    /**Charge Metadata On Screen*/
    private void loadMetadata(){
        try {
            File readFile = new File(mrl);
            
            if(readFile.exists()){      
               
                AudioFile audioFile = AudioFileIO.read(readFile);
                
                Tag tag = audioFile.getTag();
                String title = tag.getFirst(FieldKey.TITLE);
                String artist = tag.getFirst(FieldKey.ARTIST);
                String album = tag.getFirst(FieldKey.ALBUM);
                
                if(title == null){
                    title = readFile.getName();
                }
                
                if (title.isEmpty() || title.isBlank()){
                    title = readFile.getName();
                }
                
                if(artist == null){
                    artist = "";
                }
               
                if (album == null){
                    album = "";
                }
                jLabelTitle.setText(title);
                jLabelArtist.setText(artist);
                jLabelAlbum.setText(album);
              
                Artwork artWork = tag.getFirstArtwork();
                if(artWork != null){
                    
                    Image real_cover = ((Image)artWork.getImage());
                    if(real_cover != null){
                        Image coverImagen = real_cover.getScaledInstance(380, 380, Image.SCALE_SMOOTH);
                        ImageIcon cover = new ImageIcon(coverImagen);
                        jLabelCoverArt.setIcon(cover);
                        coverImagen.flush();
                        coverImagen = null;
                        real_cover.flush();
                        real_cover = null;
                        cover = null;
                        
                    }
                } 
                
                audioFile = null;
                tag = null;
                title = null;
                artist = null;
                album = null;
                artWork = null;
            }
            readFile = null;
        } catch (CannotReadException | IOException | TagException | InvalidAudioFrameException | ReadOnlyFileException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),"Found Error",JOptionPane.ERROR_MESSAGE);
        }
        
        System.gc();

    }
    
     /**Sets Play And Pause Functions*/
    private void setPlayPause() {
        
        if(!play){
            audioPlayerComponent.mediaPlayer().media().play(mrl);
            jLabelPlayPause.setIcon(pause_icon);
            play = true;
        }
        
        if (audioPlayerComponent != null) {

            if (audioPlayerComponent.mediaPlayer().status().state() == State.PLAYING) {
                audioPlayerComponent.mediaPlayer().controls().setPause(true);
                jLabelPlayPause.setIcon(play_icon);
            } else if (audioPlayerComponent.mediaPlayer().status().state() == State.PAUSED) {
                audioPlayerComponent.mediaPlayer().controls().setPause(false);
                jLabelPlayPause.setIcon(pause_icon);
            }
        }
    }
     /**Sets Stop Function*/
    private void setStop() {
        if(audioPlayerComponent != null){
            if (audioPlayerComponent.mediaPlayer().status().state() != State.STOPPED) {
                audioPlayerComponent.mediaPlayer().controls().stop();
                jLabelDuration.setText("00:00:00");
                jLabelProgress.setText("00:00:00");
                jSliderProgress.setValue(0);
                play = false;
            }
        }
    }
    
    /**Creates and initializes all player events*/
    private void setPlayerEvents(){
        
       
       
        //Listener para el slider progress
        jSliderProgress.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
               
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if(SwingUtilities.isLeftMouseButton(e)){
                    flag = false;
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if(!flag){
                  flag = true;
                }
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
            
        });

        //Control para cambiar a posicion de reproduccion
        jSliderProgress.addChangeListener((ChangeEvent e) -> {
            if (!flag) {
                Object source = e.getSource();
                audioPlayerComponent.mediaPlayer().controls().setTime(((JSlider) source).getValue());
            }
        });
       
        audioPlayerComponent.mediaPlayer().events().addMediaPlayerEventListener(new MediaPlayerEventListener() {
            @Override
            public void mediaChanged(MediaPlayer mp, MediaRef mr) {
            }

            @Override
            public void opening(MediaPlayer mp) {
            }

            @Override
            public void buffering(MediaPlayer mp, float f) {
                
            }

            @Override
            public void playing(MediaPlayer mp) {
                
            }

            @Override
            public void paused(MediaPlayer mp) {
                
            }

            @Override
            public void stopped(MediaPlayer mp) {
                
            }

            @Override
            public void forward(MediaPlayer mp) {
                
            }

            @Override
            public void backward(MediaPlayer mp) {
                
            }

            @Override
            public void finished(MediaPlayer mp) {
                play = false;
                cleanInfoMedia();
                
            }

            @Override
            public void timeChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void positionChanged(MediaPlayer mp, float f) {
                if(flag){
                    if(audioPlayerComponent != null){
                        int tiempo = (int)audioPlayerComponent.mediaPlayer().status().time();
                     
                        int value = tiempo / 1000;
                        jSliderProgress.setValue(tiempo);
                        String seconds = secondsToString(value);
                        jLabelProgress.setText(seconds);
                        seconds = null;
                    }
                    
                }
            }

            @Override
            public void seekableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void pausableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void titleChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void snapshotTaken(MediaPlayer mp, String string) {
                
            }

            @Override
            public void lengthChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void videoOutput(MediaPlayer mp, int i) {
                
            }

            @Override
            public void scrambledChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void elementaryStreamAdded(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamDeleted(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamSelected(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void corked(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void muted(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void volumeChanged(MediaPlayer mp, float f) {
                
            }

            @Override
            public void audioDeviceChanged(MediaPlayer mp, String string) {
                
            }

            @Override
            public void chapterChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void error(MediaPlayer mp) {
                
            }

            @Override
            public void mediaPlayerReady(MediaPlayer mp) {
                long longLenght = audioPlayerComponent.mediaPlayer().status().length();
                if(longLenght < Integer.MAX_VALUE){
                    int lenght = (int)longLenght;
                    jSliderProgress.setMaximum(lenght);
                    jLabelDuration.setText(secondsToString(lenght/1000));
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Too Long File","ERROR",JOptionPane.ERROR_MESSAGE);
                } 
            }
        });
    }
    
    private String secondsToString(long seconds) {
        long absSeconds = Math.abs(seconds);
        String positive = String.format(
                "%02d:%02d:%02d",
                absSeconds / 3600,
                (absSeconds % 3600) / 60,
                absSeconds % 60);
        return seconds < 0 ? "-" + positive : positive;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelAlbum;
    private javax.swing.JLabel jLabelArtist;
    private javax.swing.JLabel jLabelCoverArt;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelDuration;
    public javax.swing.JLabel jLabelPlayPause;
    private javax.swing.JLabel jLabelProgress;
    private javax.swing.JLabel jLabelSender;
    private javax.swing.JLabel jLabelStop;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelAudioInfo;
    private javax.swing.JSlider jSliderProgress;
    // End of variables declaration//GEN-END:variables
}
