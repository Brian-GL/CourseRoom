/*
 * Copyright (C) 2022 LENOVO
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package frames.generales;


import datos.interfaces.Componentes_Interface;
import courseroom.CourseRoom;
import datos.interfaces.Limpieza_Interface;
import datos.interfaces.Reproductor_Interface;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import uk.co.caprica.vlcj.media.MediaRef;
import uk.co.caprica.vlcj.media.TrackType;
import uk.co.caprica.vlcj.player.base.MediaPlayer;
import uk.co.caprica.vlcj.player.base.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.base.State;
import uk.co.caprica.vlcj.player.component.EmbeddedMediaPlayerComponent;

/**
 *
 * @author LENOVO
 */
public class Lector_Video_General_Panel extends javax.swing.JFrame implements Limpieza_Interface, Componentes_Interface, Reproductor_Interface{

    
    private EmbeddedMediaPlayerComponent componente_Embebido_Reproductor_Video;
    private boolean bandera_Barra_Progreso;
    private boolean bandera_Reproduccion;
    private String mrl;
    
    /**
     * Creates new form Lector_Video_General_Panel
     */
    public Lector_Video_General_Panel(String _mrl, 
            String _titulo) {
        initComponents();
        
        this.setLocationRelativeTo(null);;
        
        titulo_JLabel.setText(_titulo);
        mrl = _mrl;
        
        
        Iniciar_Componentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo_JPanel = new javax.swing.JPanel();
        vista_Video_JPanel = new javax.swing.JPanel();
        controles_JPanel = new javax.swing.JPanel();
        progreso_JLabel = new javax.swing.JLabel();
        titulo_JLabel = new javax.swing.JLabel();
        progreso_JSlider = new javax.swing.JSlider();
        duracion_JLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CourseRoom - Lector De Video");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        fondo_JPanel.setBackground(java.awt.Color.black);
        fondo_JPanel.setLayout(new java.awt.BorderLayout());

        vista_Video_JPanel.setOpaque(false);
        vista_Video_JPanel.setPreferredSize(new java.awt.Dimension(400, 420));
        vista_Video_JPanel.setLayout(new java.awt.BorderLayout());
        fondo_JPanel.add(vista_Video_JPanel, java.awt.BorderLayout.CENTER);

        controles_JPanel.setOpaque(false);

        progreso_JLabel.setBackground(java.awt.Color.black);
        progreso_JLabel.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        progreso_JLabel.setForeground(java.awt.Color.white);
        progreso_JLabel.setText("00:00:00");

        titulo_JLabel.setBackground(java.awt.Color.black);
        titulo_JLabel.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        titulo_JLabel.setForeground(java.awt.Color.white);
        titulo_JLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo_JLabel.setText("Title");
        titulo_JLabel.setToolTipText("<html>\n<h3>TÃ­tulo del video</h3>\n</html>");

        progreso_JSlider.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        progreso_JSlider.setValue(0);
        progreso_JSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        progreso_JSlider.setMaximumSize(new java.awt.Dimension(32767, 16));
        progreso_JSlider.setMinimumSize(new java.awt.Dimension(36, 16));

        duracion_JLabel.setBackground(java.awt.Color.black);
        duracion_JLabel.setFont(new java.awt.Font("Gadugi", 1, 12)); // NOI18N
        duracion_JLabel.setForeground(java.awt.Color.white);
        duracion_JLabel.setText("00:00:00");

        javax.swing.GroupLayout controles_JPanelLayout = new javax.swing.GroupLayout(controles_JPanel);
        controles_JPanel.setLayout(controles_JPanelLayout);
        controles_JPanelLayout.setHorizontalGroup(
            controles_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controles_JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controles_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titulo_JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(controles_JPanelLayout.createSequentialGroup()
                        .addComponent(progreso_JLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progreso_JSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duracion_JLabel)))
                .addContainerGap())
        );
        controles_JPanelLayout.setVerticalGroup(
            controles_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controles_JPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(titulo_JLabel)
                .addGap(3, 3, 3)
                .addGroup(controles_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(progreso_JSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progreso_JLabel)
                    .addComponent(duracion_JLabel))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        fondo_JPanel.add(controles_JPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(fondo_JPanel, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.Limpiar();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    
    
     /**Sets Play And Pause Functions*/
    private void Establecer_Play_Pausa() {
        
        if(!bandera_Reproduccion){
            componente_Embebido_Reproductor_Video.mediaPlayer().media().play(mrl);
            progreso_JSlider.setEnabled(true);
            bandera_Reproduccion = true;
        }
        
        if (componente_Embebido_Reproductor_Video != null) {

            if (componente_Embebido_Reproductor_Video.mediaPlayer().status().state() == State.PLAYING) {
                componente_Embebido_Reproductor_Video.mediaPlayer().controls().setPause(true);
            } else if (componente_Embebido_Reproductor_Video.mediaPlayer().status().state() == State.PAUSED) {
                componente_Embebido_Reproductor_Video.mediaPlayer().controls().setPause(false);
            }
        }
    }
     /**Sets Stop Function*/
    private void Establecer_Alto() {
        if(componente_Embebido_Reproductor_Video != null){
            if (componente_Embebido_Reproductor_Video.mediaPlayer().status().state() != State.STOPPED) {
                componente_Embebido_Reproductor_Video.mediaPlayer().controls().stop();
                duracion_JLabel.setText("00:00:00");
                progreso_JLabel.setText("00:00:00");
                progreso_JSlider.setValue(0);
                progreso_JSlider.setEnabled(false);
                bandera_Reproduccion = false;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controles_JPanel;
    private javax.swing.JLabel duracion_JLabel;
    private javax.swing.JPanel fondo_JPanel;
    private javax.swing.JLabel progreso_JLabel;
    private javax.swing.JSlider progreso_JSlider;
    private javax.swing.JLabel titulo_JLabel;
    private javax.swing.JPanel vista_Video_JPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void Iniciar_Componentes() {
        
        bandera_Reproduccion = false;
        bandera_Barra_Progreso = true;
        
        componente_Embebido_Reproductor_Video = new EmbeddedMediaPlayerComponent();
        progreso_JSlider.setEnabled(false);
        Establecer_Eventos_Reproductor();
        componente_Embebido_Reproductor_Video.mediaPlayer().video().setAdjustVideo(true);
        
        try {
            Image logo_Imagen = ImageIO.read(getClass().getResource("/recursos/imagenes/Course_Room_Brand_Blue.png"));
            logo_Imagen = logo_Imagen.getScaledInstance(75, 62, Image.SCALE_SMOOTH);
            this.setIconImage(logo_Imagen);
            logo_Imagen.flush();
            
        }  catch (IOException ex) {
          
        }
        
        Colorear_Componentes();
        
        vista_Video_JPanel.add(componente_Embebido_Reproductor_Video.videoSurfaceComponent(), BorderLayout.CENTER);
        
        Establecer_Play_Pausa();
    }

    @Override
    public void Colorear_Componentes() {
        fondo_JPanel.setBackground(CourseRoom.Utilerias.Tercer_Color());
        duracion_JLabel.setForeground(CourseRoom.Utilerias.Tercer_Color_Fuente());
        progreso_JLabel.setForeground(CourseRoom.Utilerias.Tercer_Color_Fuente());
        titulo_JLabel.setForeground(CourseRoom.Utilerias.Tercer_Color_Fuente());
        progreso_JSlider.setForeground(CourseRoom.Utilerias.Tercer_Color_Fuente());
    }

    @Override
    public void Establecer_Eventos_Reproductor() {
        
         //Listener para el slider progress
        progreso_JSlider.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
               
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if(SwingUtilities.isLeftMouseButton(e)){
                    bandera_Barra_Progreso = false;
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if(!bandera_Barra_Progreso){
                  bandera_Barra_Progreso = true;
                }
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
            
        });

        //Control para cambiar a posicion de reproduccion
        progreso_JSlider.addChangeListener((ChangeEvent e) -> {
            if (!bandera_Barra_Progreso) {
                Object source = e.getSource();
                componente_Embebido_Reproductor_Video.mediaPlayer().controls().setTime(((JSlider) source).getValue());
            }
        });
        
        componente_Embebido_Reproductor_Video.videoSurfaceComponent().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(SwingUtilities.isLeftMouseButton(e)){
                    if(e.getClickCount() == 1){
                        Establecer_Play_Pausa();
                    }
                    else if(e.getClickCount() == 2){
                        Establecer_Alto();
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
                
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                
            }

            @Override
            public void mouseExited(MouseEvent e) {
                
            }
        });
        
       
        componente_Embebido_Reproductor_Video.mediaPlayer().events().addMediaPlayerEventListener(new MediaPlayerEventListener() {
            String segundos;
            int tiempo;
            int conversion_Tiempo;
            long longitud;
            int longitud_Real;
            
            @Override
            public void mediaChanged(MediaPlayer mp, MediaRef mr) {
                
            }

            @Override
            public void opening(MediaPlayer mp) {
                
            }

            @Override
            public void buffering(MediaPlayer mp, float f) {
                
            }

            @Override
            public void playing(MediaPlayer mp) {
                
            }

            @Override
            public void paused(MediaPlayer mp) {
                
            }

            @Override
            public void stopped(MediaPlayer mp) {
                
            }

            @Override
            public void forward(MediaPlayer mp) {
                
            }

            @Override
            public void backward(MediaPlayer mp) {
                
            }

            @Override
            public void finished(MediaPlayer mp) {
                bandera_Reproduccion = false;
                progreso_JSlider.setValue(0);
                progreso_JLabel.setText("00:00:00");
                duracion_JLabel.setText("00:00:00");
                System.gc();
            }

            @Override
            public void timeChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void positionChanged(MediaPlayer mp, float f) {
                 if (bandera_Barra_Progreso) {
                    if(componente_Embebido_Reproductor_Video != null){
                        tiempo = (int) componente_Embebido_Reproductor_Video.mediaPlayer().status().time();
                        conversion_Tiempo = tiempo / 1000;
                        progreso_JSlider.setValue(tiempo);
                        segundos = CourseRoom.Utilerias.Convertir_Segundos(conversion_Tiempo);
                        progreso_JLabel.setText(segundos);
                     }
                }
            }

            @Override
            public void seekableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void pausableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void titleChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void snapshotTaken(MediaPlayer mp, String string) {
                
            }

            @Override
            public void lengthChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void videoOutput(MediaPlayer mp, int i) {
                
            }

            @Override
            public void scrambledChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void elementaryStreamAdded(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamDeleted(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamSelected(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void corked(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void muted(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void volumeChanged(MediaPlayer mp, float f) {
                
            }

            @Override
            public void audioDeviceChanged(MediaPlayer mp, String string) {
                
            }

            @Override
            public void chapterChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void error(MediaPlayer mp) {
                
            }

            @Override
            public void mediaPlayerReady(MediaPlayer mp) {
                longitud = componente_Embebido_Reproductor_Video.mediaPlayer().status().length();
                if(longitud < Integer.MAX_VALUE){
                    longitud_Real = (int)longitud;
                    progreso_JSlider.setMaximum(longitud_Real);
                    duracion_JLabel.setText(CourseRoom.Utilerias.Convertir_Segundos(longitud_Real/1000));
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Archivo Demasiado Grande","ERROR",JOptionPane.ERROR_MESSAGE);
                } 
            }
        });
    }

    @Override
    public void Cargar_Metadatos() {
        //No soportado para este caso.
    }

    
    @Override
    public void Limpiar(){
        componente_Embebido_Reproductor_Video.release();
        componente_Embebido_Reproductor_Video = null;
        mrl = null;
    }


}
