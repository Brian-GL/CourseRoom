/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package media;

import data.structures.Node;
import data.collections.PairDoublyLinkedList;
import java.awt.Color;
import java.awt.Component;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.PixelGrabber;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.filechooser.FileNameExtensionFilter;import uk.co.caprica.vlcj.factory.MediaPlayerFactory;
import uk.co.caprica.vlcj.media.MediaRef;
import uk.co.caprica.vlcj.media.TrackType;
import uk.co.caprica.vlcj.player.base.MediaPlayer;
import uk.co.caprica.vlcj.player.base.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.base.State;
import uk.co.caprica.vlcj.player.component.AudioListPlayerComponent;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.TagException;
import org.jaudiotagger.tag.images.Artwork;
import data.collections.DoublyLinkedList;
import data.structures.Pair;
import uk.co.caprica.vlcj.player.list.MediaListPlayer;
import uk.co.caprica.vlcj.player.list.MediaListPlayerEventListener;

/**
 *
 * @author LENOVO
 */
public class MusicPanel extends javax.swing.JPanel{

    private boolean flag,movingNext, movingPrevious;
    private ImageIcon playImage;
    private ImageIcon pauseImage;
    
    private Color firstColor;
    private Color secondColor;
    private Color thirdColor;
    private Random colorRandom;
 
    private AudioListPlayerComponent audioListPlayerComponent;
    private DoublyLinkedList<String> paths;
    private Node<String> actualNodet;
    
    
    public MusicPanel() {
        initComponents();
        flag = true;
        movingNext = movingPrevious = false;
        paths = new DoublyLinkedList<>();
        MediaPlayerFactory mediaPlayerFactory = new MediaPlayerFactory();
        audioListPlayerComponent = new AudioListPlayerComponent(mediaPlayerFactory);
        audioListPlayerComponent.mediaListPlayer().mediaPlayer().setMediaPlayer(mediaPlayerFactory.mediaPlayers().newMediaPlayer());
        firstColor = Color.BLUE;
        secondColor = Color.BLACK;
        thirdColor = Color.WHITE;
        colorRandom = new Random(System.currentTimeMillis());
        playImage = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../resources/icons/play-button.png")));
        pauseImage = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../resources/icons/pause.png")));
        jLabelPlayPause.setIcon(playImage);
        setPlayerEvents();
        mediaPlayerFactory = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelInfo = new javax.swing.JPanel();
        jLabelCoverArt = new javax.swing.JLabel();
        jLabelTitle = new javax.swing.JLabel();
        jLabelArtist = new javax.swing.JLabel();
        jLabelAlbum = new javax.swing.JLabel();
        jLabelGenre = new javax.swing.JLabel();
        jPanelButtons = new javax.swing.JPanel();
        jSliderProgreso = new javax.swing.JSlider();
        jLabelDuracionTotal = new javax.swing.JLabel();
        jLabelProgreso = new javax.swing.JLabel();
        jSliderRate = new javax.swing.JSlider();
        jLabelOpenFiles = new javax.swing.JLabel();
        jLabelRate = new javax.swing.JLabel();
        jLabelPlayPause = new javax.swing.JLabel();
        jLabelStop = new javax.swing.JLabel();
        jLabelPrevious = new javax.swing.JLabel();
        jLabelNext = new javax.swing.JLabel();
        jLabelOpenFolder = new javax.swing.JLabel();

        setBackground(java.awt.Color.black);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        jPanelInfo.setBackground(java.awt.Color.black);
        jPanelInfo.setFocusable(false);
        jPanelInfo.setOpaque(false);
        jPanelInfo.setPreferredSize(new java.awt.Dimension(420, 500));

        jLabelCoverArt.setBackground(new java.awt.Color(0, 0, 0));
        jLabelCoverArt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCoverArt.setToolTipText("");
        jLabelCoverArt.setMaximumSize(new java.awt.Dimension(500, 500));
        jLabelCoverArt.setMinimumSize(new java.awt.Dimension(500, 500));
        jLabelCoverArt.setPreferredSize(new java.awt.Dimension(500, 500));

        jLabelTitle.setBackground(new java.awt.Color(0, 0, 0));
        jLabelTitle.setFont(new java.awt.Font("Gadugi", 1, 17)); // NOI18N
        jLabelTitle.setForeground(java.awt.Color.white);
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/cd.png"))); // NOI18N
        jLabelTitle.setText("Title");
        jLabelTitle.setToolTipText("");
        jLabelTitle.setFocusable(false);
        jLabelTitle.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jLabelTitle.setMinimumSize(new java.awt.Dimension(400, 50));
        jLabelTitle.setPreferredSize(new java.awt.Dimension(400, 50));

        jLabelArtist.setBackground(new java.awt.Color(0, 0, 0));
        jLabelArtist.setFont(new java.awt.Font("Gadugi", 1, 17)); // NOI18N
        jLabelArtist.setForeground(java.awt.Color.white);
        jLabelArtist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelArtist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/microphone.png"))); // NOI18N
        jLabelArtist.setText("Artist");
        jLabelArtist.setToolTipText("");
        jLabelArtist.setFocusable(false);
        jLabelArtist.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jLabelArtist.setMinimumSize(new java.awt.Dimension(400, 50));
        jLabelArtist.setPreferredSize(new java.awt.Dimension(400, 50));

        jLabelAlbum.setBackground(new java.awt.Color(0, 0, 0));
        jLabelAlbum.setFont(new java.awt.Font("Gadugi", 1, 17)); // NOI18N
        jLabelAlbum.setForeground(java.awt.Color.white);
        jLabelAlbum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelAlbum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/music-album.png"))); // NOI18N
        jLabelAlbum.setText("Album");
        jLabelAlbum.setToolTipText("");
        jLabelAlbum.setFocusable(false);
        jLabelAlbum.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jLabelAlbum.setMinimumSize(new java.awt.Dimension(400, 50));
        jLabelAlbum.setPreferredSize(new java.awt.Dimension(400, 50));

        jLabelGenre.setBackground(new java.awt.Color(0, 0, 0));
        jLabelGenre.setFont(new java.awt.Font("Gadugi", 1, 17)); // NOI18N
        jLabelGenre.setForeground(java.awt.Color.white);
        jLabelGenre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/rock.png"))); // NOI18N
        jLabelGenre.setText("Genre");
        jLabelGenre.setToolTipText("");
        jLabelGenre.setFocusable(false);
        jLabelGenre.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jLabelGenre.setMinimumSize(new java.awt.Dimension(400, 50));
        jLabelGenre.setPreferredSize(new java.awt.Dimension(400, 50));

        javax.swing.GroupLayout jPanelInfoLayout = new javax.swing.GroupLayout(jPanelInfo);
        jPanelInfo.setLayout(jPanelInfoLayout);
        jPanelInfoLayout.setHorizontalGroup(
            jPanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfoLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabelCoverArt, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addGap(66, 66, 66)
                .addGroup(jPanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelArtist, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(jLabelAlbum, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabelGenre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        jPanelInfoLayout.setVerticalGroup(
            jPanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(174, 174, 174))
            .addGroup(jPanelInfoLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(jLabelCoverArt, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jPanelButtons.setBackground(new java.awt.Color(0, 0, 0));
        jPanelButtons.setFocusable(false);
        jPanelButtons.setMinimumSize(new java.awt.Dimension(800, 90));
        jPanelButtons.setOpaque(false);

        jSliderProgreso.setBackground(new java.awt.Color(14, 30, 64));
        jSliderProgreso.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jSliderProgreso.setForeground(new java.awt.Color(104, 194, 232));
        jSliderProgreso.setMaximum(2147483647);
        jSliderProgreso.setValue(0);
        jSliderProgreso.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jSliderProgreso.setEnabled(false);
        jSliderProgreso.setFocusable(false);
        jSliderProgreso.setMinimumSize(new java.awt.Dimension(664, 20));
        jSliderProgreso.setPreferredSize(new java.awt.Dimension(664, 20));
        jSliderProgreso.setValueIsAdjusting(true);

        jLabelDuracionTotal.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        jLabelDuracionTotal.setForeground(new java.awt.Color(104, 194, 232));
        jLabelDuracionTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDuracionTotal.setText("00:00:00");
        jLabelDuracionTotal.setFocusable(false);

        jLabelProgreso.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        jLabelProgreso.setForeground(new java.awt.Color(104, 194, 232));
        jLabelProgreso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelProgreso.setText("00:00:00");
        jLabelProgreso.setFocusable(false);

        jSliderRate.setBackground(new java.awt.Color(14, 30, 64));
        jSliderRate.setMajorTickSpacing(10);
        jSliderRate.setMaximum(150);
        jSliderRate.setMinimum(50);
        jSliderRate.setToolTipText("Velocidad De Reproducción.");
        jSliderRate.setValue(100);
        jSliderRate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jSliderRate.setEnabled(false);
        jSliderRate.setFocusable(false);
        jSliderRate.setMaximumSize(new java.awt.Dimension(32767, 32));
        jSliderRate.setMinimumSize(new java.awt.Dimension(141, 32));
        jSliderRate.setPreferredSize(new java.awt.Dimension(141, 32));

        jLabelOpenFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/folder.png"))); // NOI18N
        jLabelOpenFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelOpenFilesMouseClicked(evt);
            }
        });

        jLabelRate.setFont(new java.awt.Font("Gadugi", 1, 14)); // NOI18N
        jLabelRate.setForeground(new java.awt.Color(104, 194, 232));
        jLabelRate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRate.setText("100%");
        jLabelRate.setFocusable(false);
        jLabelRate.setMaximumSize(new java.awt.Dimension(49, 32));
        jLabelRate.setMinimumSize(new java.awt.Dimension(49, 32));
        jLabelRate.setPreferredSize(new java.awt.Dimension(49, 32));

        jLabelPlayPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/play-button.png"))); // NOI18N
        jLabelPlayPause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPlayPauseMouseClicked(evt);
            }
        });

        jLabelStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/stop.png"))); // NOI18N
        jLabelStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelStopMouseClicked(evt);
            }
        });

        jLabelPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/previous.png"))); // NOI18N
        jLabelPrevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPreviousMouseClicked(evt);
            }
        });

        jLabelNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/next-button.png"))); // NOI18N
        jLabelNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelNextMouseClicked(evt);
            }
        });

        jLabelOpenFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/music-book.png"))); // NOI18N
        jLabelOpenFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelOpenFolderMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelButtonsLayout = new javax.swing.GroupLayout(jPanelButtons);
        jPanelButtons.setLayout(jPanelButtonsLayout);
        jPanelButtonsLayout.setHorizontalGroup(
            jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonsLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelButtonsLayout.createSequentialGroup()
                        .addComponent(jLabelOpenFiles)
                        .addGap(6, 6, 6)
                        .addComponent(jLabelOpenFolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPlayPause)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPrevious)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSliderRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelButtonsLayout.createSequentialGroup()
                        .addComponent(jLabelProgreso)
                        .addGap(8, 8, 8)
                        .addComponent(jSliderProgreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDuracionTotal)
                    .addComponent(jLabelRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanelButtonsLayout.setVerticalGroup(
            jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelProgreso)
                    .addComponent(jSliderProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDuracionTotal))
                .addGap(2, 2, 2)
                .addGroup(jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelOpenFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSliderRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelPlayPause, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelStop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelPrevious, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelNext, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelOpenFolder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabelOpenFiles.getAccessibleContext().setAccessibleName("jLabelOpenFile");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addGap(20, 20, 20)
                .addComponent(jPanelButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

      @Override
    protected void paintComponent(Graphics g) {
        
        super.paintComponent(g);
        int w = this.getWidth();
        int h = this.getHeight();
        Graphics2D graphics = (Graphics2D)g;
        graphics.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        Color noColor =  new Color(0, 0, 0, 0);
        GradientPaint primary = new GradientPaint(0f, 0f, secondColor, w, 0f, thirdColor);
        GradientPaint secondary = new GradientPaint( 0f, 0f, noColor,0f, h, firstColor);
        graphics.setPaint(primary);
        graphics.fillRect(0, 0, w, h);
        graphics.setPaint(secondary);
        graphics.fillRect(0, 0, w, h);
        primary = null;
        secondary = null;
        noColor = null;
       
    }
    
    private void jLabelOpenFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelOpenFilesMouseClicked

        // TODO add your handling code here:

        if(SwingUtilities.isLeftMouseButton(evt)){
            
                JFileChooser fileChooser;
                fileChooser = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos De Música", "mp3", "flac", "aac", "wma");
                fileChooser.addChoosableFileFilter(filter);
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                fileChooser.setAcceptAllFileFilterUsed(true);
                fileChooser.setApproveButtonText("Abrir Archivo(s) De Música");
                fileChooser.setMultiSelectionEnabled(true);
                int result = fileChooser.showOpenDialog(this);

                if (result == JFileChooser.APPROVE_OPTION) {
                    paths.clear();
                    actualNodet = null;
                    audioListPlayerComponent.mediaListPlayer().controls().stop();
                    audioListPlayerComponent.mediaListPlayer().list().media().clear();
                    movingNext = false;
                    movingPrevious = true;
                    File[] files = fileChooser.getSelectedFiles();
                    if(files.length > 0){
                        for (File file : files){
                            audioListPlayerComponent.mediaListPlayer().list().media().add(file.getAbsolutePath());
                            paths.push_back(file.getAbsolutePath());
                        }
                        
                        actualNodet = paths.front();
                        loadMetadata();
                        audioListPlayerComponent.mediaListPlayer().controls().play();
                    }
                }

                fileChooser = null;
                filter = null;
            
        }
    }//GEN-LAST:event_jLabelOpenFilesMouseClicked

    
    private void jLabelPlayPauseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPlayPauseMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            setPlayPause();
        }
    }//GEN-LAST:event_jLabelPlayPauseMouseClicked

    private void jLabelStopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelStopMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            setStop();
        }
    }//GEN-LAST:event_jLabelStopMouseClicked

    private void jLabelPreviousMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPreviousMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            movePrevious();
        }
    }//GEN-LAST:event_jLabelPreviousMouseClicked

    private void jLabelNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelNextMouseClicked
        // TODO add your handling code here:
        if(SwingUtilities.isLeftMouseButton(evt)){
            moveNext();
        }
    }//GEN-LAST:event_jLabelNextMouseClicked

    private void jLabelOpenFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelOpenFolderMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jLabelOpenFolderMouseClicked

    private void setPlayPause() {

        if (audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() != State.STOPPED && !paths.is_empty()) {

            if (audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() == State.PLAYING) {
                audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setPause(true);
                jLabelPlayPause.setIcon(playImage);
            } else if (audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() == State.PAUSED) {
                audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setPause(false);
                jLabelPlayPause.setIcon(pauseImage);
            }
        }
        
    }
    
    private void moveNext(){
        if(actualNodet != null){
            if(actualNodet.has_next()){
                audioListPlayerComponent.mediaListPlayer().controls().playNext();
            }
        }
    }
    
    private void movePrevious(){
        if(actualNodet != null){
            if(actualNodet.has_previous()){
                movingPrevious = true;
                movingNext = false;
                audioListPlayerComponent.mediaListPlayer().controls().playPrevious();
            }
        }
    }

    private void setStop() {
        
        if (audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().status().state() != State.STOPPED && !paths.is_empty()) {
            audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().controls().stop();
        }
        
    }

    private void cleanInfoMedia(){
        jLabelTitle.setText("Title");
        jLabelArtist.setText("Artist");
        jLabelAlbum.setText("Album");
        jLabelGenre.setText("Genre");
        jLabelCoverArt.setIcon(null);
        jPanelButtons.setVisible(true);
        jSliderProgreso.setValue(0);
        jLabelProgreso.setText("00:00:00");
        jLabelDuracionTotal.setText("00:00:00");
        jSliderProgreso.setEnabled(false);
        jLabelPlayPause.setIcon(playImage);
        jSliderRate.setEnabled(false);
        jSliderRate.setValue(100);
        
    }

    private void setPlayerEvents(){
        
        jSliderRate.addChangeListener((ChangeEvent e) -> {
            Object source = e.getSource();
            float rate = (float)(((JSlider) source).getValue() / 100f);
            audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setRate(rate); 
            jLabelRate.setText(((JSlider) source).getValue() + "%");
        });
        
        jSliderRate.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(SwingUtilities.isRightMouseButton(e)){
                    jSliderRate.setValue(100);
                    audioListPlayerComponent.mediaPlayer().controls().setRate(1); 
                    jLabelRate.setText("100%");
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
        
        
        //Listener para el slider progress
        jSliderProgreso.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
               
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if(SwingUtilities.isLeftMouseButton(e)){
                    flag = false;
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if(!flag){
                  flag = true;
                }
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
            
        });

        //Control para cambiar a posicion de reproduccion
        jSliderProgreso.addChangeListener((ChangeEvent e) -> {
            if (!flag) {
                Object source = e.getSource();
                audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().controls().setTime(((JSlider) source).getValue());
            }
        });
        
        audioListPlayerComponent.mediaListPlayer().events().addMediaListPlayerEventListener(new MediaListPlayerEventListener() {
            @Override
            public void mediaListPlayerFinished(MediaListPlayer mlp) {
            }

            @Override
            public void nextItem(MediaListPlayer mlp, MediaRef mr) {
                movingNext = true;
                movingPrevious = false;
            }

            @Override
            public void stopped(MediaListPlayer mlp) {
                
            }
        });
       
        audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().events().addMediaPlayerEventListener(new MediaPlayerEventListener() {
            @Override
            public void mediaChanged(MediaPlayer mp, MediaRef mr) {
                
                if(movingNext){
                    if(actualNodet.has_next()){
                       actualNodet = actualNodet.next();
                       loadMetadata();
                       movingNext = true;
                   }   
                }
                if(movingPrevious){
                    if(actualNodet.has_previous()){
                        actualNodet = actualNodet.previous();
                       loadMetadata();
                   }   
                }
                
            }

            @Override
            public void opening(MediaPlayer mp) {
            }

            @Override
            public void buffering(MediaPlayer mp, float f) {
                
            }

            @Override
            public void playing(MediaPlayer mp) {
                
            }

            @Override
            public void paused(MediaPlayer mp) {
                
            }

            @Override
            public void stopped(MediaPlayer mp) {
                cleanInfoMedia();
            }

            @Override
            public void forward(MediaPlayer mp) {
                
            }

            @Override
            public void backward(MediaPlayer mp) {
                
            }

            @Override
            public void finished(MediaPlayer mp) {
                cleanInfoMedia();
                
            }

            @Override
            public void timeChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void positionChanged(MediaPlayer mp, float f) {
                if(flag){
                    if(audioListPlayerComponent != null){
                        int tiempo = (int)audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().status().time();
                        int value = tiempo / 1000;
                        jSliderProgreso.setValue(tiempo);
                        String segundos = secondsToString(value);
                        jLabelProgreso.setText(segundos);
                        segundos = null;
                    }
                    
                }
            }

            @Override
            public void seekableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void pausableChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void titleChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void snapshotTaken(MediaPlayer mp, String string) {
                
            }

            @Override
            public void lengthChanged(MediaPlayer mp, long l) {
                
            }

            @Override
            public void videoOutput(MediaPlayer mp, int i) {
                
            }

            @Override
            public void scrambledChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void elementaryStreamAdded(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamDeleted(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void elementaryStreamSelected(MediaPlayer mp, TrackType tt, int i) {
                
            }

            @Override
            public void corked(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void muted(MediaPlayer mp, boolean bln) {
                
            }

            @Override
            public void volumeChanged(MediaPlayer mp, float f) {
                
            }

            @Override
            public void audioDeviceChanged(MediaPlayer mp, String string) {
                
            }

            @Override
            public void chapterChanged(MediaPlayer mp, int i) {
                
            }

            @Override
            public void error(MediaPlayer mp) {
                
            }

            @Override
            public void mediaPlayerReady(MediaPlayer mp) {
                long longLenght = audioListPlayerComponent.mediaListPlayer().mediaPlayer().mediaPlayer().status().length();
                if(longLenght < Integer.MAX_VALUE){
                    jSliderProgreso.setEnabled(true);
                    jSliderRate.setEnabled(true);
                    int lenght = (int)longLenght;
                    jSliderProgreso.setMaximum(lenght);
                    jLabelDuracionTotal.setText(secondsToString(lenght/1000));
                    jLabelPlayPause.setIcon(pauseImage);
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Archivo De Audio Demasiado Largo","ERROR",JOptionPane.ERROR_MESSAGE);
                } 
            }
        });
        
    }
    
    private void loadMetadata(){
        try {
            File readFile = new File(actualNodet.element());
            AudioFile audioFile = AudioFileIO.read(readFile);
            Tag tag = audioFile.getTag();
            String title = tag.getFirst(FieldKey.TITLE);
            String artist = tag.getFirst(FieldKey.ARTIST);
            String album = tag.getFirst(FieldKey.ALBUM);
            String genre = tag.getFirst(FieldKey.GENRE);

            jLabelTitle.setToolTipText("Title: "+title);
            jLabelArtist.setToolTipText("Artist: "+artist);
            jLabelAlbum.setToolTipText("Album: "+album);
            jLabelGenre.setToolTipText("Genre: "+genre);

            jLabelTitle.setText(title);
            jLabelArtist.setText(artist);
            jLabelAlbum.setText(album);
            jLabelGenre.setText(genre);

            Artwork artWork = tag.getFirstArtwork();
            if(artWork != null){
                ImageIcon icon = new ImageIcon(artWork.getBinaryData());
                int largo = jLabelCoverArt.getHeight();
                Image coverImagen = icon.getImage().getScaledInstance(largo, largo, Image.SCALE_SMOOTH);
                icon.setImage(coverImagen);
                jLabelCoverArt.setIcon(icon);
                setColors(coverImagen);
                coverImagen = null;
                icon = null;
            }

            readFile = null;
            audioFile = null;
            tag = null;
            title = null;
            artist = null;
            album = null;
            genre = null;
            artWork = null;
            
        } catch (CannotReadException | IOException | TagException | ReadOnlyFileException | InvalidAudioFrameException ex) {
            System.out.println("brmusicplayer.MainFXMLController.loadMetadata(): "+ex.getMessage());
        }
        
    }
    
    private String secondsToString(long seconds) {
        long absSeconds = Math.abs(seconds);
        String positive = String.format(
                "%02d:%02d:%02d",
                absSeconds / 3600,
                (absSeconds % 3600) / 60,
                absSeconds % 60);
        return seconds < 0 ? "-" + positive : positive;
    }
    
    @SuppressWarnings("UnusedAssignment")
    public void setColors(Image image) {
        try {
            
            int maximum = 0;
            PairDoublyLinkedList<Integer, Color> colorList = new PairDoublyLinkedList<>();
            PixelGrabber pg = new PixelGrabber(image, 0, 0, -1, -1, false);
            
            if (pg.grabPixels()) {
                int[] pixels = (int[]) pg.getPixels();
                for(int i = 0; i < pixels.length; i++){
                    int pixel = pixels[i];
                    int  red = (pixel  & 0x00ff0000) >> 16;
                    int  green = (pixel & 0x0000ff00) >> 8;
                    int  blue = pixel & 0x000000ff;
                    Color color = new Color(red,green,blue);
                    Pair<Integer, Color> pair = colorList.get_from_second(color);
            
                    if (pair != null) {//exist
                        int number = pair.first()+ 1;
                        pair.first(number);
                        if (number > maximum) {
                            firstColor = color;
                            maximum = number;
                        }
                    } else {
                        colorList.add_back(1, color);
                    }

                    color = null;
                    i+= colorRandom.nextInt(401)+ 400;
                }

                secondColor = firstColor;
            
                int iterations = 0;
                if(colorList.size() > 1){
                    
                    while(Math.abs(secondColor.getRGB() - firstColor.getRGB()) < 3000000){
                        int position = colorRandom.nextInt((int)colorList.size()-1);
                        secondColor = colorList.get(position).second();
                        iterations++;
                        if(iterations > 25){
                             while(firstColor.getRGB() == secondColor.getRGB()){
                                position = colorRandom.nextInt((int)colorList.size()-1);
                                secondColor = colorList.get(position).second();
                            }
                             break;
                        }
                    }
                }
                

                thirdColor = secondColor;
                if(colorList.size() > 2){
                    iterations = 0;
                    
                    while(Math.abs(thirdColor.getRGB() - firstColor.getRGB()) < 3000000 || Math.abs(secondColor.getRGB() - thirdColor.getRGB()) < 3000000){
                        int position = colorRandom.nextInt((int)colorList.size()-1);
                        thirdColor = colorList.get(position).second();
                        iterations++;
                        if(iterations > 50){
                            while(thirdColor.getRGB() == firstColor.getRGB() || thirdColor.getRGB() == secondColor.getRGB()){
                                position = colorRandom.nextInt((int)colorList.size()-1);
                                thirdColor = colorList.get(position).second();
                            }
                            break;
                        }
                    }
                }
                
                int red = firstColor.getRed();
                Color fontColor = (red >= 155) ? Color.BLACK : Color.WHITE;

                colorList.clear();

                Component[] components = jPanelButtons.getComponents();

                for (Component component : components){
                    component.setForeground(fontColor);
                }

                jLabelTitle.setForeground(fontColor);
                jLabelAlbum.setForeground(fontColor);
                jLabelArtist.setForeground(fontColor);
                jLabelGenre.setForeground(fontColor);

                colorList = null;
                fontColor = null;
                pg = null;
                pixels = null;
                this.repaint();
            }
            
        } catch (InterruptedException ex) {
            Logger.getLogger(MusicPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public void dispose() {
        audioListPlayerComponent.release();
        paths.clear();
        paths = null;
        playImage = null;
        pauseImage = null;
        firstColor = null;
        secondColor = null;
        thirdColor = null;
        colorRandom = null;
        audioListPlayerComponent = null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelAlbum;
    private javax.swing.JLabel jLabelArtist;
    private javax.swing.JLabel jLabelCoverArt;
    private javax.swing.JLabel jLabelDuracionTotal;
    private javax.swing.JLabel jLabelGenre;
    private javax.swing.JLabel jLabelNext;
    private javax.swing.JLabel jLabelOpenFiles;
    private javax.swing.JLabel jLabelOpenFolder;
    private javax.swing.JLabel jLabelPlayPause;
    private javax.swing.JLabel jLabelPrevious;
    private javax.swing.JLabel jLabelProgreso;
    private javax.swing.JLabel jLabelRate;
    private javax.swing.JLabel jLabelStop;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPanel jPanelInfo;
    private javax.swing.JSlider jSliderProgreso;
    private javax.swing.JSlider jSliderRate;
    // End of variables declaration//GEN-END:variables

 
}
