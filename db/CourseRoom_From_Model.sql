-- MySQL Script generated by MySQL Workbench
-- Wed Mar 23 17:36:53 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema COURSEROOM
-- -----------------------------------------------------
-- Base De Datos De CourseRoom
DROP SCHEMA IF EXISTS `COURSEROOM` ;

-- -----------------------------------------------------
-- Schema COURSEROOM
--
-- Base De Datos De CourseRoom
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `COURSEROOM` ;
USE `COURSEROOM` ;

-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_archivosadjuntostareas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_archivosadjuntostareas` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_archivosadjuntostareas` (
  `IdArchivoAdjunto` INT NOT NULL AUTO_INCREMENT,
  `NombreArchivo` VARCHAR(100) NOT NULL,
  `Archivo` LONGBLOB NOT NULL,
  `Extension` VARCHAR(32) NOT NULL,
  `FechaEnviado` VARCHAR(100) NOT NULL,
  `IdTarea` INT NOT NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdArchivoAdjunto`),
  INDEX `fk_IdTareaArchivoAdjunto_INDEX` (`IdTarea` ASC) VISIBLE,
  CONSTRAINT `fk_IdTareaArchivoAdjunto`
    FOREIGN KEY (`IdTarea`)
    REFERENCES `COURSEROOM`.`tb_tareas` (`IdTarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_archivoscompartidosgrupos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_archivoscompartidosgrupos` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_archivoscompartidosgrupos` (
  `IdArchivoCompartido` INT NOT NULL AUTO_INCREMENT,
  `NombreArchivo` VARCHAR(100) NOT NULL,
  `Archivo` LONGBLOB NOT NULL,
  `Extension` VARCHAR(32) NOT NULL,
  `FechaEnviado` VARCHAR(100) NOT NULL,
  `IdUsuario` INT NOT NULL,
  `IdGrupo` INT NOT NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdArchivoCompartido`),
  INDEX `fk_IdUsuarioArchivoCompartido_INDEX` (`IdUsuario` ASC) VISIBLE,
  INDEX `fk_IdGrupoArchivoCompartido_INDEX` (`IdGrupo` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioArchivoCompartido`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdGrupoArchivoCompartido`
    FOREIGN KEY (`IdGrupo`)
    REFERENCES `COURSEROOM`.`tb_grupos` (`IdGrupo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_archivossubidostareas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_archivossubidostareas` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_archivossubidostareas` (
  `IdArchivoSubido` INT NOT NULL AUTO_INCREMENT,
  `NombreArchivo` VARCHAR(100) NOT NULL,
  `Archivo` LONGBLOB NOT NULL,
  `Extension` VARCHAR(32) NOT NULL,
  `FechaEnviado` VARCHAR(100) NOT NULL,
  `IdUsuario` INT NOT NULL,
  `IdTarea` INT NOT NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdArchivoSubido`),
  INDEX `fk_IdUsuarioArchivoSubido_INDEX` (`IdUsuario` ASC) VISIBLE,
  INDEX `fk_IdTareaArchivoSubido_INDEX` (`IdTarea` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioArchivoSubido`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdTareaArchivoSubido`
    FOREIGN KEY (`IdTarea`)
    REFERENCES `COURSEROOM`.`tb_tareas` (`IdCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_avisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_avisos` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_avisos` (
  `IdAviso` INT NOT NULL AUTO_INCREMENT,
  `Aviso` VARCHAR(256) NOT NULL,
  `FechaEnvio` VARCHAR(100) NOT NULL,
  `IdUsuario` INT NOT NULL,
  `TipoAviso` ENUM('Curso', 'Tarea', 'Grupo', 'Chat', 'Pregunta') NOT NULL,
  PRIMARY KEY (`IdAviso`),
  INDEX `fk_IdUsuarioAviso_INDEX` (`IdUsuario` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioAviso`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_chatspersonales`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_chatspersonales` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_chatspersonales` (
  `IdChat` INT NOT NULL AUTO_INCREMENT,
  `FechaCreacion` VARCHAR(100) NOT NULL,
  `IdUsuarioEmisor` INT NOT NULL,
  `IdUsuarioReceptor` INT NOT NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdChat`),
  INDEX `fk_IdUsuarioEmisorChatPersonal_INDEX` (`IdUsuarioEmisor` ASC) VISIBLE,
  INDEX `fk_IdUsuarioReceptorChatPersonal_INDEX` (`IdUsuarioReceptor` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioEmisorChatPersonal`
    FOREIGN KEY (`IdUsuarioEmisor`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdUsuarioReceptorChatPersonal`
    FOREIGN KEY (`IdUsuarioReceptor`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_cuestionarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_cuestionarios` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_cuestionarios` (
  `IdCurso` INT NOT NULL,
  `IdUsuario` INT NOT NULL,
  `IdPregunta` INT NOT NULL,
  `Respuesta` ENUM('Casi Nunca', 'Rara Vez', 'Alguna Vez', 'A Menudo', 'Casi Siempre') NOT NULL,
  INDEX `fk_IdPreguntaCuestionario_INDEX` (`IdPregunta` ASC) VISIBLE,
  INDEX `fk_IdCursoCuestionario_INDEX` (`IdCurso` ASC) INVISIBLE,
  INDEX `fk_IdUsuarioCuestionario_INDEX` (`IdUsuario` ASC) VISIBLE,
  CONSTRAINT `fk_IdPreguntaCuestionario`
    FOREIGN KEY (`IdPregunta`)
    REFERENCES `COURSEROOM`.`tb_preguntascuestionarios` (`IdPregunta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdCursoCuestionario`
    FOREIGN KEY (`IdCurso`)
    REFERENCES `COURSEROOM`.`tb_cursos` (`IdCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdUsuarioCuestionario`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_cursos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_cursos` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_cursos` (
  `IdCurso` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(80) NOT NULL,
  `Descripcion` TEXT NOT NULL,
  `FechaCreacion` VARCHAR(100) NOT NULL,
  `Calificacion` FLOAT NOT NULL,
  `Imagen` MEDIUMBLOB NULL,
  `IdProfesor` INT NOT NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdCurso`),
  INDEX `fk_IdProfesorCurso_INDEX` (`IdProfesor` ASC) VISIBLE,
  CONSTRAINT `fk_IdProfesorCurso`
    FOREIGN KEY (`IdProfesor`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_cursosusuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_cursosusuarios` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_cursosusuarios` (
  `IdCurso` INT NOT NULL AUTO_INCREMENT,
  `IdUsuario` INT NOT NULL,
  `Estatus` ENUM('Actual', 'Finalizado', 'Recomendado', 'Nuevo', 'Sin Relacion', 'Suspendido') NOT NULL,
  `FechaIngreso` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`IdCurso`, `IdUsuario`),
  INDEX `IdCursoUsuario_INDEX` (`IdUsuario` ASC) INVISIBLE,
  INDEX `IdUsuarioCurso_INDEX` (`IdCurso` ASC) INVISIBLE,
  CONSTRAINT `IdUsuarioCurso`
    FOREIGN KEY (`IdCurso`)
    REFERENCES `COURSEROOM`.`tb_cursos` (`IdCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `IdCursoUsuario`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_desempenousuariocurso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_desempenousuariocurso` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_desempenousuariocurso` (
  `IdDesempeno` INT NOT NULL AUTO_INCREMENT,
  `Prediccion` FLOAT NOT NULL,
  `RumboEstatus` ENUM('A Aprobar', 'A Reprobar', 'Excelente', 'Bueno', 'Regular', 'Malo') NOT NULL,
  `IdUsuario` INT NOT NULL,
  `IdCurso` INT NOT NULL,
  PRIMARY KEY (`IdDesempeno`),
  INDEX `fk_IdUsuarioDesempe単oProfesional_INDEX` (`IdUsuario` ASC) INVISIBLE,
  INDEX `fk_IdCursoDesempe単oProfesional_INDEX` (`IdCurso` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioDesempe単oProfesional`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdCursoDesempe単oProfesional`
    FOREIGN KEY (`IdCurso`)
    REFERENCES `COURSEROOM`.`tb_cursos` (`IdCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_grupos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_grupos` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_grupos` (
  `IdGrupo` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(80) NOT NULL,
  `Descripcion` TEXT NULL,
  `FechaCreacion` VARCHAR(100) NOT NULL,
  `IdCurso` INT NOT NULL,
  `Imagen` MEDIUMBLOB NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdGrupo`),
  INDEX `fk_tb_grupos_tb_cursos1_idx` (`IdCurso` ASC) VISIBLE,
  CONSTRAINT `fk_tb_grupos_tb_cursos1`
    FOREIGN KEY (`IdCurso`)
    REFERENCES `COURSEROOM`.`tb_cursos` (`IdCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_localidades`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_localidades` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_localidades` (
  `IdLocalidad` INT NOT NULL AUTO_INCREMENT,
  `Estado` VARCHAR(100) NOT NULL DEFAULT '',
  `Localidad` VARCHAR(200) NOT NULL DEFAULT '',
  PRIMARY KEY (`IdLocalidad`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_materialessubidoscurso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_materialessubidoscurso` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_materialessubidoscurso` (
  `IdArchivoSubido` INT NOT NULL AUTO_INCREMENT,
  `NombreArchivo` VARCHAR(100) NOT NULL,
  `Archivo` LONGBLOB NOT NULL,
  `Extension` VARCHAR(32) NOT NULL,
  `FechaEnviado` VARCHAR(100) NOT NULL,
  `IdUsuario` INT NOT NULL,
  `IdCurso` INT NOT NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdArchivoSubido`),
  INDEX `fk_IdUsuarioMaterialSubido_INDEX` (`IdUsuario` ASC) VISIBLE,
  INDEX `fk_IdCursoMaterialSubido_INDEX` (`IdCurso` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioMaterialSubido`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdCursoMaterialSubido`
    FOREIGN KEY (`IdCurso`)
    REFERENCES `COURSEROOM`.`tb_tareas` (`IdCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_mensajeschat`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_mensajeschat` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_mensajeschat` (
  `IdMensaje` INT NOT NULL AUTO_INCREMENT,
  `Mensaje` TEXT NOT NULL,
  `FechaEnvio` VARCHAR(100) NOT NULL,
  `IdUsuarioEmisor` INT NOT NULL,
  `NombreArchivo` VARCHAR(100) NULL,
  `Archivo` LONGBLOB NULL,
  `Extension` VARCHAR(32) NULL,
  `IdChat` INT NOT NULL,
  PRIMARY KEY (`IdMensaje`),
  INDEX `fk_IdUsuarioEmisorMensajeTexto_INDEX` (`IdUsuarioEmisor` ASC) VISIBLE,
  INDEX `fk_IdChatMensajeTexto_INDEX` (`IdChat` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioEmisorMensajeTexto01`
    FOREIGN KEY (`IdUsuarioEmisor`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdChatMensajeTexto01`
    FOREIGN KEY (`IdChat`)
    REFERENCES `COURSEROOM`.`tb_chatspersonales` (`IdChat`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_mensajescurso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_mensajescurso` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_mensajescurso` (
  `IdMensaje` INT NOT NULL AUTO_INCREMENT,
  `Mensaje` TEXT NOT NULL,
  `FechaEnvio` VARCHAR(100) NOT NULL,
  `IdUsuarioEmisor` INT NOT NULL,
  `NombreArchivo` VARCHAR(100) NULL,
  `Archivo` LONGBLOB NULL,
  `Extension` VARCHAR(32) NULL,
  `IdCurso` INT NOT NULL,
  PRIMARY KEY (`IdMensaje`),
  INDEX `fk_IdUsuarioEmisorMensajeTexto_INDEX` (`IdUsuarioEmisor` ASC) VISIBLE,
  INDEX `fk_IdCursoEmisorMensajeTexto_INDEX` (`IdCurso` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioEmisorMensajeTexto00`
    FOREIGN KEY (`IdUsuarioEmisor`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdCursoEmisorMensajeTexto`
    FOREIGN KEY (`IdCurso`)
    REFERENCES `COURSEROOM`.`tb_cursos` (`IdCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_mensajesgrupos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_mensajesgrupos` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_mensajesgrupos` (
  `IdMensaje` INT NOT NULL AUTO_INCREMENT,
  `Mensaje` TEXT NOT NULL,
  `FechaEnvio` VARCHAR(100) NOT NULL,
  `IdUsuarioEmisor` INT NOT NULL,
  `NombreArchivo` VARCHAR(100) NULL,
  `Archivo` LONGBLOB NULL,
  `Extension` VARCHAR(32) NULL,
  `IdGrupo` INT NOT NULL,
  PRIMARY KEY (`IdMensaje`),
  INDEX `fk_IdUsuarioEmisorMensajeTexto_INDEX` (`IdUsuarioEmisor` ASC) VISIBLE,
  INDEX `fk_IdGrupoMensajeTexto_idx` (`IdGrupo` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioEmisorMensajeTexto011`
    FOREIGN KEY (`IdUsuarioEmisor`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdGrupoMensajeTexto`
    FOREIGN KEY (`IdGrupo`)
    REFERENCES `COURSEROOM`.`tb_grupos` (`IdGrupo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tb_mensajesgrupos_tb_grupos1`
    FOREIGN KEY (`IdGrupo`)
    REFERENCES `COURSEROOM`.`tb_grupos` (`IdGrupo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_mensajespreguntas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_mensajespreguntas` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_mensajespreguntas` (
  `IdMensaje` INT NOT NULL AUTO_INCREMENT,
  `Mensaje` TEXT NOT NULL,
  `FechaEnvio` VARCHAR(100) NOT NULL,
  `NombreArchivo` VARCHAR(100) NULL,
  `Archivo` LONGBLOB NULL,
  `Extension` VARCHAR(32) NULL,
  `IdPregunta` INT NOT NULL,
  `IdUsuarioEmisor` INT NOT NULL,
  PRIMARY KEY (`IdMensaje`),
  INDEX `fk_IdUsuarioEmisorMensajeTexto_INDEX` (`IdUsuarioEmisor` ASC) VISIBLE,
  INDEX `fk_IdPreguntaMensajeTexto_INDEX` (`IdPregunta` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioEmisorMensajeTexto010`
    FOREIGN KEY (`IdUsuarioEmisor`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdPreguntaMensajeTexto010`
    FOREIGN KEY (`IdPregunta`)
    REFERENCES `COURSEROOM`.`tb_preguntas` (`IdPregunta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_mensajestareas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_mensajestareas` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_mensajestareas` (
  `IdMensaje` INT NOT NULL AUTO_INCREMENT,
  `Mensaje` TEXT NOT NULL,
  `FechaEnvio` VARCHAR(100) NOT NULL,
  `IdUsuarioEmisor` INT NOT NULL,
  `NombreArchivo` VARCHAR(100) NULL,
  `Archivo` LONGBLOB NULL,
  `Extension` VARCHAR(32) NULL,
  `IdTarea` INT NOT NULL,
  PRIMARY KEY (`IdMensaje`),
  INDEX `fk_IdUsuarioEmisorMensajeTexto_INDEX` (`IdUsuarioEmisor` ASC) VISIBLE,
  INDEX `fk_IdTareaEmisorMensajeTexto_INDEX` (`IdTarea` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioEmisorMensajeTexto0`
    FOREIGN KEY (`IdUsuarioEmisor`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdTareaEmisorMensajeTexto`
    FOREIGN KEY (`IdTarea`)
    REFERENCES `COURSEROOM`.`tb_tareas` (`IdTarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_preguntas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_preguntas` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_preguntas` (
  `IdPregunta` INT NOT NULL AUTO_INCREMENT,
  `Pregunta` VARCHAR(200) NOT NULL,
  `Descripcion` TEXT NOT NULL,
  `FechaCreacion` VARCHAR(100) NOT NULL,
  `Estatus` ENUM('Abierta', 'Solucionada') NOT NULL,
  `IdUsuario` INT NOT NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdPregunta`),
  INDEX `fk_IdUsuarioDuda_INDEX` (`IdUsuario` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioDuda`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_preguntascuestionarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_preguntascuestionarios` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_preguntascuestionarios` (
  `IdPregunta` INT NOT NULL AUTO_INCREMENT,
  `Pregunta` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`IdPregunta`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_retroalimentaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_retroalimentaciones` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_retroalimentaciones` (
  `IdRetroalimentacion` INT NOT NULL AUTO_INCREMENT,
  `Retroalimentacion` TEXT NOT NULL,
  `NombreArchivo` VARCHAR(256) NULL,
  `Archivo` LONGBLOB NULL,
  `Extension` VARCHAR(32) NULL,
  `FechaEnvio` VARCHAR(100) NOT NULL,
  `IdTarea` INT NOT NULL,
  PRIMARY KEY (`IdRetroalimentacion`),
  INDEX `fk_RetroalimentacionesTareas_INDEX` (`IdTarea` ASC) INVISIBLE,
  CONSTRAINT `fk_RetroalimentacionesTareas`
    FOREIGN KEY (`IdTarea`)
    REFERENCES `COURSEROOM`.`tb_tareas` (`IdTarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_sesiones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_sesiones` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_sesiones` (
  `IdSesion` INT NOT NULL AUTO_INCREMENT,
  `Uuid` VARCHAR(64) NOT NULL,
  `Dispositivo` VARCHAR(50)  NOT NULL,
  `Fabricante` VARCHAR(30) NOT NULL,
  `UltimaConexion` VARCHAR(100) NOT NULL,
  `DireccionIP` VARCHAR(100) NOT NULL,
  `IdUsuario` INT NOT NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  INDEX `fk_IdUsuarioSesion_INDEX` (`IdUsuario` ASC) VISIBLE,
  PRIMARY KEY (`IdSesion`),
  CONSTRAINT `fk_IdUsuarioSesion`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_tareas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_tareas` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_tareas` (
  `IdTarea` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(50) NOT NULL,
  `Descripcion` TEXT NOT NULL,
  `FechaCreacion` VARCHAR(100) NOT NULL,
  `FechaEntrega` VARCHAR(100) NOT NULL,
  `IdCurso` INT NOT NULL,
  `TareaGrupal` BIT NOT NULL DEFAULT 0,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdTarea`),
  INDEX `fk_IdCursoTarea_INDEX` (`IdCurso` ASC) VISIBLE,
  CONSTRAINT `fk_IdCursoTarea`
    FOREIGN KEY (`IdCurso`)
    REFERENCES `COURSEROOM`.`tb_cursos` (`IdCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_tareascursousuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_tareascursousuarios` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_tareascursousuarios` (
  `IdTarea` INT NOT NULL,
  `IdUsuario` INT NOT NULL,
  `Estatus` ENUM('PENDIENTE', 'ENTREGADA', 'ENTREGADA CON RETRASO', 'SIN ENTREGA', 'CALIFICADA', 'ABIERTA', 'CERRADA') NOT NULL,
  `Calificacion` FLOAT NULL,
  `FechaCalificacion` VARCHAR(100) NULL,
  PRIMARY KEY (`IdTarea`, `IdUsuario`),
  INDEX `IdTareaUsuario_INDEX` (`IdUsuario` ASC) INVISIBLE,
  INDEX `IdUsuarioTarea_INDEX` (`IdTarea` ASC) VISIBLE,
  CONSTRAINT `IdUsuarioTarea`
    FOREIGN KEY (`IdTarea`)
    REFERENCES `COURSEROOM`.`tb_tareas` (`IdTarea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `IdTareaUsuario`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_tareaspendientesgrupos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_tareaspendientesgrupos` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_tareaspendientesgrupos` (
  `IdTareaPendiente` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(100) NOT NULL,
  `Descripcion` TEXT NULL,
  `FechaCreacion` VARCHAR(100) NOT NULL,
  `FechaFinalizacion` VARCHAR(100) NOT NULL,
  `Estatus` ENUM('Pendiente', 'Realizando', 'Finalizada') NOT NULL DEFAULT 'Pendiente',
  `IdUsuarioACargo` INT NOT NULL,
  `IdGrupo` INT NOT NULL,
  PRIMARY KEY (`IdTareaPendiente`),
  INDEX `fk_IdUsuarioTareaPendiente_INDEX` (`IdUsuarioACargo` ASC) INVISIBLE,
  INDEX `fk_IdGrupoTareaPendiente_INDEX` (`IdGrupo` ASC) VISIBLE,
  CONSTRAINT `fk_IdUsuarioTareaPendiente`
    FOREIGN KEY (`IdUsuarioACargo`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IdGrupoTareaPendiente`
    FOREIGN KEY (`IdGrupo`)
    REFERENCES `COURSEROOM`.`tb_grupos` (`IdGrupo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_tematicas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_tematicas` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_tematicas` (
  `IdTematica` INT NOT NULL AUTO_INCREMENT,
  `Tematica` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`IdTematica`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_tematicascursos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_tematicascursos` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_tematicascursos` (
  `IdTematica` INT NOT NULL,
  `IdCurso` INT NOT NULL,
  PRIMARY KEY (`IdTematica`, `IdCurso`),
  INDEX `IdTematicaCurso_INDEX` (`IdCurso` ASC) VISIBLE,
  INDEX `IdCursoTematica_INDEX` (`IdTematica` ASC) INVISIBLE,
  CONSTRAINT `IdCursoTematica`
    FOREIGN KEY (`IdTematica`)
    REFERENCES `COURSEROOM`.`tb_tematicas` (`IdTematica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `IdTematicaCurso`
    FOREIGN KEY (`IdCurso`)
    REFERENCES `COURSEROOM`.`tb_cursos` (`IdCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_tematicasusuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_tematicasusuarios` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_tematicasusuarios` (
  `IdTematica` INT NOT NULL,
  `IdUsuario` INT NOT NULL,
  INDEX `IdUsuarioTematica_INDEX` (`IdTematica` ASC) INVISIBLE,
  INDEX `IdTematicaUsuario_INDEX` (`IdUsuario` ASC) VISIBLE,
  PRIMARY KEY (`IdTematica`, `IdUsuario`),
  CONSTRAINT `IdUsuarioTematica`
    FOREIGN KEY (`IdTematica`)
    REFERENCES `COURSEROOM`.`tb_tematicas` (`IdTematica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `IdTematicaUsuario`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_usuarios` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_usuarios` (
  `IdUsuario` INT NOT NULL AUTO_INCREMENT,
  `CorreoElectronico` VARCHAR(150) NOT NULL,
  `Contrasenia` VARCHAR(256) NOT NULL,
  `Nombre` VARCHAR(50) NOT NULL,
  `Paterno` VARCHAR(30) NOT NULL,
  `Materno` VARCHAR(30) NULL,
  `FechaNacimiento` VARCHAR(100) NOT NULL,
  `Genero` VARCHAR(25) NULL,
  `Descripcion` TEXT NULL,
  `PromedioGeneral` FLOAT NULL,
  `TipoUsuario` ENUM('Estudiante', 'Profesor') NOT NULL,
  `FechaCreacion` VARCHAR(100) NOT NULL,
  `IdLocalidad` INT NOT NULL,
  `Imagen` MEDIUMBLOB NULL,
  `ChatsConmigo` BIT NOT NULL DEFAULT 1,
  `AvisosActivos` BIT NOT NULL DEFAULT 1,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdUsuario`),
  INDEX `fk_IdLocalidadUsuario_INDEX` (`IdLocalidad` ASC) VISIBLE,
  UNIQUE INDEX `CorreoElectronico_UNIQUE` (`CorreoElectronico` ASC) VISIBLE,
  CONSTRAINT `fk_IdLocalidadUsuario`
    FOREIGN KEY (`IdLocalidad`)
    REFERENCES `COURSEROOM`.`tb_localidades` (`IdLocalidad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = binary;


-- -----------------------------------------------------
-- Table `COURSEROOM`.`tb_usuariosgrupos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSEROOM`.`tb_usuariosgrupos` ;

CREATE TABLE IF NOT EXISTS `COURSEROOM`.`tb_usuariosgrupos` (
  `IdUsuario` INT NOT NULL,
  `IdGrupo` INT NOT NULL,
  `Activo` BIT NOT NULL DEFAULT 1,
  PRIMARY KEY (`IdUsuario`, `IdGrupo`),
  INDEX `IdUsuarioGrupo_INDEX` (`IdGrupo` ASC) INVISIBLE,
  INDEX `IdGrupoUsuario_INDEX` (`IdUsuario` ASC) VISIBLE,
  CONSTRAINT `IdUsuarioGrupo`
    FOREIGN KEY (`IdUsuario`)
    REFERENCES `COURSEROOM`.`tb_usuarios` (`IdUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `IdGrupoUsuario`
    FOREIGN KEY (`IdGrupo`)
    REFERENCES `COURSEROOM`.`tb_grupos` (`IdGrupo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = binary;

USE `COURSEROOM` ;

-- -----------------------------------------------------
-- procedure sp_ObtenerEstados
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerEstados`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerEstados` ()
BEGIN
	SELECT DISTINCT Estado FROM tb_localidades;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerLocalidadesPorEstado
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerLocalidadesPorEstado`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerLocalidadesPorEstado`(
	IN _Estado VARCHAR(100)
)
BEGIN
	SELECT Localidad FROM tb_localidades WHERE Estado = _Estado;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerIntereses
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerIntereses`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerIntereses`(
    IN _IdUsuario INT
)
BEGIN
   SELECT Tematicas.Tematica FROM tb_tematicas Tematicas 
   INNER JOIN  tb_tematicasusuarios TematicasUsuarios 
   ON Tematicas.IdTematica = TematicasUsuarios.IdTematica
   INNER JOIN tb_usuarios Usuarios ON Usuarios.IdUsuario = TematicasUsuarios.IdUsuario
   WHERE Usuarios.IdUsuario = _IdUsuario AND Usuarios.Activo = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerDatosPerfil
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerDatosPerfil`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerDatosPerfil`(
    IN _IdUsuario INT
)
BEGIN

   SELECT Usuarios.Imagen, Usuarios.Nombre, Usuarios.Paterno, Usuarios.Materno, Usuarios.CorreoElectronico, 
   Usuarios.Genero, Usuarios.TipoUsuario, Usuarios.FechaNacimiento, Usuarios.Descripcion, 
   Localidades.Localidad,Localidades.Estado,Usuarios.PromedioGeneral
   FROM tb_usuarios Usuarios INNER JOIN tb_localidades Localidades ON Usuarios.IdLocalidad = Localidades.IdLocalidad
   WHERE Usuarios.IdUsuario = _IdUsuario AND Usuarios.Activo = 1;
   
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ActualizarDatosAutenticacion
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ActualizarDatosAutenticacion`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ActualizarDatosAutenticacion`(
    IN _IdUsuario INT,
    IN _CorreoElectronico VARCHAR(150),
    IN _Contrasenia VARCHAR(256)
)
BEGIN

    -- Validar que los campos de correo y contrasena no sean nulos o vacios:
    IF _CorreoElectronico IS NULL OR LENGTH(_CorreoElectronico) = 0 
		OR _Contrasenia IS NULL OR LENGTH(_Contrasenia) = 0  THEN
        SELECT 0 AS "Codigo", 'El Correo Electr坦nico O La Contrasena Estan Vacios' AS "Mensaje";
	ELSE

        -- Validar que exista el usuario:
        IF EXISTS (SELECT IdUsuario FROM tb_usuarios WHERE IdUsuario = _IdUsuario) THEN

            -- Validar que el correo electronico no exista a otro usuario activo:

            IF NOT EXISTS (SELECT CorreoElectronico FROM tb_usuarios WHERE IdUsuario <> _IdUsuario AND Activo = 1) THEN

                UPDATE tb_usuarios SET CorreoElectronico = _CorreoElectronico,
                Contrasenia = _Contrasenia WHERE IdUsuario = _IdUsuario;

                SELECT 1 AS "Codigo", 'OK' AS "Mensaje";

            ELSE
                SELECT 0 AS "Codigo", 'El Correo Electronico Ya Se Encuentra Registrado' AS "Mensaje";
            END IF;

        ELSE
            SELECT 0 AS "Codigo", 'El Usuario No Se Encuentra Registrado' AS "Mensaje";
        END IF;

    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ActualizarInformacionExtra
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ActualizarInformacionExtra`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ActualizarInformacionExtra`(
    IN _IdUsuario INT,
    IN _TipoUsuario VARCHAR(20),
    IN _PromedioGeneral FLOAT,
    IN _Descripcion TEXT
)
BEGIN

	IF _TipoUsuario = 'Estudiante' THEN
		
		IF _PromedioGeneral IS NULL OR (_PromedioGeneral < 0 AND _PromedioGeneral > 100)  THEN
			SELECT 0 AS "Codigo", 'El Promedio General No Tiene El Formato Adecuado' AS "Mensaje";
		ELSE
			IF EXISTS (SELECT IdUsuario FROM tb_usuarios WHERE IdUsuario = _IdUsuario AND TipoUsuario = 'Estudiante') THEN
				UPDATE tb_usuarios SET PromedioGeneral = _PromedioGeneral,
				Descripcion = _Descripcion WHERE IdUsuario = _IdUsuario;
				SELECT 1 AS "Codigo", 'OK' AS "Mensaje";
			ELSE
				SELECT 0 AS "Codigo", 'El Usuario No Se Encuentra Registrado' AS "Mensaje";
			END IF;

		END IF;    
    ELSEIF _TipoUsuario = 'Profesor' THEN
    
		IF EXISTS (SELECT IdUsuario FROM tb_usuarios WHERE IdUsuario = _IdUsuario AND Activo = 1 AND TipoUsuario = 'Profesor') THEN
			UPDATE tb_usuarios SET Descripcion = _Descripcion WHERE IdUsuario = _IdUsuario;
			SELECT 1 AS "Codigo", 'OK' AS "Mensaje";
		ELSE
			SELECT 0 AS "Codigo", 'El Usuario No Se Encuentra Registrado' AS "Mensaje";
		END IF;
    ELSE
		SELECT 0 AS "Codigo", 'Tipo De Usuario No Registrado' AS "Mensaje";
    
    END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_AgregarInteres
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_AgregarInteres`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_AgregarInteres`(
    IN _IdUsuario INT,
    IN _Tematica VARCHAR(45)
)
BEGIN

    DECLARE _IdTematica INT;

    -- Validar que exista el usuario:
    IF EXISTS (SELECT IdUsuario FROM tb_usuarios WHERE IdUsuario = _IdUsuario AND TipoUsuario = 'Estudiante') THEN
        
        -- Validar que exista la tematica:
        SELECT _IdTematica = IdTematica FROM tb_tematicas WHERE Tematica = _Tematica;
        
        IF _IdTematica IS NOT NULL AND _IdTematica > -1 THEN
            
            -- Validar que no exista la relacion:
            IF NOT EXISTS (SELECT IdTematica FROM tb_tematicasusuarios WHERE IdTematica = _IdTematica and IdUsuario = _IdUsuario) THEN

                INSERT INTO tb_tematicasusuarios VALUES (_IdTematica, _IdUsuario);
                SELECT 1 AS "Codigo", 'OK' AS "Mensaje";

            ELSE 
                SELECT 0 AS "Codigo", 'La Tematica Ya Se Encuentra Registrada En Ese Usuario' AS "Mensaje";
            END IF;

        ELSE
            SELECT 0 AS "Codigo", 'La Tematica No Se Encuentra Registrada' AS "Mensaje";
        END IF;
        
    ELSE
        SELECT 0 AS "Codigo", 'El Usuario No Se Encuentra Registrado' AS "Mensaje";
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_RemoverInteres
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_RemoverInteres`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_RemoverInteres`(
    IN _IdUsuario INT,
    IN _Tematica VARCHAR(45)
)
BEGIN

    DECLARE _IdTematica INT;

    -- Validar que exista el usuario:
    IF EXISTS (SELECT IdUsuario FROM tb_usuarios WHERE IdUsuario = _IdUsuario AND Activo = 1 AND TipoUsuario = 'Estudiante') THEN
        
        -- Validar que exista la tematica:
        SELECT _IdTematica = IdTematica FROM tb_tematicas WHERE Tematica = _Tematica;
        IF _IdTematica IS NOT NULL AND _IdTematica > -1 THEN
            
            -- Validar que exista la relacion:
            IF EXISTS (SELECT IdTematica FROM tb_tematicasusuarios WHERE IdTematica = _IdTematica and IdUsuario = _IdUsuario) THEN

                DELETE FROM  tb_tematicasusuarios WHERE IdTematica =  _IdTematica AND IdUsuario = _IdUsuario;
                SELECT 1 AS "Codigo", 'OK' AS "Mensaje";

            ELSE 
                SELECT 0 AS "Codigo", 'La Tematica No Se Encuentra Registrada En Ese Usuario' AS "Mensaje";
            END IF;

        ELSE
            SELECT 0 AS "Codigo", 'La Tematica No Se Encuentra Registrada' AS "Mensaje";
        END IF;
        
    ELSE
        SELECT 0 AS "Codigo", 'El Usuario No Se Encuentra Registrado' AS "Mensaje";
    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ActualizarDatosPersonales
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ActualizarDatosPersonales`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ActualizarDatosPersonales`(
    IN _IdUsuario INT,
    IN _Nombre VARCHAR(50),
    IN _Paterno VARCHAR(30),
    IN _Materno VARCHAR(30),
    IN _Genero VARCHAR(25),
    IN _FechaNacimiento VARCHAR(100)
)
BEGIN
    IF _Nombre IS NULL OR LENGTH(_Nombre) = 0 
		OR _Paterno IS NULL OR LENGTH(_Paterno) = 0  
        OR _FechaNacimiento IS NULL OR LENGTH(_FechaNacimiento) = 0 THEN
        SELECT 0 AS "Codigo", 'Alguno De Los Campos Esta Vacios' AS "Mensaje";
	ELSE
        IF EXISTS (SELECT IdUsuario FROM tb_usuarios WHERE IdUsuario = _IdUsuario) THEN
            UPDATE tb_usuarios SET Nombre = _Nombre, Paterno = _Paterno,
            Materno = _Materno, Genero = _Genero,
            FechaNacimiento = _FechaNacimiento WHERE IdUsuario = _IdUsuario;

            SELECT 1 AS "Codigo", 'OK' AS "Mensaje";
        ELSE
            SELECT 0 AS "Codigo", 'El Usuario No Se Encuentra Registrado' AS "Mensaje";
        END IF;

    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ActualizarImagenPerfil
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ActualizarImagenPerfil`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ActualizarImagenPerfil`(
    IN _IdUsuario INT,
    IN _Imagen MEDIUMBLOB
)
BEGIN
    
	IF EXISTS (SELECT IdUsuario FROM tb_usuarios WHERE IdUsuario = _IdUsuario) THEN
		UPDATE tb_usuarios SET Imagen = _Imagen WHERE IdUsuario = _IdUsuario;
		SELECT 1 AS "Codigo", 'OK' AS "Mensaje";
	ELSE
		SELECT 0 AS "Codigo", 'El Usuario No Se Encuentra Registrado' AS "Mensaje";
	END IF;

END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ActualizarLocalidad
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ActualizarLocalidad`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE  `sp_ActualizarLocalidad`(
    IN _IdUsuario INT,
    IN _Estado VARCHAR(100),
    IN _Localidad VARCHAR(200)
)
BEGIN
    DECLARE _IdLocalidad INT;
    
    -- Validar que exista la localidad:
    SELECT _IdLocalidad = IdLocalidad FROM tb_localidades WHERE Localidad = _Localidad AND Estado = _Estado;
    
    -- Si existe la localidad
    IF _IdLocalidad IS NOT NULL AND _IdLocalidad > -1 THEN
    
        -- Validar que exista el usuario:
        IF EXISTS (SELECT IdUsuario FROM tb_usuarios WHERE IdUsuario = _IdUsuario) THEN
        
            UPDATE tb_usuarios SET IdLocalidad = _IdLocalidad WHERE IdUsuario = _IdUsuario;
            SELECT 1 AS "Codigo", 'OK' AS "Mensaje";
        ELSE
            SELECT 0 AS "Codigo", 'El Usuario No Se Encuentra Registrado' AS "Mensaje";
        END IF;
    ELSE
        SELECT 0 AS "Codigo", 'La Localidad No Se Encuentra Registrada' AS "Mensaje";
    END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_AgregarUsuario
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_AgregarUsuario`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_AgregarUsuario`(
    IN _CorreoElectronico VARCHAR(150),
    IN _Contrasenia VARCHAR(256),
    IN _Nombre VARCHAR(50),
    IN _Paterno VARCHAR(30),
    IN _Materno VARCHAR(30),
    IN _Genero VARCHAR(25),
    IN _FechaNacimiento VARCHAR(100),
    IN _PromedioGeneral FLOAT,
    IN _TipoUsuario VARCHAR(30),
    IN _Descripcion TEXT,
    IN _Imagen MEDIUMBLOB
)
BEGIN

    DECLARE _IdUsuario INT;
    
    IF _CorreoElectronico IS NULL OR LENGTH(_CorreoElectronico) = 0 
		OR _Contrasenia IS NULL OR LENGTH(_Contrasenia) = 0  
        OR _Nombre IS NULL OR LENGTH(_Nombre) = 0 
		OR _Paterno IS NULL OR LENGTH(_Paterno) = 0
        OR _FechaNacimiento IS NULL OR LENGTH(_FechaNacimiento) = 0 
        OR (_TipoUsuario <> 'Estudiante' AND _TipoUsuario <> 'Profesor') THEN
            SELECT 0 AS "Codigo", 'Alguno De Los Datos Esta Vacio' AS "Mensaje"; 
    ELSE

        IF NOT EXISTS (SELECT CorreoElectronico FROM tb_usuarios WHERE CorreoElectronico = _CorreoElectronico AND Activo = 1) THEN
            
			IF _TipoUsuario = 'Estudiante' THEN
                
				IF _PromedioGeneral IS NOT NULL THEN
					IF _PromedioGeneral < 0 OR _PromedioGeneral > 100 THEN
						INSERT INTO tb_usuarios (CorreoElectronico, Contrasenia, Nombre, Paterno, Materno, Genero, FechaNacimiento, 
						PromedioGeneral, Descripcion, Imagen)
						VALUES (_CorreoElectronico, _Contrasenia, _Nombre, _Paterno, _Materno, _Genero, _FechaNacimiento,
						_PromedioGeneral, _TipoUsuario, _Descripcion, _Imagen);

						SELECT _IdUsuario = IdUsuario FROM tb_usuarios WHERE CorreoElectronico = _CorreoElectronico;
				
						SELECT _IdUsuario AS "Codigo", 'OK' AS "Mensaje";
					ELSE
						SELECT 0 AS "Codigo", 'El Promedio General No Tiene El Formato Adecuado' AS "Mensaje";
					END IF;
				ELSE
				
					INSERT INTO tb_usuarios (CorreoElectronico, Contrasenia, Nombre, Paterno, Materno, Genero, FechaNacimiento, 
					PromedioGeneral, Descripcion, Imagen)
					VALUES (_CorreoElectronico, _Contrasenia, _Nombre, _Paterno, _Materno, _Genero, _FechaNacimiento,
					NULL, _TipoUsuario, _Descripcion, _Imagen);

					SELECT _IdUsuario = IdUsuario FROM tb_usuarios WHERE CorreoElectronico = _CorreoElectronico;
			
					SELECT _IdUsuario AS "Codigo", 'OK' AS "Mensaje";
				END IF;
				
			ELSE
				INSERT INTO tb_usuarios (CorreoElectronico, Contrasenia, Nombre, Paterno, Materno, Genero, FechaNacimiento, 
				PromedioGeneral, Descripcion, Imagen)
				VALUES (_CorreoElectronico, _Contrasenia, _Nombre, _Paterno, _Materno, _Genero, _FechaNacimiento,
				NULL, _TipoUsuario, _Descripcion, _Imagen);

				SELECT _IdUsuario = IdUsuario FROM tb_usuarios WHERE CorreoElectronico = _CorreoElectronico;
		
				SELECT _IdUsuario AS "Codigo", 'OK' AS "Mensaje";
			END IF;

		ELSE
			SELECT 0 AS "Codigo", 'El Correo Electronico Ya Se Encuentra Registrado' AS "Mensaje";
		END IF;  
       
    END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerSesiones
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerSesiones`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerSesiones`(
    IN _IdUsuario INT
)
BEGIN

	SELECT IdSesion, CONCAT(Dispositivo,' - ',Fabricante) As Dispositivo, Uuid, UltimaConexion, IF(Activo = 1,'Activo','Inactivo') AS Activo FROM tb_sesiones 
	WHERE IdUsuario = _IdUsuario ORDER BY IdSesion DESC LIMIT 100;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerAvisos
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerAvisos`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerAvisos`(
    IN _IdUsuario INT
)
BEGIN 
	SELECT IdAviso, TipoAviso, Aviso, FechaEnvio FROM tb_avisos WHERE IdUsuario = _IdUsuario 
	ORDER BY IdAviso DESC LIMIT 100;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerUltimoMensajeChat
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerUltimoMensajeChat`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerUltimoMensajeChat`(
    IN _IdChat INT
)
BEGIN 
	SELECT Mensaje FROM tb_mensajeschat WHERE IdChat = _IdChat ORDER BY IdMensaje DESC LIMIT 1;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerPreguntas
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerPreguntas`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerPreguntas`(
    IN _IdUsuario INT
)
BEGIN 

	SELECT Preguntas.IdPregunta, Usuarios.Imagen, CONCAT(Usuarios.Nombre,' ',Usuarios.Paterno,' ',Usuarios.Materno) As NombreCompleto, Preguntas.Pregunta, Preguntas.Descripcion, Preguntas.FechaCreacion, Preguntas.Estatus 
	FROM tb_preguntas Preguntas
	INNER JOIN tb_usuarios Usuarios ON Usuarios.IdUsuario = Preguntas.IdUsuario
    WHERE Usuarios.IdUsuario = _IdUsuario AND Preguntas.Activo = 1
	ORDER BY Preguntas.IdPregunta DESC LIMIT 100;
   
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_BuscarPreguntas
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_BuscarPreguntas`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_BuscarPreguntas`(
    IN _Busqueda VARCHAR (250)
)
BEGIN 

    IF _Busqueda IS NULL OR LENGTH(_Busqueda) = 0 THEN
        SELECT 0 AS "Codigo", 'El Campo Busqueda Esta Vacio' AS "Mensaje";
    ELSE
        SELECT Preguntas.IdPregunta, Usuarios.Imagen, CONCAT(Usuarios.Nombre,' ',Usuarios.Paterno,' ',Usuarios.Materno) As NombreCompleto, Preguntas.Pregunta, Preguntas.Descripcion, Preguntas.FechaCreacion, Preguntas.Estatus 
        FROM tb_preguntas Preguntas
        INNER JOIN tb_usuarios Usuarios ON Usuarios.IdUsuario = Preguntas.IdUsuario
        WHERE Preguntas.Pregunta LIKE CONCAT('%',_Busqueda,'%')
		OR Usuarios.Nombre LIKE CONCAT('%',_Busqueda,'%') AND Preguntas.Activo = 1 LIMIT 100;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerGrupos
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerGrupos`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerGrupos`(
    IN _IdUsuario INT
)
BEGIN

	SELECT Grupos.IdGrupo, Grupos.Imagen, Grupos.Nombre, Cursos.IdCurso, Cursos.Imagen, Cursos.Nombre, Grupos.FechaCreacion 
	FROM tb_grupos Grupos
	INNER JOIN tb_cursos Cursos ON Cursos.IdCurso = Grupos.IdCurso
	INNER JOIN tb_usuariosgrupos UsuariosGrupos ON UsuariosGrupos.IdGrupo = Grupos.IdGrupo
    WHERE UsuariosGrupos.IdUsuario = _IdUsuario AND Grupos.Activo = 1
	ORDER BY Grupos.IdGrupo DESC LIMIT 100;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerUsuario
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerUsuario`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerUsuario`(
    IN _CorreoElectronico VARCHAR(150),
    IN _Contrasenia VARCHAR(256)
)
BEGIN

	DECLARE _IdUsuario INT;
    IF _CorreoElectronico IS NULL OR LENGTH(_CorreoElectronico) = 0 
		OR _Contrasenia IS NULL OR LENGTH(_Contrasenia) = 0 THEN
        SELECT 0 AS "Codigo", 'Alguno De Los Campos Esta Vacios' AS "Mensaje";
    ELSE
        SELECT _IdUsuario = IdUsuario FROM tb_usuarios WHERE CorreoElectronico = _CorreoElectronico AND Contrasenia = _Contrasenia AND Activo = 1;

        IF _IdUsuario IS NOT NULL AND _IdUsuario > -1 THEN
            SELECT _IdUsuario AS "Codigo", 'OK' AS "Mensaje";
        ELSE
            SELECT 0 AS "Codigo", 'El Usuario No Se Encuentra Registrado' AS "Mensaje";
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_ObtenerTareasEstudiante
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_ObtenerTareasEstudiante`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_ObtenerTareasEstudiante`(
    IN _IdUsuario INT
)
BEGIN
	SELECT Tareas.IdTarea, Tareas.Nombre, Cursos.IdCurso, Cursos.Imagen, Cursos.Nombre, Tareas.FechaCreacion, Tareas.FechaEntrega, TareasCursoUsuarios.Estatus
	FROM tb_tareas Tareas
	INNER JOIN tb_cursos Cursos ON Cursos.IdCurso = Tareas.IdCurso
	INNER JOIN tb_tareascursousuarios TareasCursoUsuarios ON TareasCursoUsuarios.IdTarea = Tareas.IdTarea 
	WHERE TareasCursoUsuarios.IdUsuario = _IdUsuario AND Tareas.Activo = 1 ORDER BY Tareas.IdTarea DESC LIMIT 100;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_BuscarGrupos
-- -----------------------------------------------------

USE `COURSEROOM`;
DROP procedure IF EXISTS `COURSEROOM`.`sp_BuscarGrupos`;

DELIMITER $$
USE `COURSEROOM`$$
CREATE PROCEDURE `sp_BuscarGrupos`(
	IN	_IdUsuario INT,
    IN _Busqueda VARCHAR(250)
)
BEGIN

    IF _Busqueda IS NULL OR LENGTH(_Busqueda) = 0 THEN
        SELECT 0 AS "Codigo", 'El Campo Busqueda Esta Vacio' AS "Mensaje";
	ELSE
        SELECT Grupos.IdGrupo, Grupos.Imagen, Grupos.Nombre, Cursos.IdCurso, Cursos.Imagen, Cursos.Nombre, Grupos.FechaCreacion 
        FROM tb_grupos Grupos
        INNER JOIN tb_cursos Cursos ON Cursos.IdCurso = Grupos.IdCurso
        INNER JOIN tb_usuariosgrupos UsuariosGrupos ON UsuariosGrupos.IdGrupo = Grupos.IdGrupo
        WHERE UsuariosGrupos.IdUsuario = _IdUsuario 
        AND Grupos.Nombre LIKE CONCAT('%',_Busqueda,'%')
        OR Cursos.Nombre LIKE CONCAT('%',_Busqueda,'%')
        AND Grupos.Activo = 1
        LIMIT 100;
    END IF;

END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
